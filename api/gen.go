// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AlgorithmDataType.
const (
	Csv   AlgorithmDataType = "csv"
	Image AlgorithmDataType = "image"
	Json  AlgorithmDataType = "json"
)

// Defines values for ExtInfoExtInfoId.
const (
	HOGEID ExtInfoExtInfoId = "HOGE_ID"
)

// Defines values for ProviderRequestType.
const (
	GeoJSON        ProviderRequestType = "GeoJSON"
	TileMapService ProviderRequestType = "TileMapService"
)

// Defines values for TypesGeoJSONMultiPolygonType.
const (
	MultiPolygon TypesGeoJSONMultiPolygonType = "MultiPolygon"
)

// AlgorithmAlgorithmData defines model for Algorithm.AlgorithmData.
type AlgorithmAlgorithmData struct {
	AlgorithmDataId AlgorithmAlgorithmDataId `json:"algorithm_data_id"`
	AlgorithmId     AlgorithmAlgorithmId     `json:"algorithm_id"`
	AlgorithmScale  AlgorithmAlgorithmScale  `json:"algorithm_scale"`
	Content         []byte                   `json:"content"`
	ContentType     AlgorithmDataType        `json:"content_type"`
	EntryAt         time.Time                `json:"entry_at"`
	TargetAt        time.Time                `json:"target_at"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

// AlgorithmAlgorithmDataCreateOrUpdate defines model for Algorithm.AlgorithmDataCreateOrUpdate.
type AlgorithmAlgorithmDataCreateOrUpdate struct {
	AlgorithmId    AlgorithmAlgorithmId    `json:"algorithm_id"`
	AlgorithmScale AlgorithmAlgorithmScale `json:"algorithm_scale"`
	Content        []byte                  `json:"content"`
	ContentType    AlgorithmDataType       `json:"content_type"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

// AlgorithmAlgorithmInfomation defines model for Algorithm.AlgorithmInfomation.
type AlgorithmAlgorithmInfomation struct {
	AlgorithmDataIds     []AlgorithmAlgorithmDataId `json:"algorithm_data_ids"`
	AlgorithmDescription string                     `json:"algorithm_description"`

	// AlgorithmId From Admin API
	AlgorithmId   AlgorithmAlgorithmId `json:"algorithm_id"`
	AlgorithmName string               `json:"algorithm_name"`

	// AlgorithmParams param name: param default
	AlgorithmParams map[string]string         `json:"algorithm_params"`
	AlgorithmScales []AlgorithmAlgorithmScale `json:"algorithm_scales"`
	FirstEntryAt    time.Time                 `json:"first_entry_at"`
	LastEntryAt     time.Time                 `json:"last_entry_at"`
	LastUpdatedAt   time.Time                 `json:"last_updated_at"`
	NeedExternal    []ExtInfoExtInfoId        `json:"need_external"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

// AlgorithmAlgorithmInfomationCreate defines model for Algorithm.AlgorithmInfomationCreate.
type AlgorithmAlgorithmInfomationCreate struct {
	AlgorithmDataIds     []AlgorithmAlgorithmDataId `json:"algorithm_data_ids"`
	AlgorithmDescription string                     `json:"algorithm_description"`
	AlgorithmName        string                     `json:"algorithm_name"`

	// AlgorithmParams param name: param default
	AlgorithmParams map[string]string         `json:"algorithm_params"`
	AlgorithmScales []AlgorithmAlgorithmScale `json:"algorithm_scales"`
	NeedExternal    []ExtInfoExtInfoId        `json:"need_external"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

// AlgorithmAlgorithmInfomationCreateOrUpdate defines model for Algorithm.AlgorithmInfomationCreateOrUpdate.
type AlgorithmAlgorithmInfomationCreateOrUpdate struct {
	AlgorithmDataIds     []AlgorithmAlgorithmDataId `json:"algorithm_data_ids"`
	AlgorithmDescription string                     `json:"algorithm_description"`

	// AlgorithmId From Admin API
	AlgorithmId   AlgorithmAlgorithmId `json:"algorithm_id"`
	AlgorithmName string               `json:"algorithm_name"`

	// AlgorithmParams param name: param default
	AlgorithmParams map[string]string         `json:"algorithm_params"`
	AlgorithmScales []AlgorithmAlgorithmScale `json:"algorithm_scales"`
	NeedExternal    []ExtInfoExtInfoId        `json:"need_external"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

// AlgorithmDataType defines model for Algorithm.DataType.
type AlgorithmDataType string

// AlgorithmAlgorithmDataId defines model for Algorithm.algorithmDataId.
type AlgorithmAlgorithmDataId = string

// AlgorithmAlgorithmId defines model for Algorithm.algorithmId.
type AlgorithmAlgorithmId = string

// AlgorithmAlgorithmScale defines model for Algorithm.algorithmScale.
type AlgorithmAlgorithmScale = float32

// ExtInfoExtInfoId defines model for ExtInfo.ExtInfoId.
type ExtInfoExtInfoId string

// ExtInfoExternalInfomation defines model for ExtInfo.ExternalInfomation.
type ExtInfoExternalInfomation struct {
	ExternalDescription string           `json:"external_description"`
	ExternalId          ExtInfoExtInfoId `json:"external_id"`
	ExternalName        string           `json:"external_name"`
	FirstEntryAt        time.Time        `json:"first_entry_at"`
	LastUpdatedAt       time.Time        `json:"last_updated_at"`
	UpdatedHistory      []time.Time      `json:"updated_history"`
}

// ExtInfoExternalInfomationCreate defines model for ExtInfo.ExternalInfomationCreate.
type ExtInfoExternalInfomationCreate struct {
	ExternalDescription string      `json:"external_description"`
	ExternalName        string      `json:"external_name"`
	FirstEntryAt        time.Time   `json:"first_entry_at"`
	LastUpdatedAt       time.Time   `json:"last_updated_at"`
	UpdatedHistory      []time.Time `json:"updated_history"`
}

// ProviderClientData defines model for Provider.ClientData.
type ProviderClientData struct {
	ApiKey   TypesAuthApiKey  `json:"api_key"`
	ClientId ProviderClientId `json:"client_id"`
	Name     string           `json:"name"`
}

// ProviderClientDataCreate defines model for Provider.ClientDataCreate.
type ProviderClientDataCreate struct {
	Name string `json:"name"`
}

// ProviderRequestType defines model for Provider.RequestType.
type ProviderRequestType string

// ProviderClientId defines model for Provider.clientId.
type ProviderClientId = string

// TypesAuthApiKey defines model for Types.Auth.apiKey.
type TypesAuthApiKey = string

// TypesCommonVersion Semantic versioning
type TypesCommonVersion = string

// TypesDateDateUntil defines model for Types.Date.DateUntil.
type TypesDateDateUntil struct {
	After  *time.Time `json:"after,omitempty"`
	Before *time.Time `json:"before,omitempty"`
}

// TypesGeoJSONMultiPolygon defines model for Types.GeoJSON.MultiPolygon.
type TypesGeoJSONMultiPolygon struct {
	Coordinates [][][]interface{}            `json:"coordinates"`
	Type        TypesGeoJSONMultiPolygonType `json:"type"`
}

// TypesGeoJSONMultiPolygonType defines model for TypesGeoJSONMultiPolygon.Type.
type TypesGeoJSONMultiPolygonType string

// AlgorithmCreateJSONBody defines parameters for AlgorithmCreate.
type AlgorithmCreateJSONBody struct {
	Algorithm AlgorithmAlgorithmInfomationCreate `json:"algorithm"`
}

// ClientCreateJSONBody defines parameters for ClientCreate.
type ClientCreateJSONBody struct {
	Client ProviderClientDataCreate `json:"client"`
}

// ExtInfoCreateJSONBody defines parameters for ExtInfoCreate.
type ExtInfoCreateJSONBody struct {
	Extinfo ExtInfoExternalInfomationCreate `json:"extinfo"`
}

// AlgorithmListParams defines parameters for AlgorithmList.
type AlgorithmListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// EachAlgorithmUpdateJSONBody defines parameters for EachAlgorithmUpdate.
type EachAlgorithmUpdateJSONBody struct {
	UpdateAlgorithm AlgorithmAlgorithmInfomationCreateOrUpdate `json:"update_algorithm"`
}

// EachAlgorithmDataGetParams defines parameters for EachAlgorithmDataGet.
type EachAlgorithmDataGetParams struct {
	Scale AlgorithmAlgorithmScale `form:"scale" json:"scale"`
}

// EachAlgorithmDataUpdateJSONBody defines parameters for EachAlgorithmDataUpdate.
type EachAlgorithmDataUpdateJSONBody struct {
	UpdateData AlgorithmAlgorithmDataCreateOrUpdate `json:"update_data"`
}

// EachAlgorithmDataUpdateParams defines parameters for EachAlgorithmDataUpdate.
type EachAlgorithmDataUpdateParams struct {
	Scale AlgorithmAlgorithmScale `form:"scale" json:"scale"`
}

// ExtInfoListParams defines parameters for ExtInfoList.
type ExtInfoListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// HogeGetParams defines parameters for HogeGet.
type HogeGetParams struct {
	Area *TypesGeoJSONMultiPolygon `form:"area,omitempty" json:"area,omitempty"`
}

// DataListParams defines parameters for DataList.
type DataListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// EachDataGetParams defines parameters for EachDataGet.
type EachDataGetParams struct {
	Type            ProviderRequestType       `form:"type" json:"type"`
	AlgorithmDataId *AlgorithmAlgorithmDataId `form:"algorithm_data_id,omitempty" json:"algorithm_data_id,omitempty"`
	Area            *TypesGeoJSONMultiPolygon `form:"area,omitempty" json:"area,omitempty"`
	Until           *TypesDateDateUntil       `form:"until,omitempty" json:"until,omitempty"`
	UntilEntry      *TypesDateDateUntil       `form:"until_entry,omitempty" json:"until_entry,omitempty"`
	Param           *map[string]string        `form:"param,omitempty" json:"param,omitempty"`
	Scale           *AlgorithmAlgorithmScale  `form:"scale,omitempty" json:"scale,omitempty"`
}

// AlgorithmCreateJSONRequestBody defines body for AlgorithmCreate for application/json ContentType.
type AlgorithmCreateJSONRequestBody AlgorithmCreateJSONBody

// ClientCreateJSONRequestBody defines body for ClientCreate for application/json ContentType.
type ClientCreateJSONRequestBody ClientCreateJSONBody

// ExtInfoCreateJSONRequestBody defines body for ExtInfoCreate for application/json ContentType.
type ExtInfoCreateJSONRequestBody ExtInfoCreateJSONBody

// EachAlgorithmUpdateJSONRequestBody defines body for EachAlgorithmUpdate for application/json ContentType.
type EachAlgorithmUpdateJSONRequestBody EachAlgorithmUpdateJSONBody

// EachAlgorithmDataUpdateJSONRequestBody defines body for EachAlgorithmDataUpdate for application/json ContentType.
type EachAlgorithmDataUpdateJSONRequestBody EachAlgorithmDataUpdateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /admin/algorithm)
	AlgorithmCreate(c *gin.Context)

	// (DELETE /admin/algorithm/{algorithm_id})
	AlgorithmDelete(c *gin.Context, algorithmId AlgorithmAlgorithmId)

	// (POST /admin/client)
	ClientCreate(c *gin.Context)

	// (POST /admin/client/{client_id})
	ClientDelete(c *gin.Context, clientId ProviderClientId)

	// (POST /admin/extinfo)
	ExtInfoCreate(c *gin.Context)

	// (DELETE /admin/extinfo/{extinfo_id})
	ExtInfoDelete(c *gin.Context, extinfoId ExtInfoExtInfoId)

	// (GET /algorithm)
	AlgorithmList(c *gin.Context, params AlgorithmListParams)

	// (GET /algorithm/{algorithm_id})
	EachAlgorithmGet(c *gin.Context, algorithmId AlgorithmAlgorithmId)

	// (PUT /algorithm/{algorithm_id})
	EachAlgorithmUpdate(c *gin.Context, algorithmId AlgorithmAlgorithmId)

	// (GET /algorithm/{algorithm_id}/data)
	EachAlgorithmDataGet(c *gin.Context, algorithmId AlgorithmAlgorithmId, params EachAlgorithmDataGetParams)

	// (PUT /algorithm/{algorithm_id}/data)
	EachAlgorithmDataUpdate(c *gin.Context, algorithmId AlgorithmAlgorithmId, params EachAlgorithmDataUpdateParams)

	// (GET /extinfo)
	ExtInfoList(c *gin.Context, params ExtInfoListParams)

	// (GET /extinfo/HOGE_ID/data)
	HogeGet(c *gin.Context, params HogeGetParams)

	// (GET /extinfo/{extinfo_id})
	EachExtInfoGet(c *gin.Context, extinfoId ExtInfoExtInfoId)

	// (GET /provider/clients)
	ClientsGetClient(c *gin.Context)

	// (GET /provider/data)
	DataList(c *gin.Context, params DataListParams)

	// (GET /provider/data/{altorithm_id})
	EachDataGet(c *gin.Context, altorithmId AlgorithmAlgorithmId, params EachDataGetParams)

	// (GET /status)
	StatusGet(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// AlgorithmCreate operation middleware
func (siw *ServerInterfaceWrapper) AlgorithmCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AlgorithmCreate(c)
}

// AlgorithmDelete operation middleware
func (siw *ServerInterfaceWrapper) AlgorithmDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "algorithm_id" -------------
	var algorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "algorithm_id", c.Param("algorithm_id"), &algorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AlgorithmDelete(c, algorithmId)
}

// ClientCreate operation middleware
func (siw *ServerInterfaceWrapper) ClientCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientCreate(c)
}

// ClientDelete operation middleware
func (siw *ServerInterfaceWrapper) ClientDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "client_id" -------------
	var clientId ProviderClientId

	err = runtime.BindStyledParameterWithOptions("simple", "client_id", c.Param("client_id"), &clientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientDelete(c, clientId)
}

// ExtInfoCreate operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoCreate(c)
}

// ExtInfoDelete operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "extinfo_id" -------------
	var extinfoId ExtInfoExtInfoId

	err = runtime.BindStyledParameterWithOptions("simple", "extinfo_id", c.Param("extinfo_id"), &extinfoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extinfo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoDelete(c, extinfoId)
}

// AlgorithmList operation middleware
func (siw *ServerInterfaceWrapper) AlgorithmList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AlgorithmListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AlgorithmList(c, params)
}

// EachAlgorithmGet operation middleware
func (siw *ServerInterfaceWrapper) EachAlgorithmGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "algorithm_id" -------------
	var algorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "algorithm_id", c.Param("algorithm_id"), &algorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachAlgorithmGet(c, algorithmId)
}

// EachAlgorithmUpdate operation middleware
func (siw *ServerInterfaceWrapper) EachAlgorithmUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "algorithm_id" -------------
	var algorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "algorithm_id", c.Param("algorithm_id"), &algorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachAlgorithmUpdate(c, algorithmId)
}

// EachAlgorithmDataGet operation middleware
func (siw *ServerInterfaceWrapper) EachAlgorithmDataGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "algorithm_id" -------------
	var algorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "algorithm_id", c.Param("algorithm_id"), &algorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EachAlgorithmDataGetParams

	// ------------- Required query parameter "scale" -------------

	if paramValue := c.Query("scale"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scale is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scale", c.Request.URL.Query(), &params.Scale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scale: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachAlgorithmDataGet(c, algorithmId, params)
}

// EachAlgorithmDataUpdate operation middleware
func (siw *ServerInterfaceWrapper) EachAlgorithmDataUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "algorithm_id" -------------
	var algorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "algorithm_id", c.Param("algorithm_id"), &algorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EachAlgorithmDataUpdateParams

	// ------------- Required query parameter "scale" -------------

	if paramValue := c.Query("scale"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scale is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scale", c.Request.URL.Query(), &params.Scale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scale: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachAlgorithmDataUpdate(c, algorithmId, params)
}

// ExtInfoList operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtInfoListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoList(c, params)
}

// HogeGet operation middleware
func (siw *ServerInterfaceWrapper) HogeGet(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params HogeGetParams

	// ------------- Optional query parameter "area" -------------

	err = runtime.BindQueryParameter("form", true, false, "area", c.Request.URL.Query(), &params.Area)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter area: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HogeGet(c, params)
}

// EachExtInfoGet operation middleware
func (siw *ServerInterfaceWrapper) EachExtInfoGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "extinfo_id" -------------
	var extinfoId ExtInfoExtInfoId

	err = runtime.BindStyledParameterWithOptions("simple", "extinfo_id", c.Param("extinfo_id"), &extinfoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extinfo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachExtInfoGet(c, extinfoId)
}

// ClientsGetClient operation middleware
func (siw *ServerInterfaceWrapper) ClientsGetClient(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientsGetClient(c)
}

// DataList operation middleware
func (siw *ServerInterfaceWrapper) DataList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DataListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DataList(c, params)
}

// EachDataGet operation middleware
func (siw *ServerInterfaceWrapper) EachDataGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "altorithm_id" -------------
	var altorithmId AlgorithmAlgorithmId

	err = runtime.BindStyledParameterWithOptions("simple", "altorithm_id", c.Param("altorithm_id"), &altorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter altorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EachDataGetParams

	// ------------- Required query parameter "type" -------------

	if paramValue := c.Query("type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "algorithm_data_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "algorithm_data_id", c.Request.URL.Query(), &params.AlgorithmDataId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter algorithm_data_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "area" -------------

	err = runtime.BindQueryParameter("form", true, false, "area", c.Request.URL.Query(), &params.Area)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter area: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", c.Request.URL.Query(), &params.Until)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter until: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "until_entry" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_entry", c.Request.URL.Query(), &params.UntilEntry)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter until_entry: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", c.Request.URL.Query(), &params.Param)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter param: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "scale" -------------

	err = runtime.BindQueryParameter("form", true, false, "scale", c.Request.URL.Query(), &params.Scale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scale: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachDataGet(c, altorithmId, params)
}

// StatusGet operation middleware
func (siw *ServerInterfaceWrapper) StatusGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StatusGet(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/admin/algorithm", wrapper.AlgorithmCreate)
	router.DELETE(options.BaseURL+"/admin/algorithm/:algorithm_id", wrapper.AlgorithmDelete)
	router.POST(options.BaseURL+"/admin/client", wrapper.ClientCreate)
	router.POST(options.BaseURL+"/admin/client/:client_id", wrapper.ClientDelete)
	router.POST(options.BaseURL+"/admin/extinfo", wrapper.ExtInfoCreate)
	router.DELETE(options.BaseURL+"/admin/extinfo/:extinfo_id", wrapper.ExtInfoDelete)
	router.GET(options.BaseURL+"/algorithm", wrapper.AlgorithmList)
	router.GET(options.BaseURL+"/algorithm/:algorithm_id", wrapper.EachAlgorithmGet)
	router.PUT(options.BaseURL+"/algorithm/:algorithm_id", wrapper.EachAlgorithmUpdate)
	router.GET(options.BaseURL+"/algorithm/:algorithm_id/data", wrapper.EachAlgorithmDataGet)
	router.PUT(options.BaseURL+"/algorithm/:algorithm_id/data", wrapper.EachAlgorithmDataUpdate)
	router.GET(options.BaseURL+"/extinfo", wrapper.ExtInfoList)
	router.GET(options.BaseURL+"/extinfo/HOGE_ID/data", wrapper.HogeGet)
	router.GET(options.BaseURL+"/extinfo/:extinfo_id", wrapper.EachExtInfoGet)
	router.GET(options.BaseURL+"/provider/clients", wrapper.ClientsGetClient)
	router.GET(options.BaseURL+"/provider/data", wrapper.DataList)
	router.GET(options.BaseURL+"/provider/data/:altorithm_id", wrapper.EachDataGet)
	router.GET(options.BaseURL+"/status", wrapper.StatusGet)
}

type AlgorithmCreateRequestObject struct {
	Body *AlgorithmCreateJSONRequestBody
}

type AlgorithmCreateResponseObject interface {
	VisitAlgorithmCreateResponse(w http.ResponseWriter) error
}

type AlgorithmCreate200JSONResponse struct {
	AlgorithmDataIds     []AlgorithmAlgorithmDataId `json:"algorithm_data_ids"`
	AlgorithmDescription string                     `json:"algorithm_description"`

	// AlgorithmId From Admin API
	AlgorithmId   AlgorithmAlgorithmId `json:"algorithm_id"`
	AlgorithmName string               `json:"algorithm_name"`

	// AlgorithmParams param name: param default
	AlgorithmParams map[string]string         `json:"algorithm_params"`
	AlgorithmScales []AlgorithmAlgorithmScale `json:"algorithm_scales"`
	ApiKey          TypesAuthApiKey           `json:"api_key"`
	FirstEntryAt    time.Time                 `json:"first_entry_at"`
	LastEntryAt     time.Time                 `json:"last_entry_at"`
	LastUpdatedAt   time.Time                 `json:"last_updated_at"`
	NeedExternal    []ExtInfoExtInfoId        `json:"need_external"`

	// Version Semantic versioning
	Version TypesCommonVersion `json:"version"`
}

func (response AlgorithmCreate200JSONResponse) VisitAlgorithmCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlgorithmDeleteRequestObject struct {
	AlgorithmId AlgorithmAlgorithmId `json:"algorithm_id"`
}

type AlgorithmDeleteResponseObject interface {
	VisitAlgorithmDeleteResponse(w http.ResponseWriter) error
}

type AlgorithmDelete200JSONResponse struct {
	DeleteAlgorithmId AlgorithmAlgorithmId `json:"delete_algorithm_id"`
}

func (response AlgorithmDelete200JSONResponse) VisitAlgorithmDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientCreateRequestObject struct {
	Body *ClientCreateJSONRequestBody
}

type ClientCreateResponseObject interface {
	VisitClientCreateResponse(w http.ResponseWriter) error
}

type ClientCreate200JSONResponse ProviderClientData

func (response ClientCreate200JSONResponse) VisitClientCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientDeleteRequestObject struct {
	ClientId ProviderClientId `json:"client_id"`
}

type ClientDeleteResponseObject interface {
	VisitClientDeleteResponse(w http.ResponseWriter) error
}

type ClientDelete200JSONResponse struct {
	DeleteClientId ProviderClientId `json:"delete_client_id"`
}

func (response ClientDelete200JSONResponse) VisitClientDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoCreateRequestObject struct {
	Body *ExtInfoCreateJSONRequestBody
}

type ExtInfoCreateResponseObject interface {
	VisitExtInfoCreateResponse(w http.ResponseWriter) error
}

type ExtInfoCreate200JSONResponse ExtInfoExternalInfomation

func (response ExtInfoCreate200JSONResponse) VisitExtInfoCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoDeleteRequestObject struct {
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

type ExtInfoDeleteResponseObject interface {
	VisitExtInfoDeleteResponse(w http.ResponseWriter) error
}

type ExtInfoDelete200JSONResponse struct {
	DeleteExtinfoId ExtInfoExtInfoId `json:"delete_extinfo_id"`
}

func (response ExtInfoDelete200JSONResponse) VisitExtInfoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AlgorithmListRequestObject struct {
	Params AlgorithmListParams
}

type AlgorithmListResponseObject interface {
	VisitAlgorithmListResponse(w http.ResponseWriter) error
}

type AlgorithmList200JSONResponse []AlgorithmAlgorithmInfomation

func (response AlgorithmList200JSONResponse) VisitAlgorithmListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachAlgorithmGetRequestObject struct {
	AlgorithmId AlgorithmAlgorithmId `json:"algorithm_id"`
}

type EachAlgorithmGetResponseObject interface {
	VisitEachAlgorithmGetResponse(w http.ResponseWriter) error
}

type EachAlgorithmGet200JSONResponse AlgorithmAlgorithmInfomation

func (response EachAlgorithmGet200JSONResponse) VisitEachAlgorithmGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachAlgorithmUpdateRequestObject struct {
	AlgorithmId AlgorithmAlgorithmId `json:"algorithm_id"`
	Body        *EachAlgorithmUpdateJSONRequestBody
}

type EachAlgorithmUpdateResponseObject interface {
	VisitEachAlgorithmUpdateResponse(w http.ResponseWriter) error
}

type EachAlgorithmUpdate200JSONResponse AlgorithmAlgorithmInfomation

func (response EachAlgorithmUpdate200JSONResponse) VisitEachAlgorithmUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachAlgorithmDataGetRequestObject struct {
	AlgorithmId AlgorithmAlgorithmId `json:"algorithm_id"`
	Params      EachAlgorithmDataGetParams
}

type EachAlgorithmDataGetResponseObject interface {
	VisitEachAlgorithmDataGetResponse(w http.ResponseWriter) error
}

type EachAlgorithmDataGet200JSONResponse AlgorithmAlgorithmData

func (response EachAlgorithmDataGet200JSONResponse) VisitEachAlgorithmDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachAlgorithmDataUpdateRequestObject struct {
	AlgorithmId AlgorithmAlgorithmId `json:"algorithm_id"`
	Params      EachAlgorithmDataUpdateParams
	Body        *EachAlgorithmDataUpdateJSONRequestBody
}

type EachAlgorithmDataUpdateResponseObject interface {
	VisitEachAlgorithmDataUpdateResponse(w http.ResponseWriter) error
}

type EachAlgorithmDataUpdate200JSONResponse AlgorithmAlgorithmData

func (response EachAlgorithmDataUpdate200JSONResponse) VisitEachAlgorithmDataUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoListRequestObject struct {
	Params ExtInfoListParams
}

type ExtInfoListResponseObject interface {
	VisitExtInfoListResponse(w http.ResponseWriter) error
}

type ExtInfoList200JSONResponse []ExtInfoExternalInfomation

func (response ExtInfoList200JSONResponse) VisitExtInfoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type HogeGetRequestObject struct {
	Params HogeGetParams
}

type HogeGetResponseObject interface {
	VisitHogeGetResponse(w http.ResponseWriter) error
}

type HogeGet200JSONResponse []struct {
	ContentType HogeGet200JSONResponseContentType `json:"contentType"`
	Image       []byte                            `json:"image"`
}

func (response HogeGet200JSONResponse) VisitHogeGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachExtInfoGetRequestObject struct {
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

type EachExtInfoGetResponseObject interface {
	VisitEachExtInfoGetResponse(w http.ResponseWriter) error
}

type EachExtInfoGet200JSONResponse ExtInfoExternalInfomation

func (response EachExtInfoGet200JSONResponse) VisitEachExtInfoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientsGetClientRequestObject struct {
}

type ClientsGetClientResponseObject interface {
	VisitClientsGetClientResponse(w http.ResponseWriter) error
}

type ClientsGetClient200JSONResponse ProviderClientData

func (response ClientsGetClient200JSONResponse) VisitClientsGetClientResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DataListRequestObject struct {
	Params DataListParams
}

type DataListResponseObject interface {
	VisitDataListResponse(w http.ResponseWriter) error
}

type DataList200JSONResponse []AlgorithmAlgorithmInfomation

func (response DataList200JSONResponse) VisitDataListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachDataGetRequestObject struct {
	AltorithmId AlgorithmAlgorithmId `json:"altorithm_id"`
	Params      EachDataGetParams
}

type EachDataGetResponseObject interface {
	VisitEachDataGetResponse(w http.ResponseWriter) error
}

type EachDataGet200JSONResponse AlgorithmAlgorithmData

func (response EachDataGet200JSONResponse) VisitEachDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusGetRequestObject struct {
}

type StatusGetResponseObject interface {
	VisitStatusGetResponse(w http.ResponseWriter) error
}

type StatusGet200JSONResponse string

func (response StatusGet200JSONResponse) VisitStatusGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusGet500JSONResponse string

func (response StatusGet500JSONResponse) VisitStatusGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /admin/algorithm)
	AlgorithmCreate(ctx context.Context, request AlgorithmCreateRequestObject) (AlgorithmCreateResponseObject, error)

	// (DELETE /admin/algorithm/{algorithm_id})
	AlgorithmDelete(ctx context.Context, request AlgorithmDeleteRequestObject) (AlgorithmDeleteResponseObject, error)

	// (POST /admin/client)
	ClientCreate(ctx context.Context, request ClientCreateRequestObject) (ClientCreateResponseObject, error)

	// (POST /admin/client/{client_id})
	ClientDelete(ctx context.Context, request ClientDeleteRequestObject) (ClientDeleteResponseObject, error)

	// (POST /admin/extinfo)
	ExtInfoCreate(ctx context.Context, request ExtInfoCreateRequestObject) (ExtInfoCreateResponseObject, error)

	// (DELETE /admin/extinfo/{extinfo_id})
	ExtInfoDelete(ctx context.Context, request ExtInfoDeleteRequestObject) (ExtInfoDeleteResponseObject, error)

	// (GET /algorithm)
	AlgorithmList(ctx context.Context, request AlgorithmListRequestObject) (AlgorithmListResponseObject, error)

	// (GET /algorithm/{algorithm_id})
	EachAlgorithmGet(ctx context.Context, request EachAlgorithmGetRequestObject) (EachAlgorithmGetResponseObject, error)

	// (PUT /algorithm/{algorithm_id})
	EachAlgorithmUpdate(ctx context.Context, request EachAlgorithmUpdateRequestObject) (EachAlgorithmUpdateResponseObject, error)

	// (GET /algorithm/{algorithm_id}/data)
	EachAlgorithmDataGet(ctx context.Context, request EachAlgorithmDataGetRequestObject) (EachAlgorithmDataGetResponseObject, error)

	// (PUT /algorithm/{algorithm_id}/data)
	EachAlgorithmDataUpdate(ctx context.Context, request EachAlgorithmDataUpdateRequestObject) (EachAlgorithmDataUpdateResponseObject, error)

	// (GET /extinfo)
	ExtInfoList(ctx context.Context, request ExtInfoListRequestObject) (ExtInfoListResponseObject, error)

	// (GET /extinfo/HOGE_ID/data)
	HogeGet(ctx context.Context, request HogeGetRequestObject) (HogeGetResponseObject, error)

	// (GET /extinfo/{extinfo_id})
	EachExtInfoGet(ctx context.Context, request EachExtInfoGetRequestObject) (EachExtInfoGetResponseObject, error)

	// (GET /provider/clients)
	ClientsGetClient(ctx context.Context, request ClientsGetClientRequestObject) (ClientsGetClientResponseObject, error)

	// (GET /provider/data)
	DataList(ctx context.Context, request DataListRequestObject) (DataListResponseObject, error)

	// (GET /provider/data/{altorithm_id})
	EachDataGet(ctx context.Context, request EachDataGetRequestObject) (EachDataGetResponseObject, error)

	// (GET /status)
	StatusGet(ctx context.Context, request StatusGetRequestObject) (StatusGetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AlgorithmCreate operation middleware
func (sh *strictHandler) AlgorithmCreate(ctx *gin.Context) {
	var request AlgorithmCreateRequestObject

	var body AlgorithmCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlgorithmCreate(ctx, request.(AlgorithmCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlgorithmCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AlgorithmCreateResponseObject); ok {
		if err := validResponse.VisitAlgorithmCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AlgorithmDelete operation middleware
func (sh *strictHandler) AlgorithmDelete(ctx *gin.Context, algorithmId AlgorithmAlgorithmId) {
	var request AlgorithmDeleteRequestObject

	request.AlgorithmId = algorithmId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlgorithmDelete(ctx, request.(AlgorithmDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlgorithmDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AlgorithmDeleteResponseObject); ok {
		if err := validResponse.VisitAlgorithmDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientCreate operation middleware
func (sh *strictHandler) ClientCreate(ctx *gin.Context) {
	var request ClientCreateRequestObject

	var body ClientCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientCreate(ctx, request.(ClientCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientCreateResponseObject); ok {
		if err := validResponse.VisitClientCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientDelete operation middleware
func (sh *strictHandler) ClientDelete(ctx *gin.Context, clientId ProviderClientId) {
	var request ClientDeleteRequestObject

	request.ClientId = clientId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientDelete(ctx, request.(ClientDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientDeleteResponseObject); ok {
		if err := validResponse.VisitClientDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoCreate operation middleware
func (sh *strictHandler) ExtInfoCreate(ctx *gin.Context) {
	var request ExtInfoCreateRequestObject

	var body ExtInfoCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoCreate(ctx, request.(ExtInfoCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoCreateResponseObject); ok {
		if err := validResponse.VisitExtInfoCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoDelete operation middleware
func (sh *strictHandler) ExtInfoDelete(ctx *gin.Context, extinfoId ExtInfoExtInfoId) {
	var request ExtInfoDeleteRequestObject

	request.ExtinfoId = extinfoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoDelete(ctx, request.(ExtInfoDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoDeleteResponseObject); ok {
		if err := validResponse.VisitExtInfoDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AlgorithmList operation middleware
func (sh *strictHandler) AlgorithmList(ctx *gin.Context, params AlgorithmListParams) {
	var request AlgorithmListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AlgorithmList(ctx, request.(AlgorithmListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AlgorithmList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AlgorithmListResponseObject); ok {
		if err := validResponse.VisitAlgorithmListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachAlgorithmGet operation middleware
func (sh *strictHandler) EachAlgorithmGet(ctx *gin.Context, algorithmId AlgorithmAlgorithmId) {
	var request EachAlgorithmGetRequestObject

	request.AlgorithmId = algorithmId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachAlgorithmGet(ctx, request.(EachAlgorithmGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachAlgorithmGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachAlgorithmGetResponseObject); ok {
		if err := validResponse.VisitEachAlgorithmGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachAlgorithmUpdate operation middleware
func (sh *strictHandler) EachAlgorithmUpdate(ctx *gin.Context, algorithmId AlgorithmAlgorithmId) {
	var request EachAlgorithmUpdateRequestObject

	request.AlgorithmId = algorithmId

	var body EachAlgorithmUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachAlgorithmUpdate(ctx, request.(EachAlgorithmUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachAlgorithmUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachAlgorithmUpdateResponseObject); ok {
		if err := validResponse.VisitEachAlgorithmUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachAlgorithmDataGet operation middleware
func (sh *strictHandler) EachAlgorithmDataGet(ctx *gin.Context, algorithmId AlgorithmAlgorithmId, params EachAlgorithmDataGetParams) {
	var request EachAlgorithmDataGetRequestObject

	request.AlgorithmId = algorithmId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachAlgorithmDataGet(ctx, request.(EachAlgorithmDataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachAlgorithmDataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachAlgorithmDataGetResponseObject); ok {
		if err := validResponse.VisitEachAlgorithmDataGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachAlgorithmDataUpdate operation middleware
func (sh *strictHandler) EachAlgorithmDataUpdate(ctx *gin.Context, algorithmId AlgorithmAlgorithmId, params EachAlgorithmDataUpdateParams) {
	var request EachAlgorithmDataUpdateRequestObject

	request.AlgorithmId = algorithmId
	request.Params = params

	var body EachAlgorithmDataUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachAlgorithmDataUpdate(ctx, request.(EachAlgorithmDataUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachAlgorithmDataUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachAlgorithmDataUpdateResponseObject); ok {
		if err := validResponse.VisitEachAlgorithmDataUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoList operation middleware
func (sh *strictHandler) ExtInfoList(ctx *gin.Context, params ExtInfoListParams) {
	var request ExtInfoListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoList(ctx, request.(ExtInfoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoListResponseObject); ok {
		if err := validResponse.VisitExtInfoListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// HogeGet operation middleware
func (sh *strictHandler) HogeGet(ctx *gin.Context, params HogeGetParams) {
	var request HogeGetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.HogeGet(ctx, request.(HogeGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HogeGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(HogeGetResponseObject); ok {
		if err := validResponse.VisitHogeGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachExtInfoGet operation middleware
func (sh *strictHandler) EachExtInfoGet(ctx *gin.Context, extinfoId ExtInfoExtInfoId) {
	var request EachExtInfoGetRequestObject

	request.ExtinfoId = extinfoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachExtInfoGet(ctx, request.(EachExtInfoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachExtInfoGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachExtInfoGetResponseObject); ok {
		if err := validResponse.VisitEachExtInfoGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientsGetClient operation middleware
func (sh *strictHandler) ClientsGetClient(ctx *gin.Context) {
	var request ClientsGetClientRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientsGetClient(ctx, request.(ClientsGetClientRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientsGetClient")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientsGetClientResponseObject); ok {
		if err := validResponse.VisitClientsGetClientResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DataList operation middleware
func (sh *strictHandler) DataList(ctx *gin.Context, params DataListParams) {
	var request DataListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DataList(ctx, request.(DataListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DataList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DataListResponseObject); ok {
		if err := validResponse.VisitDataListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachDataGet operation middleware
func (sh *strictHandler) EachDataGet(ctx *gin.Context, altorithmId AlgorithmAlgorithmId, params EachDataGetParams) {
	var request EachDataGetRequestObject

	request.AltorithmId = altorithmId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachDataGet(ctx, request.(EachDataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachDataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachDataGetResponseObject); ok {
		if err := validResponse.VisitEachDataGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// StatusGet operation middleware
func (sh *strictHandler) StatusGet(ctx *gin.Context) {
	var request StatusGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StatusGet(ctx, request.(StatusGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(StatusGetResponseObject); ok {
		if err := validResponse.VisitStatusGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

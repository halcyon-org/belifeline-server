// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ExtInfoExtInfoId.
const (
	ExampleId ExtInfoExtInfoId = "example_id"
)

// Defines values for KoyoDataType.
const (
	Csv   KoyoDataType = "csv"
	Image KoyoDataType = "image"
	Json  KoyoDataType = "json"
)

// Defines values for ProviderRequestType.
const (
	GeoJSON        ProviderRequestType = "GeoJSON"
	TileMapService ProviderRequestType = "TileMapService"
)

// Defines values for TypesGeoJSONMultiPolygonType.
const (
	MultiPolygon TypesGeoJSONMultiPolygonType = "MultiPolygon"
)

// ExtInfoExampleInfoExampleData defines model for ExtInfo.ExampleInfo.ExampleData.
type ExtInfoExampleInfoExampleData struct {
	Area  TypesGeoJSONMultiPolygon `json:"area"`
	Image []byte                   `json:"image"`
}

// ExtInfoExtInfoId defines model for ExtInfo.ExtInfoId.
type ExtInfoExtInfoId string

// ExtInfoExternalInfomation Basic information about the external information.
type ExtInfoExternalInfomation struct {
	ExternalDescription string `json:"external_description"`

	// ExternalId This ID can be obtained through admin api.
	// It is a human friendly format like GitHub repository names.
	// Only the pattern `^[a-z_-]{1,64}$` is allowed.
	ExternalId         ExtInfoExtInfoId `json:"external_id"`
	ExternalName       string           `json:"external_name"`
	FirstEntryAt       time.Time        `json:"first_entry_at"`
	LastUpdatedAt      time.Time        `json:"last_updated_at"`
	License            string           `json:"license"`
	LicenseDescription string           `json:"license_description"`
	UpdatedHistory     []time.Time      `json:"updated_history"`
}

// ExtInfoExternalInfomationCreate Basic information about the external information.
type ExtInfoExternalInfomationCreate struct {
	ExternalDescription string      `json:"external_description"`
	ExternalName        string      `json:"external_name"`
	FirstEntryAt        time.Time   `json:"first_entry_at"`
	LastUpdatedAt       time.Time   `json:"last_updated_at"`
	License             string      `json:"license"`
	LicenseDescription  string      `json:"license_description"`
	UpdatedHistory      []time.Time `json:"updated_history"`
}

// KoyoDataType defines model for Koyo.DataType.
type KoyoDataType string

// KoyoKoyoData The data is the result of processing by the koyo.
type KoyoKoyoData struct {
	// Content The data content itself.
	Content []byte `json:"content"`

	// ContentType The type of data format.(enum: image, csv, json...)
	ContentType KoyoDataType   `json:"content_type"`
	EntryAt     time.Time      `json:"entry_at"`
	KoyoDataId  KoyoKoyoDataId `json:"koyo_data_id"`

	// KoyoId The ID of the koyo that generated the data.
	KoyoId KoyoKoyoId `json:"koyo_id"`

	// KoyoScale The resolution of the data.
	KoyoScale KoyoKoyoScale `json:"koyo_scale"`

	// TargetAt The time at which the data is targeted.
	// The time at which data processing began (= the primary data from which the data was processed was updated).
	// In other words, it indicates which time the data is based on.")
	TargetAt time.Time `json:"target_at"`

	// Version The version of the koyo used to generate the data.
	Version TypesCommonVersion `json:"version"`
}

// KoyoKoyoDataCreate The data is the result of processing by the koyo.
type KoyoKoyoDataCreate struct {
	// Content The data content itself.
	Content []byte `json:"content"`

	// ContentType The type of data format.(enum: image, csv, json...)
	ContentType KoyoDataType `json:"content_type"`

	// KoyoScale The resolution of the data.
	KoyoScale KoyoKoyoScale `json:"koyo_scale"`

	// Version The version of the koyo used to generate the data.
	Version TypesCommonVersion `json:"version"`
}

// KoyoKoyoInfomation Basic information about the koyo.
type KoyoKoyoInfomation struct {
	// ExtLicenses Licenses for primary information and other information used by the koyo.
	ExtLicenses     []string         `json:"ext_licenses"`
	FirstEntryAt    time.Time        `json:"first_entry_at"`
	KoyoDataIds     []KoyoKoyoDataId `json:"koyo_data_ids"`
	KoyoDescription string           `json:"koyo_description"`

	// KoyoId This ID can be obtained through admin api.
	// It is a human friendly format like GitHub repository names.
	// Only the pattern `^[a-z_-]{1,64}$` is allowed.
	KoyoId   KoyoKoyoId `json:"koyo_id"`
	KoyoName string     `json:"koyo_name"`

	// KoyoParams Koyo parameters. The key is the parameter name and the value is the default value.
	KoyoParams map[string]string `json:"koyo_params"`

	// KoyoScales Koyo scales is resolution (e.g. one data per meter). Returns a list of supported scales.
	KoyoScales    []KoyoKoyoScale    `json:"koyo_scales"`
	LastEntryAt   time.Time          `json:"last_entry_at"`
	LastUpdatedAt time.Time          `json:"last_updated_at"`
	License       string             `json:"license"`
	NeedExternal  []ExtInfoExtInfoId `json:"need_external"`
	Version       TypesCommonVersion `json:"version"`
}

// KoyoKoyoInfomationCreate Basic information about the koyo.
type KoyoKoyoInfomationCreate struct {
	// ExtLicenses Licenses for primary information and other information used by the koyo.
	ExtLicenses     []string         `json:"ext_licenses"`
	KoyoDataIds     []KoyoKoyoDataId `json:"koyo_data_ids"`
	KoyoDescription string           `json:"koyo_description"`
	KoyoName        string           `json:"koyo_name"`

	// KoyoParams Koyo parameters. The key is the parameter name and the value is the default value.
	KoyoParams map[string]string `json:"koyo_params"`

	// KoyoScales Koyo scales is resolution (e.g. one data per meter). Returns a list of supported scales.
	KoyoScales   []KoyoKoyoScale    `json:"koyo_scales"`
	License      string             `json:"license"`
	NeedExternal []ExtInfoExtInfoId `json:"need_external"`
	Version      TypesCommonVersion `json:"version"`
}

// KoyoKoyoInfomationCreateOrUpdate Basic information about the koyo.
type KoyoKoyoInfomationCreateOrUpdate struct {
	// ExtLicenses Licenses for primary information and other information used by the koyo.
	ExtLicenses     []string         `json:"ext_licenses"`
	KoyoDataIds     []KoyoKoyoDataId `json:"koyo_data_ids"`
	KoyoDescription string           `json:"koyo_description"`

	// KoyoId This ID can be obtained through admin api.
	// It is a human friendly format like GitHub repository names.
	// Only the pattern `^[a-z_-]{1,64}$` is allowed.
	KoyoId   KoyoKoyoId `json:"koyo_id"`
	KoyoName string     `json:"koyo_name"`

	// KoyoParams Koyo parameters. The key is the parameter name and the value is the default value.
	KoyoParams map[string]string `json:"koyo_params"`

	// KoyoScales Koyo scales is resolution (e.g. one data per meter). Returns a list of supported scales.
	KoyoScales   []KoyoKoyoScale    `json:"koyo_scales"`
	License      string             `json:"license"`
	NeedExternal []ExtInfoExtInfoId `json:"need_external"`
	Version      TypesCommonVersion `json:"version"`
}

// KoyoKoyoDataId defines model for Koyo.koyoDataId.
type KoyoKoyoDataId = openapi_types.UUID

// KoyoKoyoId defines model for Koyo.koyoId.
type KoyoKoyoId = string

// KoyoKoyoScale defines model for Koyo.koyoScale.
type KoyoKoyoScale = float32

// ProviderClientData Data for the client to use the provider api.
type ProviderClientData struct {
	ApiKey    TypesAuthApiKey  `json:"api_key"`
	ClientId  ProviderClientId `json:"client_id"`
	CreatedAt time.Time        `json:"created_at"`

	// LastUpdatedAt The last time the client updated the data.
	LastUpdatedAt time.Time `json:"last_updated_at"`

	// LastUsedAt The last time the client used the api.
	LastUsedAt time.Time `json:"last_used_at"`
	Username   string    `json:"username"`
}

// ProviderClientDataCreate Data for the client to use the provider api.
type ProviderClientDataCreate struct {
	Username string `json:"username"`
}

// ProviderRequestType defines model for Provider.RequestType.
type ProviderRequestType string

// ProviderClientId defines model for Provider.clientId.
type ProviderClientId = openapi_types.UUID

// TypesAuthApiKey defines model for Types.Auth.apiKey.
type TypesAuthApiKey = string

// TypesCommonVersion Semantic versioning
type TypesCommonVersion = string

// TypesDateDateUntil defines model for Types.Date.DateUntil.
type TypesDateDateUntil struct {
	After  *time.Time `json:"after,omitempty"`
	Before *time.Time `json:"before,omitempty"`
}

// TypesGeoJSONMultiPolygon defines model for Types.GeoJSON.MultiPolygon.
type TypesGeoJSONMultiPolygon struct {
	Coordinates [][][]interface{}            `json:"coordinates"`
	Type        TypesGeoJSONMultiPolygonType `json:"type"`
}

// TypesGeoJSONMultiPolygonType defines model for TypesGeoJSONMultiPolygon.Type.
type TypesGeoJSONMultiPolygonType string

// ClientListParams defines parameters for ClientList.
type ClientListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ClientCreateJSONBody defines parameters for ClientCreate.
type ClientCreateJSONBody struct {
	// Client Data for the client to use the provider api.
	Client ProviderClientDataCreate `json:"client"`
}

// ExtInfoCreateJSONBody defines parameters for ExtInfoCreate.
type ExtInfoCreateJSONBody struct {
	// Extinfo Basic information about the external information.
	Extinfo ExtInfoExternalInfomationCreate `json:"extinfo"`
}

// KoyoCreateJSONBody defines parameters for KoyoCreate.
type KoyoCreateJSONBody struct {
	// Koyo Basic information about the koyo.
	Koyo KoyoKoyoInfomationCreate `json:"koyo"`
}

// ExtInfoListParams defines parameters for ExtInfoList.
type ExtInfoListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ExampleInfoGetParams defines parameters for ExampleInfoGet.
type ExampleInfoGetParams struct {
	Area *TypesGeoJSONMultiPolygon `form:"area,omitempty" json:"area,omitempty"`
}

// ExampleInfoPostJSONBody defines parameters for ExampleInfoPost.
type ExampleInfoPostJSONBody struct {
	Data []ExtInfoExampleInfoExampleData `json:"data"`
}

// KoyoListParams defines parameters for KoyoList.
type KoyoListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// EachKoyoUpdateJSONBody defines parameters for EachKoyoUpdate.
type EachKoyoUpdateJSONBody struct {
	// UpdateKoyo Basic information about the koyo.
	UpdateKoyo KoyoKoyoInfomationCreateOrUpdate `json:"update_koyo"`
}

// EachKoyoDataNewJSONBody defines parameters for EachKoyoDataNew.
type EachKoyoDataNewJSONBody struct {
	// UpdateData The data is the result of processing by the koyo.
	UpdateData KoyoKoyoDataCreate `json:"update_data"`
}

// DataListParams defines parameters for DataList.
type DataListParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// EachDataGetParams defines parameters for EachDataGet.
type EachDataGetParams struct {
	Type       ProviderRequestType       `form:"type" json:"type"`
	KoyoDataId *KoyoKoyoDataId           `form:"koyo_data_id,omitempty" json:"koyo_data_id,omitempty"`
	Area       *TypesGeoJSONMultiPolygon `form:"area,omitempty" json:"area,omitempty"`
	Until      *TypesDateDateUntil       `form:"until,omitempty" json:"until,omitempty"`
	UntilEntry *TypesDateDateUntil       `form:"until_entry,omitempty" json:"until_entry,omitempty"`
	Param      *map[string]string        `form:"param,omitempty" json:"param,omitempty"`
	Scale      *KoyoKoyoScale            `form:"scale,omitempty" json:"scale,omitempty"`
}

// ClientCreateJSONRequestBody defines body for ClientCreate for application/json ContentType.
type ClientCreateJSONRequestBody ClientCreateJSONBody

// ExtInfoCreateJSONRequestBody defines body for ExtInfoCreate for application/json ContentType.
type ExtInfoCreateJSONRequestBody ExtInfoCreateJSONBody

// KoyoCreateJSONRequestBody defines body for KoyoCreate for application/json ContentType.
type KoyoCreateJSONRequestBody KoyoCreateJSONBody

// ExampleInfoPostJSONRequestBody defines body for ExampleInfoPost for application/json ContentType.
type ExampleInfoPostJSONRequestBody ExampleInfoPostJSONBody

// EachKoyoUpdateJSONRequestBody defines body for EachKoyoUpdate for application/json ContentType.
type EachKoyoUpdateJSONRequestBody EachKoyoUpdateJSONBody

// EachKoyoDataNewJSONRequestBody defines body for EachKoyoDataNew for application/json ContentType.
type EachKoyoDataNewJSONRequestBody EachKoyoDataNewJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /admin/client)
	ClientList(c *gin.Context, params ClientListParams)

	// (POST /admin/client)
	ClientCreate(c *gin.Context)

	// (POST /admin/client/{client_id})
	ClientDelete(c *gin.Context, clientId ProviderClientId)

	// (POST /admin/client/{client_id}/revoke)
	ClientRevoke(c *gin.Context, clientId ProviderClientId)

	// (POST /admin/extinfo)
	ExtInfoCreate(c *gin.Context)

	// (DELETE /admin/extinfo/{extinfo_id})
	ExtInfoDelete(c *gin.Context, extinfoId ExtInfoExtInfoId)

	// (POST /admin/extinfo/{extinfo_id}/revoke)
	ExtInfoRevoke(c *gin.Context, extinfoId ExtInfoExtInfoId)
	// Create new koyo information
	// (POST /admin/koyo)
	KoyoCreate(c *gin.Context)
	// Delete koyo information
	// (DELETE /admin/koyo/{koyo_id})
	KoyoDelete(c *gin.Context, koyoId KoyoKoyoId)
	// Revoke koyo api key
	// (POST /admin/koyo/{koyo_id}/revoke)
	KoyoRevoke(c *gin.Context, koyoId KoyoKoyoId)

	// (GET /extinfo)
	ExtInfoList(c *gin.Context, params ExtInfoListParams)
	// Get example data endpoint
	// (GET /extinfo/example_id/data)
	ExampleInfoGet(c *gin.Context, params ExampleInfoGetParams)
	// Post example data endpoint
	// (POST /extinfo/example_id/data)
	ExampleInfoPost(c *gin.Context)

	// (GET /extinfo/{extinfo_id})
	ExtInfoGet(c *gin.Context, extinfoId ExtInfoExtInfoId)
	// Get a list of koyos' basic information
	// (GET /koyo)
	KoyoList(c *gin.Context, params KoyoListParams)
	// Get koyos' basic information
	// (GET /koyo/{koyo_id})
	EachKoyoGet(c *gin.Context, koyoId KoyoKoyoId)
	// Update information on own koyo
	// (PUT /koyo/{koyo_id})
	EachKoyoUpdate(c *gin.Context, koyoId KoyoKoyoId)
	// Post new data of own koyo
	// (POST /koyo/{koyo_id}/data)
	EachKoyoDataNew(c *gin.Context, koyoId KoyoKoyoId)
	// List of koyo's basic information
	// (GET /provider/data)
	DataList(c *gin.Context, params DataListParams)
	// Get data from the koyo
	// (GET /provider/data/{altorithm_id})
	EachDataGet(c *gin.Context, altorithmId KoyoKoyoId, params EachDataGetParams)

	// (GET /status)
	StatusGet(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ClientList operation middleware
func (siw *ServerInterfaceWrapper) ClientList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ClientListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientList(c, params)
}

// ClientCreate operation middleware
func (siw *ServerInterfaceWrapper) ClientCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientCreate(c)
}

// ClientDelete operation middleware
func (siw *ServerInterfaceWrapper) ClientDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "client_id" -------------
	var clientId ProviderClientId

	err = runtime.BindStyledParameterWithOptions("simple", "client_id", c.Param("client_id"), &clientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientDelete(c, clientId)
}

// ClientRevoke operation middleware
func (siw *ServerInterfaceWrapper) ClientRevoke(c *gin.Context) {

	var err error

	// ------------- Path parameter "client_id" -------------
	var clientId ProviderClientId

	err = runtime.BindStyledParameterWithOptions("simple", "client_id", c.Param("client_id"), &clientId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ClientRevoke(c, clientId)
}

// ExtInfoCreate operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoCreate(c)
}

// ExtInfoDelete operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "extinfo_id" -------------
	var extinfoId ExtInfoExtInfoId

	err = runtime.BindStyledParameterWithOptions("simple", "extinfo_id", c.Param("extinfo_id"), &extinfoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extinfo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoDelete(c, extinfoId)
}

// ExtInfoRevoke operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoRevoke(c *gin.Context) {

	var err error

	// ------------- Path parameter "extinfo_id" -------------
	var extinfoId ExtInfoExtInfoId

	err = runtime.BindStyledParameterWithOptions("simple", "extinfo_id", c.Param("extinfo_id"), &extinfoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extinfo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoRevoke(c, extinfoId)
}

// KoyoCreate operation middleware
func (siw *ServerInterfaceWrapper) KoyoCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.KoyoCreate(c)
}

// KoyoDelete operation middleware
func (siw *ServerInterfaceWrapper) KoyoDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "koyo_id" -------------
	var koyoId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "koyo_id", c.Param("koyo_id"), &koyoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.KoyoDelete(c, koyoId)
}

// KoyoRevoke operation middleware
func (siw *ServerInterfaceWrapper) KoyoRevoke(c *gin.Context) {

	var err error

	// ------------- Path parameter "koyo_id" -------------
	var koyoId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "koyo_id", c.Param("koyo_id"), &koyoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.KoyoRevoke(c, koyoId)
}

// ExtInfoList operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExtInfoListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoList(c, params)
}

// ExampleInfoGet operation middleware
func (siw *ServerInterfaceWrapper) ExampleInfoGet(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ExampleInfoGetParams

	// ------------- Optional query parameter "area" -------------

	err = runtime.BindQueryParameter("form", true, false, "area", c.Request.URL.Query(), &params.Area)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter area: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExampleInfoGet(c, params)
}

// ExampleInfoPost operation middleware
func (siw *ServerInterfaceWrapper) ExampleInfoPost(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExampleInfoPost(c)
}

// ExtInfoGet operation middleware
func (siw *ServerInterfaceWrapper) ExtInfoGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "extinfo_id" -------------
	var extinfoId ExtInfoExtInfoId

	err = runtime.BindStyledParameterWithOptions("simple", "extinfo_id", c.Param("extinfo_id"), &extinfoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter extinfo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExtInfoGet(c, extinfoId)
}

// KoyoList operation middleware
func (siw *ServerInterfaceWrapper) KoyoList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params KoyoListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.KoyoList(c, params)
}

// EachKoyoGet operation middleware
func (siw *ServerInterfaceWrapper) EachKoyoGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "koyo_id" -------------
	var koyoId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "koyo_id", c.Param("koyo_id"), &koyoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachKoyoGet(c, koyoId)
}

// EachKoyoUpdate operation middleware
func (siw *ServerInterfaceWrapper) EachKoyoUpdate(c *gin.Context) {

	var err error

	// ------------- Path parameter "koyo_id" -------------
	var koyoId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "koyo_id", c.Param("koyo_id"), &koyoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachKoyoUpdate(c, koyoId)
}

// EachKoyoDataNew operation middleware
func (siw *ServerInterfaceWrapper) EachKoyoDataNew(c *gin.Context) {

	var err error

	// ------------- Path parameter "koyo_id" -------------
	var koyoId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "koyo_id", c.Param("koyo_id"), &koyoId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachKoyoDataNew(c, koyoId)
}

// DataList operation middleware
func (siw *ServerInterfaceWrapper) DataList(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DataListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DataList(c, params)
}

// EachDataGet operation middleware
func (siw *ServerInterfaceWrapper) EachDataGet(c *gin.Context) {

	var err error

	// ------------- Path parameter "altorithm_id" -------------
	var altorithmId KoyoKoyoId

	err = runtime.BindStyledParameterWithOptions("simple", "altorithm_id", c.Param("altorithm_id"), &altorithmId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter altorithm_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params EachDataGetParams

	// ------------- Required query parameter "type" -------------

	if paramValue := c.Query("type"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument type is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "type", c.Request.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "koyo_data_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "koyo_data_id", c.Request.URL.Query(), &params.KoyoDataId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter koyo_data_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "area" -------------

	err = runtime.BindQueryParameter("form", true, false, "area", c.Request.URL.Query(), &params.Area)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter area: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "until" -------------

	err = runtime.BindQueryParameter("form", true, false, "until", c.Request.URL.Query(), &params.Until)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter until: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "until_entry" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_entry", c.Request.URL.Query(), &params.UntilEntry)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter until_entry: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "param" -------------

	err = runtime.BindQueryParameter("form", true, false, "param", c.Request.URL.Query(), &params.Param)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter param: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "scale" -------------

	err = runtime.BindQueryParameter("form", true, false, "scale", c.Request.URL.Query(), &params.Scale)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scale: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EachDataGet(c, altorithmId, params)
}

// StatusGet operation middleware
func (siw *ServerInterfaceWrapper) StatusGet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.StatusGet(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/admin/client", wrapper.ClientList)
	router.POST(options.BaseURL+"/admin/client", wrapper.ClientCreate)
	router.POST(options.BaseURL+"/admin/client/:client_id", wrapper.ClientDelete)
	router.POST(options.BaseURL+"/admin/client/:client_id/revoke", wrapper.ClientRevoke)
	router.POST(options.BaseURL+"/admin/extinfo", wrapper.ExtInfoCreate)
	router.DELETE(options.BaseURL+"/admin/extinfo/:extinfo_id", wrapper.ExtInfoDelete)
	router.POST(options.BaseURL+"/admin/extinfo/:extinfo_id/revoke", wrapper.ExtInfoRevoke)
	router.POST(options.BaseURL+"/admin/koyo", wrapper.KoyoCreate)
	router.DELETE(options.BaseURL+"/admin/koyo/:koyo_id", wrapper.KoyoDelete)
	router.POST(options.BaseURL+"/admin/koyo/:koyo_id/revoke", wrapper.KoyoRevoke)
	router.GET(options.BaseURL+"/extinfo", wrapper.ExtInfoList)
	router.GET(options.BaseURL+"/extinfo/example_id/data", wrapper.ExampleInfoGet)
	router.POST(options.BaseURL+"/extinfo/example_id/data", wrapper.ExampleInfoPost)
	router.GET(options.BaseURL+"/extinfo/:extinfo_id", wrapper.ExtInfoGet)
	router.GET(options.BaseURL+"/koyo", wrapper.KoyoList)
	router.GET(options.BaseURL+"/koyo/:koyo_id", wrapper.EachKoyoGet)
	router.PUT(options.BaseURL+"/koyo/:koyo_id", wrapper.EachKoyoUpdate)
	router.POST(options.BaseURL+"/koyo/:koyo_id/data", wrapper.EachKoyoDataNew)
	router.GET(options.BaseURL+"/provider/data", wrapper.DataList)
	router.GET(options.BaseURL+"/provider/data/:altorithm_id", wrapper.EachDataGet)
	router.GET(options.BaseURL+"/status", wrapper.StatusGet)
}

type ClientListRequestObject struct {
	Params ClientListParams
}

type ClientListResponseObject interface {
	VisitClientListResponse(w http.ResponseWriter) error
}

type ClientList200JSONResponse []ProviderClientData

func (response ClientList200JSONResponse) VisitClientListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientCreateRequestObject struct {
	Body *ClientCreateJSONRequestBody
}

type ClientCreateResponseObject interface {
	VisitClientCreateResponse(w http.ResponseWriter) error
}

type ClientCreate200JSONResponse ProviderClientData

func (response ClientCreate200JSONResponse) VisitClientCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientDeleteRequestObject struct {
	ClientId ProviderClientId `json:"client_id"`
}

type ClientDeleteResponseObject interface {
	VisitClientDeleteResponse(w http.ResponseWriter) error
}

type ClientDelete200JSONResponse struct {
	DeleteClientId ProviderClientId `json:"delete_client_id"`
}

func (response ClientDelete200JSONResponse) VisitClientDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ClientRevokeRequestObject struct {
	ClientId ProviderClientId `json:"client_id"`
}

type ClientRevokeResponseObject interface {
	VisitClientRevokeResponse(w http.ResponseWriter) error
}

type ClientRevoke200JSONResponse struct {
	ApiKey   TypesAuthApiKey  `json:"api_key"`
	ClientId ProviderClientId `json:"client_id"`
}

func (response ClientRevoke200JSONResponse) VisitClientRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoCreateRequestObject struct {
	Body *ExtInfoCreateJSONRequestBody
}

type ExtInfoCreateResponseObject interface {
	VisitExtInfoCreateResponse(w http.ResponseWriter) error
}

type ExtInfoCreate200JSONResponse struct {
	ApiKey              TypesAuthApiKey `json:"api_key"`
	ExternalDescription string          `json:"external_description"`

	// ExternalId This ID can be obtained through admin api.
	// It is a human friendly format like GitHub repository names.
	// Only the pattern `^[a-z_-]{1,64}$` is allowed.
	ExternalId         ExtInfoExtInfoId `json:"external_id"`
	ExternalName       string           `json:"external_name"`
	FirstEntryAt       time.Time        `json:"first_entry_at"`
	LastUpdatedAt      time.Time        `json:"last_updated_at"`
	License            string           `json:"license"`
	LicenseDescription string           `json:"license_description"`
	UpdatedHistory     []time.Time      `json:"updated_history"`
}

func (response ExtInfoCreate200JSONResponse) VisitExtInfoCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoDeleteRequestObject struct {
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

type ExtInfoDeleteResponseObject interface {
	VisitExtInfoDeleteResponse(w http.ResponseWriter) error
}

type ExtInfoDelete200JSONResponse struct {
	DeleteExtinfoId ExtInfoExtInfoId `json:"delete_extinfo_id"`
}

func (response ExtInfoDelete200JSONResponse) VisitExtInfoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoRevokeRequestObject struct {
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

type ExtInfoRevokeResponseObject interface {
	VisitExtInfoRevokeResponse(w http.ResponseWriter) error
}

type ExtInfoRevoke200JSONResponse struct {
	ApiKey    TypesAuthApiKey  `json:"api_key"`
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

func (response ExtInfoRevoke200JSONResponse) VisitExtInfoRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type KoyoCreateRequestObject struct {
	Body *KoyoCreateJSONRequestBody
}

type KoyoCreateResponseObject interface {
	VisitKoyoCreateResponse(w http.ResponseWriter) error
}

type KoyoCreate200JSONResponse struct {
	ApiKey TypesAuthApiKey `json:"api_key"`

	// ExtLicenses Licenses for primary information and other information used by the koyo.
	ExtLicenses     []string         `json:"ext_licenses"`
	FirstEntryAt    time.Time        `json:"first_entry_at"`
	KoyoDataIds     []KoyoKoyoDataId `json:"koyo_data_ids"`
	KoyoDescription string           `json:"koyo_description"`

	// KoyoId This ID can be obtained through admin api.
	// It is a human friendly format like GitHub repository names.
	// Only the pattern `^[a-z_-]{1,64}$` is allowed.
	KoyoId   KoyoKoyoId `json:"koyo_id"`
	KoyoName string     `json:"koyo_name"`

	// KoyoParams Koyo parameters. The key is the parameter name and the value is the default value.
	KoyoParams map[string]string `json:"koyo_params"`

	// KoyoScales Koyo scales is resolution (e.g. one data per meter). Returns a list of supported scales.
	KoyoScales    []KoyoKoyoScale    `json:"koyo_scales"`
	LastEntryAt   time.Time          `json:"last_entry_at"`
	LastUpdatedAt time.Time          `json:"last_updated_at"`
	License       string             `json:"license"`
	NeedExternal  []ExtInfoExtInfoId `json:"need_external"`
	Version       TypesCommonVersion `json:"version"`
}

func (response KoyoCreate200JSONResponse) VisitKoyoCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type KoyoDeleteRequestObject struct {
	KoyoId KoyoKoyoId `json:"koyo_id"`
}

type KoyoDeleteResponseObject interface {
	VisitKoyoDeleteResponse(w http.ResponseWriter) error
}

type KoyoDelete200JSONResponse struct {
	DeleteKoyoId KoyoKoyoId `json:"delete_koyo_id"`
}

func (response KoyoDelete200JSONResponse) VisitKoyoDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type KoyoRevokeRequestObject struct {
	KoyoId KoyoKoyoId `json:"koyo_id"`
}

type KoyoRevokeResponseObject interface {
	VisitKoyoRevokeResponse(w http.ResponseWriter) error
}

type KoyoRevoke200JSONResponse struct {
	ApiKey TypesAuthApiKey `json:"api_key"`
	KoyoId KoyoKoyoId      `json:"koyo_id"`
}

func (response KoyoRevoke200JSONResponse) VisitKoyoRevokeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtInfoListRequestObject struct {
	Params ExtInfoListParams
}

type ExtInfoListResponseObject interface {
	VisitExtInfoListResponse(w http.ResponseWriter) error
}

type ExtInfoList200JSONResponse []ExtInfoExternalInfomation

func (response ExtInfoList200JSONResponse) VisitExtInfoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExampleInfoGetRequestObject struct {
	Params ExampleInfoGetParams
}

type ExampleInfoGetResponseObject interface {
	VisitExampleInfoGetResponse(w http.ResponseWriter) error
}

type ExampleInfoGet200JSONResponse []struct {
	ContentType ExampleInfoGet200JSONResponseContentType `json:"contentType"`
	Data        ExtInfoExampleInfoExampleData            `json:"data"`
}

func (response ExampleInfoGet200JSONResponse) VisitExampleInfoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExampleInfoPostRequestObject struct {
	Body *ExampleInfoPostJSONRequestBody
}

type ExampleInfoPostResponseObject interface {
	VisitExampleInfoPostResponse(w http.ResponseWriter) error
}

type ExampleInfoPost204Response struct {
}

func (response ExampleInfoPost204Response) VisitExampleInfoPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ExtInfoGetRequestObject struct {
	ExtinfoId ExtInfoExtInfoId `json:"extinfo_id"`
}

type ExtInfoGetResponseObject interface {
	VisitExtInfoGetResponse(w http.ResponseWriter) error
}

type ExtInfoGet200JSONResponse ExtInfoExternalInfomation

func (response ExtInfoGet200JSONResponse) VisitExtInfoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type KoyoListRequestObject struct {
	Params KoyoListParams
}

type KoyoListResponseObject interface {
	VisitKoyoListResponse(w http.ResponseWriter) error
}

type KoyoList200JSONResponse []KoyoKoyoInfomation

func (response KoyoList200JSONResponse) VisitKoyoListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachKoyoGetRequestObject struct {
	KoyoId KoyoKoyoId `json:"koyo_id"`
}

type EachKoyoGetResponseObject interface {
	VisitEachKoyoGetResponse(w http.ResponseWriter) error
}

type EachKoyoGet200JSONResponse KoyoKoyoInfomation

func (response EachKoyoGet200JSONResponse) VisitEachKoyoGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachKoyoUpdateRequestObject struct {
	KoyoId KoyoKoyoId `json:"koyo_id"`
	Body   *EachKoyoUpdateJSONRequestBody
}

type EachKoyoUpdateResponseObject interface {
	VisitEachKoyoUpdateResponse(w http.ResponseWriter) error
}

type EachKoyoUpdate200JSONResponse KoyoKoyoInfomation

func (response EachKoyoUpdate200JSONResponse) VisitEachKoyoUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachKoyoDataNewRequestObject struct {
	KoyoId KoyoKoyoId `json:"koyo_id"`
	Body   *EachKoyoDataNewJSONRequestBody
}

type EachKoyoDataNewResponseObject interface {
	VisitEachKoyoDataNewResponse(w http.ResponseWriter) error
}

type EachKoyoDataNew200JSONResponse KoyoKoyoData

func (response EachKoyoDataNew200JSONResponse) VisitEachKoyoDataNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DataListRequestObject struct {
	Params DataListParams
}

type DataListResponseObject interface {
	VisitDataListResponse(w http.ResponseWriter) error
}

type DataList200JSONResponse []KoyoKoyoInfomation

func (response DataList200JSONResponse) VisitDataListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type EachDataGetRequestObject struct {
	AltorithmId KoyoKoyoId `json:"altorithm_id"`
	Params      EachDataGetParams
}

type EachDataGetResponseObject interface {
	VisitEachDataGetResponse(w http.ResponseWriter) error
}

type EachDataGet200JSONResponse KoyoKoyoData

func (response EachDataGet200JSONResponse) VisitEachDataGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusGetRequestObject struct {
}

type StatusGetResponseObject interface {
	VisitStatusGetResponse(w http.ResponseWriter) error
}

type StatusGet200JSONResponse string

func (response StatusGet200JSONResponse) VisitStatusGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StatusGet500JSONResponse string

func (response StatusGet500JSONResponse) VisitStatusGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /admin/client)
	ClientList(ctx context.Context, request ClientListRequestObject) (ClientListResponseObject, error)

	// (POST /admin/client)
	ClientCreate(ctx context.Context, request ClientCreateRequestObject) (ClientCreateResponseObject, error)

	// (POST /admin/client/{client_id})
	ClientDelete(ctx context.Context, request ClientDeleteRequestObject) (ClientDeleteResponseObject, error)

	// (POST /admin/client/{client_id}/revoke)
	ClientRevoke(ctx context.Context, request ClientRevokeRequestObject) (ClientRevokeResponseObject, error)

	// (POST /admin/extinfo)
	ExtInfoCreate(ctx context.Context, request ExtInfoCreateRequestObject) (ExtInfoCreateResponseObject, error)

	// (DELETE /admin/extinfo/{extinfo_id})
	ExtInfoDelete(ctx context.Context, request ExtInfoDeleteRequestObject) (ExtInfoDeleteResponseObject, error)

	// (POST /admin/extinfo/{extinfo_id}/revoke)
	ExtInfoRevoke(ctx context.Context, request ExtInfoRevokeRequestObject) (ExtInfoRevokeResponseObject, error)
	// Create new koyo information
	// (POST /admin/koyo)
	KoyoCreate(ctx context.Context, request KoyoCreateRequestObject) (KoyoCreateResponseObject, error)
	// Delete koyo information
	// (DELETE /admin/koyo/{koyo_id})
	KoyoDelete(ctx context.Context, request KoyoDeleteRequestObject) (KoyoDeleteResponseObject, error)
	// Revoke koyo api key
	// (POST /admin/koyo/{koyo_id}/revoke)
	KoyoRevoke(ctx context.Context, request KoyoRevokeRequestObject) (KoyoRevokeResponseObject, error)

	// (GET /extinfo)
	ExtInfoList(ctx context.Context, request ExtInfoListRequestObject) (ExtInfoListResponseObject, error)
	// Get example data endpoint
	// (GET /extinfo/example_id/data)
	ExampleInfoGet(ctx context.Context, request ExampleInfoGetRequestObject) (ExampleInfoGetResponseObject, error)
	// Post example data endpoint
	// (POST /extinfo/example_id/data)
	ExampleInfoPost(ctx context.Context, request ExampleInfoPostRequestObject) (ExampleInfoPostResponseObject, error)

	// (GET /extinfo/{extinfo_id})
	ExtInfoGet(ctx context.Context, request ExtInfoGetRequestObject) (ExtInfoGetResponseObject, error)
	// Get a list of koyos' basic information
	// (GET /koyo)
	KoyoList(ctx context.Context, request KoyoListRequestObject) (KoyoListResponseObject, error)
	// Get koyos' basic information
	// (GET /koyo/{koyo_id})
	EachKoyoGet(ctx context.Context, request EachKoyoGetRequestObject) (EachKoyoGetResponseObject, error)
	// Update information on own koyo
	// (PUT /koyo/{koyo_id})
	EachKoyoUpdate(ctx context.Context, request EachKoyoUpdateRequestObject) (EachKoyoUpdateResponseObject, error)
	// Post new data of own koyo
	// (POST /koyo/{koyo_id}/data)
	EachKoyoDataNew(ctx context.Context, request EachKoyoDataNewRequestObject) (EachKoyoDataNewResponseObject, error)
	// List of koyo's basic information
	// (GET /provider/data)
	DataList(ctx context.Context, request DataListRequestObject) (DataListResponseObject, error)
	// Get data from the koyo
	// (GET /provider/data/{altorithm_id})
	EachDataGet(ctx context.Context, request EachDataGetRequestObject) (EachDataGetResponseObject, error)

	// (GET /status)
	StatusGet(ctx context.Context, request StatusGetRequestObject) (StatusGetResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ClientList operation middleware
func (sh *strictHandler) ClientList(ctx *gin.Context, params ClientListParams) {
	var request ClientListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientList(ctx, request.(ClientListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientListResponseObject); ok {
		if err := validResponse.VisitClientListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientCreate operation middleware
func (sh *strictHandler) ClientCreate(ctx *gin.Context) {
	var request ClientCreateRequestObject

	var body ClientCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientCreate(ctx, request.(ClientCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientCreateResponseObject); ok {
		if err := validResponse.VisitClientCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientDelete operation middleware
func (sh *strictHandler) ClientDelete(ctx *gin.Context, clientId ProviderClientId) {
	var request ClientDeleteRequestObject

	request.ClientId = clientId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientDelete(ctx, request.(ClientDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientDeleteResponseObject); ok {
		if err := validResponse.VisitClientDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClientRevoke operation middleware
func (sh *strictHandler) ClientRevoke(ctx *gin.Context, clientId ProviderClientId) {
	var request ClientRevokeRequestObject

	request.ClientId = clientId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ClientRevoke(ctx, request.(ClientRevokeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClientRevoke")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ClientRevokeResponseObject); ok {
		if err := validResponse.VisitClientRevokeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoCreate operation middleware
func (sh *strictHandler) ExtInfoCreate(ctx *gin.Context) {
	var request ExtInfoCreateRequestObject

	var body ExtInfoCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoCreate(ctx, request.(ExtInfoCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoCreateResponseObject); ok {
		if err := validResponse.VisitExtInfoCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoDelete operation middleware
func (sh *strictHandler) ExtInfoDelete(ctx *gin.Context, extinfoId ExtInfoExtInfoId) {
	var request ExtInfoDeleteRequestObject

	request.ExtinfoId = extinfoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoDelete(ctx, request.(ExtInfoDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoDeleteResponseObject); ok {
		if err := validResponse.VisitExtInfoDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoRevoke operation middleware
func (sh *strictHandler) ExtInfoRevoke(ctx *gin.Context, extinfoId ExtInfoExtInfoId) {
	var request ExtInfoRevokeRequestObject

	request.ExtinfoId = extinfoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoRevoke(ctx, request.(ExtInfoRevokeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoRevoke")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoRevokeResponseObject); ok {
		if err := validResponse.VisitExtInfoRevokeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// KoyoCreate operation middleware
func (sh *strictHandler) KoyoCreate(ctx *gin.Context) {
	var request KoyoCreateRequestObject

	var body KoyoCreateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.KoyoCreate(ctx, request.(KoyoCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "KoyoCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(KoyoCreateResponseObject); ok {
		if err := validResponse.VisitKoyoCreateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// KoyoDelete operation middleware
func (sh *strictHandler) KoyoDelete(ctx *gin.Context, koyoId KoyoKoyoId) {
	var request KoyoDeleteRequestObject

	request.KoyoId = koyoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.KoyoDelete(ctx, request.(KoyoDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "KoyoDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(KoyoDeleteResponseObject); ok {
		if err := validResponse.VisitKoyoDeleteResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// KoyoRevoke operation middleware
func (sh *strictHandler) KoyoRevoke(ctx *gin.Context, koyoId KoyoKoyoId) {
	var request KoyoRevokeRequestObject

	request.KoyoId = koyoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.KoyoRevoke(ctx, request.(KoyoRevokeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "KoyoRevoke")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(KoyoRevokeResponseObject); ok {
		if err := validResponse.VisitKoyoRevokeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoList operation middleware
func (sh *strictHandler) ExtInfoList(ctx *gin.Context, params ExtInfoListParams) {
	var request ExtInfoListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoList(ctx, request.(ExtInfoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoListResponseObject); ok {
		if err := validResponse.VisitExtInfoListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExampleInfoGet operation middleware
func (sh *strictHandler) ExampleInfoGet(ctx *gin.Context, params ExampleInfoGetParams) {
	var request ExampleInfoGetRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExampleInfoGet(ctx, request.(ExampleInfoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExampleInfoGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExampleInfoGetResponseObject); ok {
		if err := validResponse.VisitExampleInfoGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExampleInfoPost operation middleware
func (sh *strictHandler) ExampleInfoPost(ctx *gin.Context) {
	var request ExampleInfoPostRequestObject

	var body ExampleInfoPostJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExampleInfoPost(ctx, request.(ExampleInfoPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExampleInfoPost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExampleInfoPostResponseObject); ok {
		if err := validResponse.VisitExampleInfoPostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExtInfoGet operation middleware
func (sh *strictHandler) ExtInfoGet(ctx *gin.Context, extinfoId ExtInfoExtInfoId) {
	var request ExtInfoGetRequestObject

	request.ExtinfoId = extinfoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtInfoGet(ctx, request.(ExtInfoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtInfoGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExtInfoGetResponseObject); ok {
		if err := validResponse.VisitExtInfoGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// KoyoList operation middleware
func (sh *strictHandler) KoyoList(ctx *gin.Context, params KoyoListParams) {
	var request KoyoListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.KoyoList(ctx, request.(KoyoListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "KoyoList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(KoyoListResponseObject); ok {
		if err := validResponse.VisitKoyoListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachKoyoGet operation middleware
func (sh *strictHandler) EachKoyoGet(ctx *gin.Context, koyoId KoyoKoyoId) {
	var request EachKoyoGetRequestObject

	request.KoyoId = koyoId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachKoyoGet(ctx, request.(EachKoyoGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachKoyoGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachKoyoGetResponseObject); ok {
		if err := validResponse.VisitEachKoyoGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachKoyoUpdate operation middleware
func (sh *strictHandler) EachKoyoUpdate(ctx *gin.Context, koyoId KoyoKoyoId) {
	var request EachKoyoUpdateRequestObject

	request.KoyoId = koyoId

	var body EachKoyoUpdateJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachKoyoUpdate(ctx, request.(EachKoyoUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachKoyoUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachKoyoUpdateResponseObject); ok {
		if err := validResponse.VisitEachKoyoUpdateResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachKoyoDataNew operation middleware
func (sh *strictHandler) EachKoyoDataNew(ctx *gin.Context, koyoId KoyoKoyoId) {
	var request EachKoyoDataNewRequestObject

	request.KoyoId = koyoId

	var body EachKoyoDataNewJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachKoyoDataNew(ctx, request.(EachKoyoDataNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachKoyoDataNew")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachKoyoDataNewResponseObject); ok {
		if err := validResponse.VisitEachKoyoDataNewResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DataList operation middleware
func (sh *strictHandler) DataList(ctx *gin.Context, params DataListParams) {
	var request DataListRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DataList(ctx, request.(DataListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DataList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DataListResponseObject); ok {
		if err := validResponse.VisitDataListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// EachDataGet operation middleware
func (sh *strictHandler) EachDataGet(ctx *gin.Context, altorithmId KoyoKoyoId, params EachDataGetParams) {
	var request EachDataGetRequestObject

	request.AltorithmId = altorithmId
	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.EachDataGet(ctx, request.(EachDataGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EachDataGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(EachDataGetResponseObject); ok {
		if err := validResponse.VisitEachDataGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// StatusGet operation middleware
func (sh *strictHandler) StatusGet(ctx *gin.Context) {
	var request StatusGetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StatusGet(ctx, request.(StatusGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StatusGet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(StatusGetResponseObject); ok {
		if err := validResponse.VisitStatusGetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

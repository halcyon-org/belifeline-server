// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// ExternalInformation is the model entity for the ExternalInformation schema.
type ExternalInformation struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// License holds the value of the "license" field.
	License string `json:"license,omitempty"`
	// LicenseDescription holds the value of the "license_description" field.
	LicenseDescription string `json:"license_description,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// FirstEntryAt holds the value of the "first_entry_at" field.
	FirstEntryAt time.Time `json:"first_entry_at,omitempty"`
	// LastUpdatedAt holds the value of the "last_updated_at" field.
	LastUpdatedAt              time.Time `json:"last_updated_at,omitempty"`
	koyo_information_externals *pulid.ID
	selectValues               sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ExternalInformation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case externalinformation.FieldID:
			values[i] = new(pulid.ID)
		case externalinformation.FieldName, externalinformation.FieldDescription, externalinformation.FieldLicense, externalinformation.FieldLicenseDescription, externalinformation.FieldAPIKey:
			values[i] = new(sql.NullString)
		case externalinformation.FieldFirstEntryAt, externalinformation.FieldLastUpdatedAt:
			values[i] = new(sql.NullTime)
		case externalinformation.ForeignKeys[0]: // koyo_information_externals
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ExternalInformation fields.
func (ei *ExternalInformation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case externalinformation.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ei.ID = *value
			}
		case externalinformation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ei.Name = value.String
			}
		case externalinformation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ei.Description = value.String
			}
		case externalinformation.FieldLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license", values[i])
			} else if value.Valid {
				ei.License = value.String
			}
		case externalinformation.FieldLicenseDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license_description", values[i])
			} else if value.Valid {
				ei.LicenseDescription = value.String
			}
		case externalinformation.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				ei.APIKey = value.String
			}
		case externalinformation.FieldFirstEntryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_entry_at", values[i])
			} else if value.Valid {
				ei.FirstEntryAt = value.Time
			}
		case externalinformation.FieldLastUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_at", values[i])
			} else if value.Valid {
				ei.LastUpdatedAt = value.Time
			}
		case externalinformation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field koyo_information_externals", values[i])
			} else if value.Valid {
				ei.koyo_information_externals = new(pulid.ID)
				*ei.koyo_information_externals = *value.S.(*pulid.ID)
			}
		default:
			ei.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ExternalInformation.
// This includes values selected through modifiers, order, etc.
func (ei *ExternalInformation) Value(name string) (ent.Value, error) {
	return ei.selectValues.Get(name)
}

// Update returns a builder for updating this ExternalInformation.
// Note that you need to call ExternalInformation.Unwrap() before calling this method if this ExternalInformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ei *ExternalInformation) Update() *ExternalInformationUpdateOne {
	return NewExternalInformationClient(ei.config).UpdateOne(ei)
}

// Unwrap unwraps the ExternalInformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ei *ExternalInformation) Unwrap() *ExternalInformation {
	_tx, ok := ei.config.driver.(*txDriver)
	if !ok {
		panic("ent: ExternalInformation is not a transactional entity")
	}
	ei.config.driver = _tx.drv
	return ei
}

// String implements the fmt.Stringer.
func (ei *ExternalInformation) String() string {
	var builder strings.Builder
	builder.WriteString("ExternalInformation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ei.ID))
	builder.WriteString("name=")
	builder.WriteString(ei.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ei.Description)
	builder.WriteString(", ")
	builder.WriteString("license=")
	builder.WriteString(ei.License)
	builder.WriteString(", ")
	builder.WriteString("license_description=")
	builder.WriteString(ei.LicenseDescription)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(ei.APIKey)
	builder.WriteString(", ")
	builder.WriteString("first_entry_at=")
	builder.WriteString(ei.FirstEntryAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_updated_at=")
	builder.WriteString(ei.LastUpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ExternalInformations is a parsable slice of ExternalInformation.
type ExternalInformations []*ExternalInformation

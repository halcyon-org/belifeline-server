// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/adminuser"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// AdminUser is the model entity for the AdminUser schema.
type AdminUser struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt time.Time `json:"last_used_at,omitempty"`
	// LastUpdatedAt holds the value of the "last_updated_at" field.
	LastUpdatedAt time.Time `json:"last_updated_at,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AdminUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adminuser.FieldID:
			values[i] = new(pulid.ID)
		case adminuser.FieldName, adminuser.FieldAPIKey:
			values[i] = new(sql.NullString)
		case adminuser.FieldCreatedAt, adminuser.FieldLastUsedAt, adminuser.FieldLastUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AdminUser fields.
func (au *AdminUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adminuser.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				au.ID = *value
			}
		case adminuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				au.Name = value.String
			}
		case adminuser.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				au.APIKey = value.String
			}
		case adminuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = value.Time
			}
		case adminuser.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				au.LastUsedAt = value.Time
			}
		case adminuser.FieldLastUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_at", values[i])
			} else if value.Valid {
				au.LastUpdatedAt = value.Time
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AdminUser.
// This includes values selected through modifiers, order, etc.
func (au *AdminUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// Update returns a builder for updating this AdminUser.
// Note that you need to call AdminUser.Unwrap() before calling this method if this AdminUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AdminUser) Update() *AdminUserUpdateOne {
	return NewAdminUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AdminUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AdminUser) Unwrap() *AdminUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AdminUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AdminUser) String() string {
	var builder strings.Builder
	builder.WriteString("AdminUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("name=")
	builder.WriteString(au.Name)
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(au.APIKey)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(au.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_used_at=")
	builder.WriteString(au.LastUsedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_updated_at=")
	builder.WriteString(au.LastUpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AdminUsers is a parsable slice of AdminUser.
type AdminUsers []*AdminUser

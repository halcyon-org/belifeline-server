// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/koyoinformation"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// KoyoInformation is the model entity for the KoyoInformation schema.
type KoyoInformation struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Params holds the value of the "params" field.
	Params map[string]string `json:"params,omitempty"`
	// Scales holds the value of the "scales" field.
	Scales []float64 `json:"scales,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// License holds the value of the "license" field.
	License string `json:"license,omitempty"`
	// DataType holds the value of the "data_type" field.
	DataType koyoinformation.DataType `json:"data_type,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// FirstEntryAt holds the value of the "first_entry_at" field.
	FirstEntryAt time.Time `json:"first_entry_at,omitempty"`
	// LastEntryAt holds the value of the "last_entry_at" field.
	LastEntryAt time.Time `json:"last_entry_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KoyoInformationQuery when eager-loading is set.
	Edges        KoyoInformationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// KoyoInformationEdges holds the relations/edges for other nodes in the graph.
type KoyoInformationEdges struct {
	// Externals holds the value of the externals edge.
	Externals []*ExternalInformation `json:"externals,omitempty"`
	// Data holds the value of the data edge.
	Data []*KoyoData `json:"data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExternalsOrErr returns the Externals value or an error if the edge
// was not loaded in eager-loading.
func (e KoyoInformationEdges) ExternalsOrErr() ([]*ExternalInformation, error) {
	if e.loadedTypes[0] {
		return e.Externals, nil
	}
	return nil, &NotLoadedError{edge: "externals"}
}

// DataOrErr returns the Data value or an error if the edge
// was not loaded in eager-loading.
func (e KoyoInformationEdges) DataOrErr() ([]*KoyoData, error) {
	if e.loadedTypes[1] {
		return e.Data, nil
	}
	return nil, &NotLoadedError{edge: "data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*KoyoInformation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case koyoinformation.FieldParams, koyoinformation.FieldScales:
			values[i] = new([]byte)
		case koyoinformation.FieldID:
			values[i] = new(pulid.ID)
		case koyoinformation.FieldName, koyoinformation.FieldDescription, koyoinformation.FieldVersion, koyoinformation.FieldLicense, koyoinformation.FieldDataType, koyoinformation.FieldAPIKey:
			values[i] = new(sql.NullString)
		case koyoinformation.FieldFirstEntryAt, koyoinformation.FieldLastEntryAt, koyoinformation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the KoyoInformation fields.
func (ki *KoyoInformation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case koyoinformation.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ki.ID = *value
			}
		case koyoinformation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ki.Name = value.String
			}
		case koyoinformation.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ki.Description = value.String
			}
		case koyoinformation.FieldParams:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field params", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ki.Params); err != nil {
					return fmt.Errorf("unmarshal field params: %w", err)
				}
			}
		case koyoinformation.FieldScales:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scales", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ki.Scales); err != nil {
					return fmt.Errorf("unmarshal field scales: %w", err)
				}
			}
		case koyoinformation.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				ki.Version = value.String
			}
		case koyoinformation.FieldLicense:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field license", values[i])
			} else if value.Valid {
				ki.License = value.String
			}
		case koyoinformation.FieldDataType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field data_type", values[i])
			} else if value.Valid {
				ki.DataType = koyoinformation.DataType(value.String)
			}
		case koyoinformation.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				ki.APIKey = value.String
			}
		case koyoinformation.FieldFirstEntryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_entry_at", values[i])
			} else if value.Valid {
				ki.FirstEntryAt = value.Time
			}
		case koyoinformation.FieldLastEntryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_entry_at", values[i])
			} else if value.Valid {
				ki.LastEntryAt = value.Time
			}
		case koyoinformation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ki.UpdatedAt = value.Time
			}
		default:
			ki.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the KoyoInformation.
// This includes values selected through modifiers, order, etc.
func (ki *KoyoInformation) Value(name string) (ent.Value, error) {
	return ki.selectValues.Get(name)
}

// QueryExternals queries the "externals" edge of the KoyoInformation entity.
func (ki *KoyoInformation) QueryExternals() *ExternalInformationQuery {
	return NewKoyoInformationClient(ki.config).QueryExternals(ki)
}

// QueryData queries the "data" edge of the KoyoInformation entity.
func (ki *KoyoInformation) QueryData() *KoyoDataQuery {
	return NewKoyoInformationClient(ki.config).QueryData(ki)
}

// Update returns a builder for updating this KoyoInformation.
// Note that you need to call KoyoInformation.Unwrap() before calling this method if this KoyoInformation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ki *KoyoInformation) Update() *KoyoInformationUpdateOne {
	return NewKoyoInformationClient(ki.config).UpdateOne(ki)
}

// Unwrap unwraps the KoyoInformation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ki *KoyoInformation) Unwrap() *KoyoInformation {
	_tx, ok := ki.config.driver.(*txDriver)
	if !ok {
		panic("ent: KoyoInformation is not a transactional entity")
	}
	ki.config.driver = _tx.drv
	return ki
}

// String implements the fmt.Stringer.
func (ki *KoyoInformation) String() string {
	var builder strings.Builder
	builder.WriteString("KoyoInformation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ki.ID))
	builder.WriteString("name=")
	builder.WriteString(ki.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ki.Description)
	builder.WriteString(", ")
	builder.WriteString("params=")
	builder.WriteString(fmt.Sprintf("%v", ki.Params))
	builder.WriteString(", ")
	builder.WriteString("scales=")
	builder.WriteString(fmt.Sprintf("%v", ki.Scales))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(ki.Version)
	builder.WriteString(", ")
	builder.WriteString("license=")
	builder.WriteString(ki.License)
	builder.WriteString(", ")
	builder.WriteString("data_type=")
	builder.WriteString(fmt.Sprintf("%v", ki.DataType))
	builder.WriteString(", ")
	builder.WriteString("api_key=")
	builder.WriteString(ki.APIKey)
	builder.WriteString(", ")
	builder.WriteString("first_entry_at=")
	builder.WriteString(ki.FirstEntryAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_entry_at=")
	builder.WriteString(ki.LastEntryAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ki.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// KoyoInformations is a parsable slice of KoyoInformation.
type KoyoInformations []*KoyoInformation

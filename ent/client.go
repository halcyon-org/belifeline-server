// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/halcyon-org/kizuna/ent/migrate"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/halcyon-org/kizuna/ent/adminuser"
	"github.com/halcyon-org/kizuna/ent/clientdata"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/koyodata"
	"github.com/halcyon-org/kizuna/ent/koyoinformation"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdminUser is the client for interacting with the AdminUser builders.
	AdminUser *AdminUserClient
	// ClientData is the client for interacting with the ClientData builders.
	ClientData *ClientDataClient
	// ExternalInformation is the client for interacting with the ExternalInformation builders.
	ExternalInformation *ExternalInformationClient
	// KoyoData is the client for interacting with the KoyoData builders.
	KoyoData *KoyoDataClient
	// KoyoInformation is the client for interacting with the KoyoInformation builders.
	KoyoInformation *KoyoInformationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdminUser = NewAdminUserClient(c.config)
	c.ClientData = NewClientDataClient(c.config)
	c.ExternalInformation = NewExternalInformationClient(c.config)
	c.KoyoData = NewKoyoDataClient(c.config)
	c.KoyoInformation = NewKoyoInformationClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AdminUser:           NewAdminUserClient(cfg),
		ClientData:          NewClientDataClient(cfg),
		ExternalInformation: NewExternalInformationClient(cfg),
		KoyoData:            NewKoyoDataClient(cfg),
		KoyoInformation:     NewKoyoInformationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		AdminUser:           NewAdminUserClient(cfg),
		ClientData:          NewClientDataClient(cfg),
		ExternalInformation: NewExternalInformationClient(cfg),
		KoyoData:            NewKoyoDataClient(cfg),
		KoyoInformation:     NewKoyoInformationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdminUser.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AdminUser.Use(hooks...)
	c.ClientData.Use(hooks...)
	c.ExternalInformation.Use(hooks...)
	c.KoyoData.Use(hooks...)
	c.KoyoInformation.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AdminUser.Intercept(interceptors...)
	c.ClientData.Intercept(interceptors...)
	c.ExternalInformation.Intercept(interceptors...)
	c.KoyoData.Intercept(interceptors...)
	c.KoyoInformation.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdminUserMutation:
		return c.AdminUser.mutate(ctx, m)
	case *ClientDataMutation:
		return c.ClientData.mutate(ctx, m)
	case *ExternalInformationMutation:
		return c.ExternalInformation.mutate(ctx, m)
	case *KoyoDataMutation:
		return c.KoyoData.mutate(ctx, m)
	case *KoyoInformationMutation:
		return c.KoyoInformation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdminUserClient is a client for the AdminUser schema.
type AdminUserClient struct {
	config
}

// NewAdminUserClient returns a client for the AdminUser from the given config.
func NewAdminUserClient(c config) *AdminUserClient {
	return &AdminUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `adminuser.Hooks(f(g(h())))`.
func (c *AdminUserClient) Use(hooks ...Hook) {
	c.hooks.AdminUser = append(c.hooks.AdminUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `adminuser.Intercept(f(g(h())))`.
func (c *AdminUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdminUser = append(c.inters.AdminUser, interceptors...)
}

// Create returns a builder for creating a AdminUser entity.
func (c *AdminUserClient) Create() *AdminUserCreate {
	mutation := newAdminUserMutation(c.config, OpCreate)
	return &AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdminUser entities.
func (c *AdminUserClient) CreateBulk(builders ...*AdminUserCreate) *AdminUserCreateBulk {
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AdminUserClient) MapCreateBulk(slice any, setFunc func(*AdminUserCreate, int)) *AdminUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AdminUserCreateBulk{err: fmt.Errorf("calling to AdminUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AdminUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AdminUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdminUser.
func (c *AdminUserClient) Update() *AdminUserUpdate {
	mutation := newAdminUserMutation(c.config, OpUpdate)
	return &AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdminUserClient) UpdateOne(au *AdminUser) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUser(au))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdminUserClient) UpdateOneID(id pulid.ID) *AdminUserUpdateOne {
	mutation := newAdminUserMutation(c.config, OpUpdateOne, withAdminUserID(id))
	return &AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdminUser.
func (c *AdminUserClient) Delete() *AdminUserDelete {
	mutation := newAdminUserMutation(c.config, OpDelete)
	return &AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdminUserClient) DeleteOne(au *AdminUser) *AdminUserDeleteOne {
	return c.DeleteOneID(au.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdminUserClient) DeleteOneID(id pulid.ID) *AdminUserDeleteOne {
	builder := c.Delete().Where(adminuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdminUserDeleteOne{builder}
}

// Query returns a query builder for AdminUser.
func (c *AdminUserClient) Query() *AdminUserQuery {
	return &AdminUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdminUser},
		inters: c.Interceptors(),
	}
}

// Get returns a AdminUser entity by its id.
func (c *AdminUserClient) Get(ctx context.Context, id pulid.ID) (*AdminUser, error) {
	return c.Query().Where(adminuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdminUserClient) GetX(ctx context.Context, id pulid.ID) *AdminUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AdminUserClient) Hooks() []Hook {
	return c.hooks.AdminUser
}

// Interceptors returns the client interceptors.
func (c *AdminUserClient) Interceptors() []Interceptor {
	return c.inters.AdminUser
}

func (c *AdminUserClient) mutate(ctx context.Context, m *AdminUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdminUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdminUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdminUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdminUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdminUser mutation op: %q", m.Op())
	}
}

// ClientDataClient is a client for the ClientData schema.
type ClientDataClient struct {
	config
}

// NewClientDataClient returns a client for the ClientData from the given config.
func NewClientDataClient(c config) *ClientDataClient {
	return &ClientDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `clientdata.Hooks(f(g(h())))`.
func (c *ClientDataClient) Use(hooks ...Hook) {
	c.hooks.ClientData = append(c.hooks.ClientData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `clientdata.Intercept(f(g(h())))`.
func (c *ClientDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.ClientData = append(c.inters.ClientData, interceptors...)
}

// Create returns a builder for creating a ClientData entity.
func (c *ClientDataClient) Create() *ClientDataCreate {
	mutation := newClientDataMutation(c.config, OpCreate)
	return &ClientDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ClientData entities.
func (c *ClientDataClient) CreateBulk(builders ...*ClientDataCreate) *ClientDataCreateBulk {
	return &ClientDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ClientDataClient) MapCreateBulk(slice any, setFunc func(*ClientDataCreate, int)) *ClientDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ClientDataCreateBulk{err: fmt.Errorf("calling to ClientDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ClientDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ClientDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ClientData.
func (c *ClientDataClient) Update() *ClientDataUpdate {
	mutation := newClientDataMutation(c.config, OpUpdate)
	return &ClientDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ClientDataClient) UpdateOne(cd *ClientData) *ClientDataUpdateOne {
	mutation := newClientDataMutation(c.config, OpUpdateOne, withClientData(cd))
	return &ClientDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ClientDataClient) UpdateOneID(id pulid.ID) *ClientDataUpdateOne {
	mutation := newClientDataMutation(c.config, OpUpdateOne, withClientDataID(id))
	return &ClientDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ClientData.
func (c *ClientDataClient) Delete() *ClientDataDelete {
	mutation := newClientDataMutation(c.config, OpDelete)
	return &ClientDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ClientDataClient) DeleteOne(cd *ClientData) *ClientDataDeleteOne {
	return c.DeleteOneID(cd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ClientDataClient) DeleteOneID(id pulid.ID) *ClientDataDeleteOne {
	builder := c.Delete().Where(clientdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ClientDataDeleteOne{builder}
}

// Query returns a query builder for ClientData.
func (c *ClientDataClient) Query() *ClientDataQuery {
	return &ClientDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeClientData},
		inters: c.Interceptors(),
	}
}

// Get returns a ClientData entity by its id.
func (c *ClientDataClient) Get(ctx context.Context, id pulid.ID) (*ClientData, error) {
	return c.Query().Where(clientdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ClientDataClient) GetX(ctx context.Context, id pulid.ID) *ClientData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ClientDataClient) Hooks() []Hook {
	return c.hooks.ClientData
}

// Interceptors returns the client interceptors.
func (c *ClientDataClient) Interceptors() []Interceptor {
	return c.inters.ClientData
}

func (c *ClientDataClient) mutate(ctx context.Context, m *ClientDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ClientDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ClientDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ClientDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ClientDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ClientData mutation op: %q", m.Op())
	}
}

// ExternalInformationClient is a client for the ExternalInformation schema.
type ExternalInformationClient struct {
	config
}

// NewExternalInformationClient returns a client for the ExternalInformation from the given config.
func NewExternalInformationClient(c config) *ExternalInformationClient {
	return &ExternalInformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `externalinformation.Hooks(f(g(h())))`.
func (c *ExternalInformationClient) Use(hooks ...Hook) {
	c.hooks.ExternalInformation = append(c.hooks.ExternalInformation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `externalinformation.Intercept(f(g(h())))`.
func (c *ExternalInformationClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExternalInformation = append(c.inters.ExternalInformation, interceptors...)
}

// Create returns a builder for creating a ExternalInformation entity.
func (c *ExternalInformationClient) Create() *ExternalInformationCreate {
	mutation := newExternalInformationMutation(c.config, OpCreate)
	return &ExternalInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExternalInformation entities.
func (c *ExternalInformationClient) CreateBulk(builders ...*ExternalInformationCreate) *ExternalInformationCreateBulk {
	return &ExternalInformationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ExternalInformationClient) MapCreateBulk(slice any, setFunc func(*ExternalInformationCreate, int)) *ExternalInformationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ExternalInformationCreateBulk{err: fmt.Errorf("calling to ExternalInformationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ExternalInformationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ExternalInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExternalInformation.
func (c *ExternalInformationClient) Update() *ExternalInformationUpdate {
	mutation := newExternalInformationMutation(c.config, OpUpdate)
	return &ExternalInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExternalInformationClient) UpdateOne(ei *ExternalInformation) *ExternalInformationUpdateOne {
	mutation := newExternalInformationMutation(c.config, OpUpdateOne, withExternalInformation(ei))
	return &ExternalInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExternalInformationClient) UpdateOneID(id pulid.ID) *ExternalInformationUpdateOne {
	mutation := newExternalInformationMutation(c.config, OpUpdateOne, withExternalInformationID(id))
	return &ExternalInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExternalInformation.
func (c *ExternalInformationClient) Delete() *ExternalInformationDelete {
	mutation := newExternalInformationMutation(c.config, OpDelete)
	return &ExternalInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExternalInformationClient) DeleteOne(ei *ExternalInformation) *ExternalInformationDeleteOne {
	return c.DeleteOneID(ei.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExternalInformationClient) DeleteOneID(id pulid.ID) *ExternalInformationDeleteOne {
	builder := c.Delete().Where(externalinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExternalInformationDeleteOne{builder}
}

// Query returns a query builder for ExternalInformation.
func (c *ExternalInformationClient) Query() *ExternalInformationQuery {
	return &ExternalInformationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExternalInformation},
		inters: c.Interceptors(),
	}
}

// Get returns a ExternalInformation entity by its id.
func (c *ExternalInformationClient) Get(ctx context.Context, id pulid.ID) (*ExternalInformation, error) {
	return c.Query().Where(externalinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExternalInformationClient) GetX(ctx context.Context, id pulid.ID) *ExternalInformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExternalInformationClient) Hooks() []Hook {
	return c.hooks.ExternalInformation
}

// Interceptors returns the client interceptors.
func (c *ExternalInformationClient) Interceptors() []Interceptor {
	return c.inters.ExternalInformation
}

func (c *ExternalInformationClient) mutate(ctx context.Context, m *ExternalInformationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExternalInformationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExternalInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExternalInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExternalInformationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExternalInformation mutation op: %q", m.Op())
	}
}

// KoyoDataClient is a client for the KoyoData schema.
type KoyoDataClient struct {
	config
}

// NewKoyoDataClient returns a client for the KoyoData from the given config.
func NewKoyoDataClient(c config) *KoyoDataClient {
	return &KoyoDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `koyodata.Hooks(f(g(h())))`.
func (c *KoyoDataClient) Use(hooks ...Hook) {
	c.hooks.KoyoData = append(c.hooks.KoyoData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `koyodata.Intercept(f(g(h())))`.
func (c *KoyoDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.KoyoData = append(c.inters.KoyoData, interceptors...)
}

// Create returns a builder for creating a KoyoData entity.
func (c *KoyoDataClient) Create() *KoyoDataCreate {
	mutation := newKoyoDataMutation(c.config, OpCreate)
	return &KoyoDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KoyoData entities.
func (c *KoyoDataClient) CreateBulk(builders ...*KoyoDataCreate) *KoyoDataCreateBulk {
	return &KoyoDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KoyoDataClient) MapCreateBulk(slice any, setFunc func(*KoyoDataCreate, int)) *KoyoDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KoyoDataCreateBulk{err: fmt.Errorf("calling to KoyoDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KoyoDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KoyoDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KoyoData.
func (c *KoyoDataClient) Update() *KoyoDataUpdate {
	mutation := newKoyoDataMutation(c.config, OpUpdate)
	return &KoyoDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KoyoDataClient) UpdateOne(kd *KoyoData) *KoyoDataUpdateOne {
	mutation := newKoyoDataMutation(c.config, OpUpdateOne, withKoyoData(kd))
	return &KoyoDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KoyoDataClient) UpdateOneID(id pulid.ID) *KoyoDataUpdateOne {
	mutation := newKoyoDataMutation(c.config, OpUpdateOne, withKoyoDataID(id))
	return &KoyoDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KoyoData.
func (c *KoyoDataClient) Delete() *KoyoDataDelete {
	mutation := newKoyoDataMutation(c.config, OpDelete)
	return &KoyoDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KoyoDataClient) DeleteOne(kd *KoyoData) *KoyoDataDeleteOne {
	return c.DeleteOneID(kd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KoyoDataClient) DeleteOneID(id pulid.ID) *KoyoDataDeleteOne {
	builder := c.Delete().Where(koyodata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KoyoDataDeleteOne{builder}
}

// Query returns a query builder for KoyoData.
func (c *KoyoDataClient) Query() *KoyoDataQuery {
	return &KoyoDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKoyoData},
		inters: c.Interceptors(),
	}
}

// Get returns a KoyoData entity by its id.
func (c *KoyoDataClient) Get(ctx context.Context, id pulid.ID) (*KoyoData, error) {
	return c.Query().Where(koyodata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KoyoDataClient) GetX(ctx context.Context, id pulid.ID) *KoyoData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *KoyoDataClient) Hooks() []Hook {
	return c.hooks.KoyoData
}

// Interceptors returns the client interceptors.
func (c *KoyoDataClient) Interceptors() []Interceptor {
	return c.inters.KoyoData
}

func (c *KoyoDataClient) mutate(ctx context.Context, m *KoyoDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KoyoDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KoyoDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KoyoDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KoyoDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KoyoData mutation op: %q", m.Op())
	}
}

// KoyoInformationClient is a client for the KoyoInformation schema.
type KoyoInformationClient struct {
	config
}

// NewKoyoInformationClient returns a client for the KoyoInformation from the given config.
func NewKoyoInformationClient(c config) *KoyoInformationClient {
	return &KoyoInformationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `koyoinformation.Hooks(f(g(h())))`.
func (c *KoyoInformationClient) Use(hooks ...Hook) {
	c.hooks.KoyoInformation = append(c.hooks.KoyoInformation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `koyoinformation.Intercept(f(g(h())))`.
func (c *KoyoInformationClient) Intercept(interceptors ...Interceptor) {
	c.inters.KoyoInformation = append(c.inters.KoyoInformation, interceptors...)
}

// Create returns a builder for creating a KoyoInformation entity.
func (c *KoyoInformationClient) Create() *KoyoInformationCreate {
	mutation := newKoyoInformationMutation(c.config, OpCreate)
	return &KoyoInformationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of KoyoInformation entities.
func (c *KoyoInformationClient) CreateBulk(builders ...*KoyoInformationCreate) *KoyoInformationCreateBulk {
	return &KoyoInformationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *KoyoInformationClient) MapCreateBulk(slice any, setFunc func(*KoyoInformationCreate, int)) *KoyoInformationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &KoyoInformationCreateBulk{err: fmt.Errorf("calling to KoyoInformationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*KoyoInformationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &KoyoInformationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for KoyoInformation.
func (c *KoyoInformationClient) Update() *KoyoInformationUpdate {
	mutation := newKoyoInformationMutation(c.config, OpUpdate)
	return &KoyoInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KoyoInformationClient) UpdateOne(ki *KoyoInformation) *KoyoInformationUpdateOne {
	mutation := newKoyoInformationMutation(c.config, OpUpdateOne, withKoyoInformation(ki))
	return &KoyoInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KoyoInformationClient) UpdateOneID(id pulid.ID) *KoyoInformationUpdateOne {
	mutation := newKoyoInformationMutation(c.config, OpUpdateOne, withKoyoInformationID(id))
	return &KoyoInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for KoyoInformation.
func (c *KoyoInformationClient) Delete() *KoyoInformationDelete {
	mutation := newKoyoInformationMutation(c.config, OpDelete)
	return &KoyoInformationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KoyoInformationClient) DeleteOne(ki *KoyoInformation) *KoyoInformationDeleteOne {
	return c.DeleteOneID(ki.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KoyoInformationClient) DeleteOneID(id pulid.ID) *KoyoInformationDeleteOne {
	builder := c.Delete().Where(koyoinformation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KoyoInformationDeleteOne{builder}
}

// Query returns a query builder for KoyoInformation.
func (c *KoyoInformationClient) Query() *KoyoInformationQuery {
	return &KoyoInformationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeKoyoInformation},
		inters: c.Interceptors(),
	}
}

// Get returns a KoyoInformation entity by its id.
func (c *KoyoInformationClient) Get(ctx context.Context, id pulid.ID) (*KoyoInformation, error) {
	return c.Query().Where(koyoinformation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KoyoInformationClient) GetX(ctx context.Context, id pulid.ID) *KoyoInformation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExternals queries the externals edge of a KoyoInformation.
func (c *KoyoInformationClient) QueryExternals(ki *KoyoInformation) *ExternalInformationQuery {
	query := (&ExternalInformationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ki.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(koyoinformation.Table, koyoinformation.FieldID, id),
			sqlgraph.To(externalinformation.Table, externalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, koyoinformation.ExternalsTable, koyoinformation.ExternalsColumn),
		)
		fromV = sqlgraph.Neighbors(ki.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryData queries the data edge of a KoyoInformation.
func (c *KoyoInformationClient) QueryData(ki *KoyoInformation) *KoyoDataQuery {
	query := (&KoyoDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ki.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(koyoinformation.Table, koyoinformation.FieldID, id),
			sqlgraph.To(koyodata.Table, koyodata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, koyoinformation.DataTable, koyoinformation.DataColumn),
		)
		fromV = sqlgraph.Neighbors(ki.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KoyoInformationClient) Hooks() []Hook {
	return c.hooks.KoyoInformation
}

// Interceptors returns the client interceptors.
func (c *KoyoInformationClient) Interceptors() []Interceptor {
	return c.inters.KoyoInformation
}

func (c *KoyoInformationClient) mutate(ctx context.Context, m *KoyoInformationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&KoyoInformationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&KoyoInformationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&KoyoInformationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&KoyoInformationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown KoyoInformation mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AdminUser, ClientData, ExternalInformation, KoyoData, KoyoInformation []ent.Hook
	}
	inters struct {
		AdminUser, ClientData, ExternalInformation, KoyoData,
		KoyoInformation []ent.Interceptor
	}
)

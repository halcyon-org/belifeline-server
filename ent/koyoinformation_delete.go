// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/koyoinformation"
	"github.com/halcyon-org/kizuna/ent/predicate"
)

// KoyoInformationDelete is the builder for deleting a KoyoInformation entity.
type KoyoInformationDelete struct {
	config
	hooks    []Hook
	mutation *KoyoInformationMutation
}

// Where appends a list predicates to the KoyoInformationDelete builder.
func (kid *KoyoInformationDelete) Where(ps ...predicate.KoyoInformation) *KoyoInformationDelete {
	kid.mutation.Where(ps...)
	return kid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kid *KoyoInformationDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kid.sqlExec, kid.mutation, kid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kid *KoyoInformationDelete) ExecX(ctx context.Context) int {
	n, err := kid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kid *KoyoInformationDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(koyoinformation.Table, sqlgraph.NewFieldSpec(koyoinformation.FieldID, field.TypeString))
	if ps := kid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kid.mutation.done = true
	return affected, err
}

// KoyoInformationDeleteOne is the builder for deleting a single KoyoInformation entity.
type KoyoInformationDeleteOne struct {
	kid *KoyoInformationDelete
}

// Where appends a list predicates to the KoyoInformationDelete builder.
func (kido *KoyoInformationDeleteOne) Where(ps ...predicate.KoyoInformation) *KoyoInformationDeleteOne {
	kido.kid.mutation.Where(ps...)
	return kido
}

// Exec executes the deletion query.
func (kido *KoyoInformationDeleteOne) Exec(ctx context.Context) error {
	n, err := kido.kid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{koyoinformation.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kido *KoyoInformationDeleteOne) ExecX(ctx context.Context) {
	if err := kido.Exec(ctx); err != nil {
		panic(err)
	}
}

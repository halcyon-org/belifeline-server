// Code generated by ent, DO NOT EDIT.

package koyodata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/predicate"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldID, id))
}

// KoyoID applies equality check predicate on the "koyo_id" field. It's identical to KoyoIDEQ.
func KoyoID(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldKoyoID, v))
}

// Scale applies equality check predicate on the "scale" field. It's identical to ScaleEQ.
func Scale(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldScale, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldVersion, v))
}

// EntryAt applies equality check predicate on the "entry_at" field. It's identical to EntryAtEQ.
func EntryAt(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldEntryAt, v))
}

// TargetAt applies equality check predicate on the "target_at" field. It's identical to TargetAtEQ.
func TargetAt(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldTargetAt, v))
}

// KoyoIDEQ applies the EQ predicate on the "koyo_id" field.
func KoyoIDEQ(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldKoyoID, v))
}

// KoyoIDNEQ applies the NEQ predicate on the "koyo_id" field.
func KoyoIDNEQ(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldKoyoID, v))
}

// KoyoIDIn applies the In predicate on the "koyo_id" field.
func KoyoIDIn(vs ...pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldKoyoID, vs...))
}

// KoyoIDNotIn applies the NotIn predicate on the "koyo_id" field.
func KoyoIDNotIn(vs ...pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldKoyoID, vs...))
}

// KoyoIDGT applies the GT predicate on the "koyo_id" field.
func KoyoIDGT(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldKoyoID, v))
}

// KoyoIDGTE applies the GTE predicate on the "koyo_id" field.
func KoyoIDGTE(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldKoyoID, v))
}

// KoyoIDLT applies the LT predicate on the "koyo_id" field.
func KoyoIDLT(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldKoyoID, v))
}

// KoyoIDLTE applies the LTE predicate on the "koyo_id" field.
func KoyoIDLTE(v pulid.ID) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldKoyoID, v))
}

// KoyoIDContains applies the Contains predicate on the "koyo_id" field.
func KoyoIDContains(v pulid.ID) predicate.KoyoData {
	vc := string(v)
	return predicate.KoyoData(sql.FieldContains(FieldKoyoID, vc))
}

// KoyoIDHasPrefix applies the HasPrefix predicate on the "koyo_id" field.
func KoyoIDHasPrefix(v pulid.ID) predicate.KoyoData {
	vc := string(v)
	return predicate.KoyoData(sql.FieldHasPrefix(FieldKoyoID, vc))
}

// KoyoIDHasSuffix applies the HasSuffix predicate on the "koyo_id" field.
func KoyoIDHasSuffix(v pulid.ID) predicate.KoyoData {
	vc := string(v)
	return predicate.KoyoData(sql.FieldHasSuffix(FieldKoyoID, vc))
}

// KoyoIDEqualFold applies the EqualFold predicate on the "koyo_id" field.
func KoyoIDEqualFold(v pulid.ID) predicate.KoyoData {
	vc := string(v)
	return predicate.KoyoData(sql.FieldEqualFold(FieldKoyoID, vc))
}

// KoyoIDContainsFold applies the ContainsFold predicate on the "koyo_id" field.
func KoyoIDContainsFold(v pulid.ID) predicate.KoyoData {
	vc := string(v)
	return predicate.KoyoData(sql.FieldContainsFold(FieldKoyoID, vc))
}

// ScaleEQ applies the EQ predicate on the "scale" field.
func ScaleEQ(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldScale, v))
}

// ScaleNEQ applies the NEQ predicate on the "scale" field.
func ScaleNEQ(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldScale, v))
}

// ScaleIn applies the In predicate on the "scale" field.
func ScaleIn(vs ...float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldScale, vs...))
}

// ScaleNotIn applies the NotIn predicate on the "scale" field.
func ScaleNotIn(vs ...float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldScale, vs...))
}

// ScaleGT applies the GT predicate on the "scale" field.
func ScaleGT(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldScale, v))
}

// ScaleGTE applies the GTE predicate on the "scale" field.
func ScaleGTE(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldScale, v))
}

// ScaleLT applies the LT predicate on the "scale" field.
func ScaleLT(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldScale, v))
}

// ScaleLTE applies the LTE predicate on the "scale" field.
func ScaleLTE(v float64) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldScale, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldContainsFold(FieldVersion, v))
}

// EntryAtEQ applies the EQ predicate on the "entry_at" field.
func EntryAtEQ(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldEntryAt, v))
}

// EntryAtNEQ applies the NEQ predicate on the "entry_at" field.
func EntryAtNEQ(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldEntryAt, v))
}

// EntryAtIn applies the In predicate on the "entry_at" field.
func EntryAtIn(vs ...time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldEntryAt, vs...))
}

// EntryAtNotIn applies the NotIn predicate on the "entry_at" field.
func EntryAtNotIn(vs ...time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldEntryAt, vs...))
}

// EntryAtGT applies the GT predicate on the "entry_at" field.
func EntryAtGT(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldEntryAt, v))
}

// EntryAtGTE applies the GTE predicate on the "entry_at" field.
func EntryAtGTE(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldEntryAt, v))
}

// EntryAtLT applies the LT predicate on the "entry_at" field.
func EntryAtLT(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldEntryAt, v))
}

// EntryAtLTE applies the LTE predicate on the "entry_at" field.
func EntryAtLTE(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldEntryAt, v))
}

// TargetAtEQ applies the EQ predicate on the "target_at" field.
func TargetAtEQ(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldEQ(FieldTargetAt, v))
}

// TargetAtNEQ applies the NEQ predicate on the "target_at" field.
func TargetAtNEQ(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNEQ(FieldTargetAt, v))
}

// TargetAtIn applies the In predicate on the "target_at" field.
func TargetAtIn(vs ...time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldIn(FieldTargetAt, vs...))
}

// TargetAtNotIn applies the NotIn predicate on the "target_at" field.
func TargetAtNotIn(vs ...time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldNotIn(FieldTargetAt, vs...))
}

// TargetAtGT applies the GT predicate on the "target_at" field.
func TargetAtGT(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGT(FieldTargetAt, v))
}

// TargetAtGTE applies the GTE predicate on the "target_at" field.
func TargetAtGTE(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldGTE(FieldTargetAt, v))
}

// TargetAtLT applies the LT predicate on the "target_at" field.
func TargetAtLT(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLT(FieldTargetAt, v))
}

// TargetAtLTE applies the LTE predicate on the "target_at" field.
func TargetAtLTE(v time.Time) predicate.KoyoData {
	return predicate.KoyoData(sql.FieldLTE(FieldTargetAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KoyoData) predicate.KoyoData {
	return predicate.KoyoData(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KoyoData) predicate.KoyoData {
	return predicate.KoyoData(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KoyoData) predicate.KoyoData {
	return predicate.KoyoData(sql.NotPredicates(p))
}

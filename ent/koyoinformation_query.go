// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/koyodata"
	"github.com/halcyon-org/kizuna/ent/koyoinformation"
	"github.com/halcyon-org/kizuna/ent/predicate"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// KoyoInformationQuery is the builder for querying KoyoInformation entities.
type KoyoInformationQuery struct {
	config
	ctx           *QueryContext
	order         []koyoinformation.OrderOption
	inters        []Interceptor
	predicates    []predicate.KoyoInformation
	withExternals *ExternalInformationQuery
	withData      *KoyoDataQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KoyoInformationQuery builder.
func (kiq *KoyoInformationQuery) Where(ps ...predicate.KoyoInformation) *KoyoInformationQuery {
	kiq.predicates = append(kiq.predicates, ps...)
	return kiq
}

// Limit the number of records to be returned by this query.
func (kiq *KoyoInformationQuery) Limit(limit int) *KoyoInformationQuery {
	kiq.ctx.Limit = &limit
	return kiq
}

// Offset to start from.
func (kiq *KoyoInformationQuery) Offset(offset int) *KoyoInformationQuery {
	kiq.ctx.Offset = &offset
	return kiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kiq *KoyoInformationQuery) Unique(unique bool) *KoyoInformationQuery {
	kiq.ctx.Unique = &unique
	return kiq
}

// Order specifies how the records should be ordered.
func (kiq *KoyoInformationQuery) Order(o ...koyoinformation.OrderOption) *KoyoInformationQuery {
	kiq.order = append(kiq.order, o...)
	return kiq
}

// QueryExternals chains the current query on the "externals" edge.
func (kiq *KoyoInformationQuery) QueryExternals() *ExternalInformationQuery {
	query := (&ExternalInformationClient{config: kiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(koyoinformation.Table, koyoinformation.FieldID, selector),
			sqlgraph.To(externalinformation.Table, externalinformation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, koyoinformation.ExternalsTable, koyoinformation.ExternalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(kiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryData chains the current query on the "data" edge.
func (kiq *KoyoInformationQuery) QueryData() *KoyoDataQuery {
	query := (&KoyoDataClient{config: kiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := kiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := kiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(koyoinformation.Table, koyoinformation.FieldID, selector),
			sqlgraph.To(koyodata.Table, koyodata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, koyoinformation.DataTable, koyoinformation.DataColumn),
		)
		fromU = sqlgraph.SetNeighbors(kiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first KoyoInformation entity from the query.
// Returns a *NotFoundError when no KoyoInformation was found.
func (kiq *KoyoInformationQuery) First(ctx context.Context) (*KoyoInformation, error) {
	nodes, err := kiq.Limit(1).All(setContextOp(ctx, kiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{koyoinformation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kiq *KoyoInformationQuery) FirstX(ctx context.Context) *KoyoInformation {
	node, err := kiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first KoyoInformation ID from the query.
// Returns a *NotFoundError when no KoyoInformation ID was found.
func (kiq *KoyoInformationQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = kiq.Limit(1).IDs(setContextOp(ctx, kiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{koyoinformation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (kiq *KoyoInformationQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := kiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single KoyoInformation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one KoyoInformation entity is found.
// Returns a *NotFoundError when no KoyoInformation entities are found.
func (kiq *KoyoInformationQuery) Only(ctx context.Context) (*KoyoInformation, error) {
	nodes, err := kiq.Limit(2).All(setContextOp(ctx, kiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{koyoinformation.Label}
	default:
		return nil, &NotSingularError{koyoinformation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kiq *KoyoInformationQuery) OnlyX(ctx context.Context) *KoyoInformation {
	node, err := kiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only KoyoInformation ID in the query.
// Returns a *NotSingularError when more than one KoyoInformation ID is found.
// Returns a *NotFoundError when no entities are found.
func (kiq *KoyoInformationQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = kiq.Limit(2).IDs(setContextOp(ctx, kiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{koyoinformation.Label}
	default:
		err = &NotSingularError{koyoinformation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (kiq *KoyoInformationQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := kiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of KoyoInformations.
func (kiq *KoyoInformationQuery) All(ctx context.Context) ([]*KoyoInformation, error) {
	ctx = setContextOp(ctx, kiq.ctx, ent.OpQueryAll)
	if err := kiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*KoyoInformation, *KoyoInformationQuery]()
	return withInterceptors[[]*KoyoInformation](ctx, kiq, qr, kiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (kiq *KoyoInformationQuery) AllX(ctx context.Context) []*KoyoInformation {
	nodes, err := kiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of KoyoInformation IDs.
func (kiq *KoyoInformationQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if kiq.ctx.Unique == nil && kiq.path != nil {
		kiq.Unique(true)
	}
	ctx = setContextOp(ctx, kiq.ctx, ent.OpQueryIDs)
	if err = kiq.Select(koyoinformation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (kiq *KoyoInformationQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := kiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (kiq *KoyoInformationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, kiq.ctx, ent.OpQueryCount)
	if err := kiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, kiq, querierCount[*KoyoInformationQuery](), kiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (kiq *KoyoInformationQuery) CountX(ctx context.Context) int {
	count, err := kiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kiq *KoyoInformationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, kiq.ctx, ent.OpQueryExist)
	switch _, err := kiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (kiq *KoyoInformationQuery) ExistX(ctx context.Context) bool {
	exist, err := kiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KoyoInformationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kiq *KoyoInformationQuery) Clone() *KoyoInformationQuery {
	if kiq == nil {
		return nil
	}
	return &KoyoInformationQuery{
		config:        kiq.config,
		ctx:           kiq.ctx.Clone(),
		order:         append([]koyoinformation.OrderOption{}, kiq.order...),
		inters:        append([]Interceptor{}, kiq.inters...),
		predicates:    append([]predicate.KoyoInformation{}, kiq.predicates...),
		withExternals: kiq.withExternals.Clone(),
		withData:      kiq.withData.Clone(),
		// clone intermediate query.
		sql:  kiq.sql.Clone(),
		path: kiq.path,
	}
}

// WithExternals tells the query-builder to eager-load the nodes that are connected to
// the "externals" edge. The optional arguments are used to configure the query builder of the edge.
func (kiq *KoyoInformationQuery) WithExternals(opts ...func(*ExternalInformationQuery)) *KoyoInformationQuery {
	query := (&ExternalInformationClient{config: kiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kiq.withExternals = query
	return kiq
}

// WithData tells the query-builder to eager-load the nodes that are connected to
// the "data" edge. The optional arguments are used to configure the query builder of the edge.
func (kiq *KoyoInformationQuery) WithData(opts ...func(*KoyoDataQuery)) *KoyoInformationQuery {
	query := (&KoyoDataClient{config: kiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	kiq.withData = query
	return kiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.KoyoInformation.Query().
//		GroupBy(koyoinformation.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (kiq *KoyoInformationQuery) GroupBy(field string, fields ...string) *KoyoInformationGroupBy {
	kiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &KoyoInformationGroupBy{build: kiq}
	grbuild.flds = &kiq.ctx.Fields
	grbuild.label = koyoinformation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.KoyoInformation.Query().
//		Select(koyoinformation.FieldName).
//		Scan(ctx, &v)
func (kiq *KoyoInformationQuery) Select(fields ...string) *KoyoInformationSelect {
	kiq.ctx.Fields = append(kiq.ctx.Fields, fields...)
	sbuild := &KoyoInformationSelect{KoyoInformationQuery: kiq}
	sbuild.label = koyoinformation.Label
	sbuild.flds, sbuild.scan = &kiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a KoyoInformationSelect configured with the given aggregations.
func (kiq *KoyoInformationQuery) Aggregate(fns ...AggregateFunc) *KoyoInformationSelect {
	return kiq.Select().Aggregate(fns...)
}

func (kiq *KoyoInformationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range kiq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, kiq); err != nil {
				return err
			}
		}
	}
	for _, f := range kiq.ctx.Fields {
		if !koyoinformation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kiq.path != nil {
		prev, err := kiq.path(ctx)
		if err != nil {
			return err
		}
		kiq.sql = prev
	}
	return nil
}

func (kiq *KoyoInformationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*KoyoInformation, error) {
	var (
		nodes       = []*KoyoInformation{}
		_spec       = kiq.querySpec()
		loadedTypes = [2]bool{
			kiq.withExternals != nil,
			kiq.withData != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*KoyoInformation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &KoyoInformation{config: kiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := kiq.withExternals; query != nil {
		if err := kiq.loadExternals(ctx, query, nodes,
			func(n *KoyoInformation) { n.Edges.Externals = []*ExternalInformation{} },
			func(n *KoyoInformation, e *ExternalInformation) { n.Edges.Externals = append(n.Edges.Externals, e) }); err != nil {
			return nil, err
		}
	}
	if query := kiq.withData; query != nil {
		if err := kiq.loadData(ctx, query, nodes,
			func(n *KoyoInformation) { n.Edges.Data = []*KoyoData{} },
			func(n *KoyoInformation, e *KoyoData) { n.Edges.Data = append(n.Edges.Data, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (kiq *KoyoInformationQuery) loadExternals(ctx context.Context, query *ExternalInformationQuery, nodes []*KoyoInformation, init func(*KoyoInformation), assign func(*KoyoInformation, *ExternalInformation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*KoyoInformation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ExternalInformation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(koyoinformation.ExternalsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.koyo_information_externals
		if fk == nil {
			return fmt.Errorf(`foreign-key "koyo_information_externals" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "koyo_information_externals" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (kiq *KoyoInformationQuery) loadData(ctx context.Context, query *KoyoDataQuery, nodes []*KoyoInformation, init func(*KoyoInformation), assign func(*KoyoInformation, *KoyoData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[pulid.ID]*KoyoInformation)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.KoyoData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(koyoinformation.DataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.koyo_information_data
		if fk == nil {
			return fmt.Errorf(`foreign-key "koyo_information_data" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "koyo_information_data" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (kiq *KoyoInformationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kiq.querySpec()
	_spec.Node.Columns = kiq.ctx.Fields
	if len(kiq.ctx.Fields) > 0 {
		_spec.Unique = kiq.ctx.Unique != nil && *kiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, kiq.driver, _spec)
}

func (kiq *KoyoInformationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(koyoinformation.Table, koyoinformation.Columns, sqlgraph.NewFieldSpec(koyoinformation.FieldID, field.TypeString))
	_spec.From = kiq.sql
	if unique := kiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if kiq.path != nil {
		_spec.Unique = true
	}
	if fields := kiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, koyoinformation.FieldID)
		for i := range fields {
			if fields[i] != koyoinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := kiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (kiq *KoyoInformationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kiq.driver.Dialect())
	t1 := builder.Table(koyoinformation.Table)
	columns := kiq.ctx.Fields
	if len(columns) == 0 {
		columns = koyoinformation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kiq.sql != nil {
		selector = kiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kiq.ctx.Unique != nil && *kiq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range kiq.predicates {
		p(selector)
	}
	for _, p := range kiq.order {
		p(selector)
	}
	if offset := kiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// KoyoInformationGroupBy is the group-by builder for KoyoInformation entities.
type KoyoInformationGroupBy struct {
	selector
	build *KoyoInformationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kigb *KoyoInformationGroupBy) Aggregate(fns ...AggregateFunc) *KoyoInformationGroupBy {
	kigb.fns = append(kigb.fns, fns...)
	return kigb
}

// Scan applies the selector query and scans the result into the given value.
func (kigb *KoyoInformationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kigb.build.ctx, ent.OpQueryGroupBy)
	if err := kigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KoyoInformationQuery, *KoyoInformationGroupBy](ctx, kigb.build, kigb, kigb.build.inters, v)
}

func (kigb *KoyoInformationGroupBy) sqlScan(ctx context.Context, root *KoyoInformationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(kigb.fns))
	for _, fn := range kigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*kigb.flds)+len(kigb.fns))
		for _, f := range *kigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*kigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// KoyoInformationSelect is the builder for selecting fields of KoyoInformation entities.
type KoyoInformationSelect struct {
	*KoyoInformationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (kis *KoyoInformationSelect) Aggregate(fns ...AggregateFunc) *KoyoInformationSelect {
	kis.fns = append(kis.fns, fns...)
	return kis
}

// Scan applies the selector query and scans the result into the given value.
func (kis *KoyoInformationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, kis.ctx, ent.OpQuerySelect)
	if err := kis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*KoyoInformationQuery, *KoyoInformationSelect](ctx, kis.KoyoInformationQuery, kis, kis.inters, v)
}

func (kis *KoyoInformationSelect) sqlScan(ctx context.Context, root *KoyoInformationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(kis.fns))
	for _, fn := range kis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*kis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

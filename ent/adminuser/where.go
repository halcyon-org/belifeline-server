// Code generated by ent, DO NOT EDIT.

package adminuser

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/predicate"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldName, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldAPIKey, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldCreatedAt, v))
}

// LastUsedAt applies equality check predicate on the "last_used_at" field. It's identical to LastUsedAtEQ.
func LastUsedAt(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUpdatedAt applies equality check predicate on the "last_updated_at" field. It's identical to LastUpdatedAtEQ.
func LastUpdatedAt(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContainsFold(FieldName, v))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldContainsFold(FieldAPIKey, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldCreatedAt, v))
}

// LastUsedAtEQ applies the EQ predicate on the "last_used_at" field.
func LastUsedAtEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastUsedAt, v))
}

// LastUsedAtNEQ applies the NEQ predicate on the "last_used_at" field.
func LastUsedAtNEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldLastUsedAt, v))
}

// LastUsedAtIn applies the In predicate on the "last_used_at" field.
func LastUsedAtIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldLastUsedAt, vs...))
}

// LastUsedAtNotIn applies the NotIn predicate on the "last_used_at" field.
func LastUsedAtNotIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldLastUsedAt, vs...))
}

// LastUsedAtGT applies the GT predicate on the "last_used_at" field.
func LastUsedAtGT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldLastUsedAt, v))
}

// LastUsedAtGTE applies the GTE predicate on the "last_used_at" field.
func LastUsedAtGTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldLastUsedAt, v))
}

// LastUsedAtLT applies the LT predicate on the "last_used_at" field.
func LastUsedAtLT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldLastUsedAt, v))
}

// LastUsedAtLTE applies the LTE predicate on the "last_used_at" field.
func LastUsedAtLTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldLastUsedAt, v))
}

// LastUpdatedAtEQ applies the EQ predicate on the "last_updated_at" field.
func LastUpdatedAtEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldEQ(FieldLastUpdatedAt, v))
}

// LastUpdatedAtNEQ applies the NEQ predicate on the "last_updated_at" field.
func LastUpdatedAtNEQ(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNEQ(FieldLastUpdatedAt, v))
}

// LastUpdatedAtIn applies the In predicate on the "last_updated_at" field.
func LastUpdatedAtIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldIn(FieldLastUpdatedAt, vs...))
}

// LastUpdatedAtNotIn applies the NotIn predicate on the "last_updated_at" field.
func LastUpdatedAtNotIn(vs ...time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldNotIn(FieldLastUpdatedAt, vs...))
}

// LastUpdatedAtGT applies the GT predicate on the "last_updated_at" field.
func LastUpdatedAtGT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGT(FieldLastUpdatedAt, v))
}

// LastUpdatedAtGTE applies the GTE predicate on the "last_updated_at" field.
func LastUpdatedAtGTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldGTE(FieldLastUpdatedAt, v))
}

// LastUpdatedAtLT applies the LT predicate on the "last_updated_at" field.
func LastUpdatedAtLT(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLT(FieldLastUpdatedAt, v))
}

// LastUpdatedAtLTE applies the LTE predicate on the "last_updated_at" field.
func LastUpdatedAtLTE(v time.Time) predicate.AdminUser {
	return predicate.AdminUser(sql.FieldLTE(FieldLastUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdminUser) predicate.AdminUser {
	return predicate.AdminUser(sql.NotPredicates(p))
}

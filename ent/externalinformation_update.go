// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/predicate"
)

// ExternalInformationUpdate is the builder for updating ExternalInformation entities.
type ExternalInformationUpdate struct {
	config
	hooks    []Hook
	mutation *ExternalInformationMutation
}

// Where appends a list predicates to the ExternalInformationUpdate builder.
func (eiu *ExternalInformationUpdate) Where(ps ...predicate.ExternalInformation) *ExternalInformationUpdate {
	eiu.mutation.Where(ps...)
	return eiu
}

// SetName sets the "name" field.
func (eiu *ExternalInformationUpdate) SetName(s string) *ExternalInformationUpdate {
	eiu.mutation.SetName(s)
	return eiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eiu *ExternalInformationUpdate) SetNillableName(s *string) *ExternalInformationUpdate {
	if s != nil {
		eiu.SetName(*s)
	}
	return eiu
}

// SetDescription sets the "description" field.
func (eiu *ExternalInformationUpdate) SetDescription(s string) *ExternalInformationUpdate {
	eiu.mutation.SetDescription(s)
	return eiu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eiu *ExternalInformationUpdate) SetNillableDescription(s *string) *ExternalInformationUpdate {
	if s != nil {
		eiu.SetDescription(*s)
	}
	return eiu
}

// SetLicense sets the "license" field.
func (eiu *ExternalInformationUpdate) SetLicense(s string) *ExternalInformationUpdate {
	eiu.mutation.SetLicense(s)
	return eiu
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (eiu *ExternalInformationUpdate) SetNillableLicense(s *string) *ExternalInformationUpdate {
	if s != nil {
		eiu.SetLicense(*s)
	}
	return eiu
}

// SetLicenseDescription sets the "license_description" field.
func (eiu *ExternalInformationUpdate) SetLicenseDescription(s string) *ExternalInformationUpdate {
	eiu.mutation.SetLicenseDescription(s)
	return eiu
}

// SetNillableLicenseDescription sets the "license_description" field if the given value is not nil.
func (eiu *ExternalInformationUpdate) SetNillableLicenseDescription(s *string) *ExternalInformationUpdate {
	if s != nil {
		eiu.SetLicenseDescription(*s)
	}
	return eiu
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (eiu *ExternalInformationUpdate) SetLastUpdatedAt(t time.Time) *ExternalInformationUpdate {
	eiu.mutation.SetLastUpdatedAt(t)
	return eiu
}

// Mutation returns the ExternalInformationMutation object of the builder.
func (eiu *ExternalInformationUpdate) Mutation() *ExternalInformationMutation {
	return eiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eiu *ExternalInformationUpdate) Save(ctx context.Context) (int, error) {
	eiu.defaults()
	return withHooks(ctx, eiu.sqlSave, eiu.mutation, eiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiu *ExternalInformationUpdate) SaveX(ctx context.Context) int {
	affected, err := eiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eiu *ExternalInformationUpdate) Exec(ctx context.Context) error {
	_, err := eiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiu *ExternalInformationUpdate) ExecX(ctx context.Context) {
	if err := eiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiu *ExternalInformationUpdate) defaults() {
	if _, ok := eiu.mutation.LastUpdatedAt(); !ok {
		v := externalinformation.UpdateDefaultLastUpdatedAt()
		eiu.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eiu *ExternalInformationUpdate) check() error {
	if v, ok := eiu.mutation.Name(); ok {
		if err := externalinformation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.name": %w`, err)}
		}
	}
	if v, ok := eiu.mutation.Description(); ok {
		if err := externalinformation.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.description": %w`, err)}
		}
	}
	if v, ok := eiu.mutation.License(); ok {
		if err := externalinformation.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.license": %w`, err)}
		}
	}
	return nil
}

func (eiu *ExternalInformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(externalinformation.Table, externalinformation.Columns, sqlgraph.NewFieldSpec(externalinformation.FieldID, field.TypeString))
	if ps := eiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiu.mutation.Name(); ok {
		_spec.SetField(externalinformation.FieldName, field.TypeString, value)
	}
	if value, ok := eiu.mutation.Description(); ok {
		_spec.SetField(externalinformation.FieldDescription, field.TypeString, value)
	}
	if value, ok := eiu.mutation.License(); ok {
		_spec.SetField(externalinformation.FieldLicense, field.TypeString, value)
	}
	if value, ok := eiu.mutation.LicenseDescription(); ok {
		_spec.SetField(externalinformation.FieldLicenseDescription, field.TypeString, value)
	}
	if value, ok := eiu.mutation.LastUpdatedAt(); ok {
		_spec.SetField(externalinformation.FieldLastUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eiu.mutation.done = true
	return n, nil
}

// ExternalInformationUpdateOne is the builder for updating a single ExternalInformation entity.
type ExternalInformationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExternalInformationMutation
}

// SetName sets the "name" field.
func (eiuo *ExternalInformationUpdateOne) SetName(s string) *ExternalInformationUpdateOne {
	eiuo.mutation.SetName(s)
	return eiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eiuo *ExternalInformationUpdateOne) SetNillableName(s *string) *ExternalInformationUpdateOne {
	if s != nil {
		eiuo.SetName(*s)
	}
	return eiuo
}

// SetDescription sets the "description" field.
func (eiuo *ExternalInformationUpdateOne) SetDescription(s string) *ExternalInformationUpdateOne {
	eiuo.mutation.SetDescription(s)
	return eiuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eiuo *ExternalInformationUpdateOne) SetNillableDescription(s *string) *ExternalInformationUpdateOne {
	if s != nil {
		eiuo.SetDescription(*s)
	}
	return eiuo
}

// SetLicense sets the "license" field.
func (eiuo *ExternalInformationUpdateOne) SetLicense(s string) *ExternalInformationUpdateOne {
	eiuo.mutation.SetLicense(s)
	return eiuo
}

// SetNillableLicense sets the "license" field if the given value is not nil.
func (eiuo *ExternalInformationUpdateOne) SetNillableLicense(s *string) *ExternalInformationUpdateOne {
	if s != nil {
		eiuo.SetLicense(*s)
	}
	return eiuo
}

// SetLicenseDescription sets the "license_description" field.
func (eiuo *ExternalInformationUpdateOne) SetLicenseDescription(s string) *ExternalInformationUpdateOne {
	eiuo.mutation.SetLicenseDescription(s)
	return eiuo
}

// SetNillableLicenseDescription sets the "license_description" field if the given value is not nil.
func (eiuo *ExternalInformationUpdateOne) SetNillableLicenseDescription(s *string) *ExternalInformationUpdateOne {
	if s != nil {
		eiuo.SetLicenseDescription(*s)
	}
	return eiuo
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (eiuo *ExternalInformationUpdateOne) SetLastUpdatedAt(t time.Time) *ExternalInformationUpdateOne {
	eiuo.mutation.SetLastUpdatedAt(t)
	return eiuo
}

// Mutation returns the ExternalInformationMutation object of the builder.
func (eiuo *ExternalInformationUpdateOne) Mutation() *ExternalInformationMutation {
	return eiuo.mutation
}

// Where appends a list predicates to the ExternalInformationUpdate builder.
func (eiuo *ExternalInformationUpdateOne) Where(ps ...predicate.ExternalInformation) *ExternalInformationUpdateOne {
	eiuo.mutation.Where(ps...)
	return eiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eiuo *ExternalInformationUpdateOne) Select(field string, fields ...string) *ExternalInformationUpdateOne {
	eiuo.fields = append([]string{field}, fields...)
	return eiuo
}

// Save executes the query and returns the updated ExternalInformation entity.
func (eiuo *ExternalInformationUpdateOne) Save(ctx context.Context) (*ExternalInformation, error) {
	eiuo.defaults()
	return withHooks(ctx, eiuo.sqlSave, eiuo.mutation, eiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eiuo *ExternalInformationUpdateOne) SaveX(ctx context.Context) *ExternalInformation {
	node, err := eiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eiuo *ExternalInformationUpdateOne) Exec(ctx context.Context) error {
	_, err := eiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eiuo *ExternalInformationUpdateOne) ExecX(ctx context.Context) {
	if err := eiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eiuo *ExternalInformationUpdateOne) defaults() {
	if _, ok := eiuo.mutation.LastUpdatedAt(); !ok {
		v := externalinformation.UpdateDefaultLastUpdatedAt()
		eiuo.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eiuo *ExternalInformationUpdateOne) check() error {
	if v, ok := eiuo.mutation.Name(); ok {
		if err := externalinformation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.name": %w`, err)}
		}
	}
	if v, ok := eiuo.mutation.Description(); ok {
		if err := externalinformation.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.description": %w`, err)}
		}
	}
	if v, ok := eiuo.mutation.License(); ok {
		if err := externalinformation.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.license": %w`, err)}
		}
	}
	return nil
}

func (eiuo *ExternalInformationUpdateOne) sqlSave(ctx context.Context) (_node *ExternalInformation, err error) {
	if err := eiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(externalinformation.Table, externalinformation.Columns, sqlgraph.NewFieldSpec(externalinformation.FieldID, field.TypeString))
	id, ok := eiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExternalInformation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, externalinformation.FieldID)
		for _, f := range fields {
			if !externalinformation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != externalinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eiuo.mutation.Name(); ok {
		_spec.SetField(externalinformation.FieldName, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.Description(); ok {
		_spec.SetField(externalinformation.FieldDescription, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.License(); ok {
		_spec.SetField(externalinformation.FieldLicense, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.LicenseDescription(); ok {
		_spec.SetField(externalinformation.FieldLicenseDescription, field.TypeString, value)
	}
	if value, ok := eiuo.mutation.LastUpdatedAt(); ok {
		_spec.SetField(externalinformation.FieldLastUpdatedAt, field.TypeTime, value)
	}
	_node = &ExternalInformation{config: eiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{externalinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	eiuo.mutation.done = true
	return _node, nil
}

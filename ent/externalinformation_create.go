// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

// ExternalInformationCreate is the builder for creating a ExternalInformation entity.
type ExternalInformationCreate struct {
	config
	mutation *ExternalInformationMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (eic *ExternalInformationCreate) SetName(s string) *ExternalInformationCreate {
	eic.mutation.SetName(s)
	return eic
}

// SetDescription sets the "description" field.
func (eic *ExternalInformationCreate) SetDescription(s string) *ExternalInformationCreate {
	eic.mutation.SetDescription(s)
	return eic
}

// SetLicense sets the "license" field.
func (eic *ExternalInformationCreate) SetLicense(s string) *ExternalInformationCreate {
	eic.mutation.SetLicense(s)
	return eic
}

// SetLicenseDescription sets the "license_description" field.
func (eic *ExternalInformationCreate) SetLicenseDescription(s string) *ExternalInformationCreate {
	eic.mutation.SetLicenseDescription(s)
	return eic
}

// SetFirstEntryAt sets the "first_entry_at" field.
func (eic *ExternalInformationCreate) SetFirstEntryAt(t time.Time) *ExternalInformationCreate {
	eic.mutation.SetFirstEntryAt(t)
	return eic
}

// SetNillableFirstEntryAt sets the "first_entry_at" field if the given value is not nil.
func (eic *ExternalInformationCreate) SetNillableFirstEntryAt(t *time.Time) *ExternalInformationCreate {
	if t != nil {
		eic.SetFirstEntryAt(*t)
	}
	return eic
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (eic *ExternalInformationCreate) SetLastUpdatedAt(t time.Time) *ExternalInformationCreate {
	eic.mutation.SetLastUpdatedAt(t)
	return eic
}

// SetNillableLastUpdatedAt sets the "last_updated_at" field if the given value is not nil.
func (eic *ExternalInformationCreate) SetNillableLastUpdatedAt(t *time.Time) *ExternalInformationCreate {
	if t != nil {
		eic.SetLastUpdatedAt(*t)
	}
	return eic
}

// SetID sets the "id" field.
func (eic *ExternalInformationCreate) SetID(pu pulid.ID) *ExternalInformationCreate {
	eic.mutation.SetID(pu)
	return eic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (eic *ExternalInformationCreate) SetNillableID(pu *pulid.ID) *ExternalInformationCreate {
	if pu != nil {
		eic.SetID(*pu)
	}
	return eic
}

// Mutation returns the ExternalInformationMutation object of the builder.
func (eic *ExternalInformationCreate) Mutation() *ExternalInformationMutation {
	return eic.mutation
}

// Save creates the ExternalInformation in the database.
func (eic *ExternalInformationCreate) Save(ctx context.Context) (*ExternalInformation, error) {
	eic.defaults()
	return withHooks(ctx, eic.sqlSave, eic.mutation, eic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (eic *ExternalInformationCreate) SaveX(ctx context.Context) *ExternalInformation {
	v, err := eic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eic *ExternalInformationCreate) Exec(ctx context.Context) error {
	_, err := eic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eic *ExternalInformationCreate) ExecX(ctx context.Context) {
	if err := eic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eic *ExternalInformationCreate) defaults() {
	if _, ok := eic.mutation.FirstEntryAt(); !ok {
		v := externalinformation.DefaultFirstEntryAt()
		eic.mutation.SetFirstEntryAt(v)
	}
	if _, ok := eic.mutation.LastUpdatedAt(); !ok {
		v := externalinformation.DefaultLastUpdatedAt()
		eic.mutation.SetLastUpdatedAt(v)
	}
	if _, ok := eic.mutation.ID(); !ok {
		v := externalinformation.DefaultID()
		eic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eic *ExternalInformationCreate) check() error {
	if _, ok := eic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ExternalInformation.name"`)}
	}
	if v, ok := eic.mutation.Name(); ok {
		if err := externalinformation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.name": %w`, err)}
		}
	}
	if _, ok := eic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "ExternalInformation.description"`)}
	}
	if v, ok := eic.mutation.Description(); ok {
		if err := externalinformation.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.description": %w`, err)}
		}
	}
	if _, ok := eic.mutation.License(); !ok {
		return &ValidationError{Name: "license", err: errors.New(`ent: missing required field "ExternalInformation.license"`)}
	}
	if v, ok := eic.mutation.License(); ok {
		if err := externalinformation.LicenseValidator(v); err != nil {
			return &ValidationError{Name: "license", err: fmt.Errorf(`ent: validator failed for field "ExternalInformation.license": %w`, err)}
		}
	}
	if _, ok := eic.mutation.LicenseDescription(); !ok {
		return &ValidationError{Name: "license_description", err: errors.New(`ent: missing required field "ExternalInformation.license_description"`)}
	}
	if _, ok := eic.mutation.FirstEntryAt(); !ok {
		return &ValidationError{Name: "first_entry_at", err: errors.New(`ent: missing required field "ExternalInformation.first_entry_at"`)}
	}
	if _, ok := eic.mutation.LastUpdatedAt(); !ok {
		return &ValidationError{Name: "last_updated_at", err: errors.New(`ent: missing required field "ExternalInformation.last_updated_at"`)}
	}
	return nil
}

func (eic *ExternalInformationCreate) sqlSave(ctx context.Context) (*ExternalInformation, error) {
	if err := eic.check(); err != nil {
		return nil, err
	}
	_node, _spec := eic.createSpec()
	if err := sqlgraph.CreateNode(ctx, eic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	eic.mutation.id = &_node.ID
	eic.mutation.done = true
	return _node, nil
}

func (eic *ExternalInformationCreate) createSpec() (*ExternalInformation, *sqlgraph.CreateSpec) {
	var (
		_node = &ExternalInformation{config: eic.config}
		_spec = sqlgraph.NewCreateSpec(externalinformation.Table, sqlgraph.NewFieldSpec(externalinformation.FieldID, field.TypeString))
	)
	if id, ok := eic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := eic.mutation.Name(); ok {
		_spec.SetField(externalinformation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := eic.mutation.Description(); ok {
		_spec.SetField(externalinformation.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := eic.mutation.License(); ok {
		_spec.SetField(externalinformation.FieldLicense, field.TypeString, value)
		_node.License = value
	}
	if value, ok := eic.mutation.LicenseDescription(); ok {
		_spec.SetField(externalinformation.FieldLicenseDescription, field.TypeString, value)
		_node.LicenseDescription = value
	}
	if value, ok := eic.mutation.FirstEntryAt(); ok {
		_spec.SetField(externalinformation.FieldFirstEntryAt, field.TypeTime, value)
		_node.FirstEntryAt = value
	}
	if value, ok := eic.mutation.LastUpdatedAt(); ok {
		_spec.SetField(externalinformation.FieldLastUpdatedAt, field.TypeTime, value)
		_node.LastUpdatedAt = value
	}
	return _node, _spec
}

// ExternalInformationCreateBulk is the builder for creating many ExternalInformation entities in bulk.
type ExternalInformationCreateBulk struct {
	config
	err      error
	builders []*ExternalInformationCreate
}

// Save creates the ExternalInformation entities in the database.
func (eicb *ExternalInformationCreateBulk) Save(ctx context.Context) ([]*ExternalInformation, error) {
	if eicb.err != nil {
		return nil, eicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(eicb.builders))
	nodes := make([]*ExternalInformation, len(eicb.builders))
	mutators := make([]Mutator, len(eicb.builders))
	for i := range eicb.builders {
		func(i int, root context.Context) {
			builder := eicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExternalInformationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eicb *ExternalInformationCreateBulk) SaveX(ctx context.Context) []*ExternalInformation {
	v, err := eicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eicb *ExternalInformationCreateBulk) Exec(ctx context.Context) error {
	_, err := eicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eicb *ExternalInformationCreateBulk) ExecX(ctx context.Context) {
	if err := eicb.Exec(ctx); err != nil {
		panic(err)
	}
}

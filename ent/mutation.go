// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/halcyon-org/kizuna/ent/clientdata"
	"github.com/halcyon-org/kizuna/ent/externalinformation"
	"github.com/halcyon-org/kizuna/ent/koyodata"
	"github.com/halcyon-org/kizuna/ent/koyoinformation"
	"github.com/halcyon-org/kizuna/ent/predicate"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeClientData          = "ClientData"
	TypeExternalInformation = "ExternalInformation"
	TypeKoyoData            = "KoyoData"
	TypeKoyoInformation     = "KoyoInformation"
)

// ClientDataMutation represents an operation that mutates the ClientData nodes in the graph.
type ClientDataMutation struct {
	config
	op              Op
	typ             string
	id              *pulid.ID
	username        *string
	api_key         *string
	created_at      *time.Time
	last_used_at    *time.Time
	last_updated_at *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ClientData, error)
	predicates      []predicate.ClientData
}

var _ ent.Mutation = (*ClientDataMutation)(nil)

// clientdataOption allows management of the mutation configuration using functional options.
type clientdataOption func(*ClientDataMutation)

// newClientDataMutation creates new mutation for the ClientData entity.
func newClientDataMutation(c config, op Op, opts ...clientdataOption) *ClientDataMutation {
	m := &ClientDataMutation{
		config:        c,
		op:            op,
		typ:           TypeClientData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClientDataID sets the ID field of the mutation.
func withClientDataID(id pulid.ID) clientdataOption {
	return func(m *ClientDataMutation) {
		var (
			err   error
			once  sync.Once
			value *ClientData
		)
		m.oldValue = func(ctx context.Context) (*ClientData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ClientData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClientData sets the old ClientData of the mutation.
func withClientData(node *ClientData) clientdataOption {
	return func(m *ClientDataMutation) {
		m.oldValue = func(context.Context) (*ClientData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClientDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClientDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ClientData entities.
func (m *ClientDataMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClientDataMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClientDataMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ClientData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *ClientDataMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *ClientDataMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the ClientData entity.
// If the ClientData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDataMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *ClientDataMutation) ResetUsername() {
	m.username = nil
}

// SetAPIKey sets the "api_key" field.
func (m *ClientDataMutation) SetAPIKey(s string) {
	m.api_key = &s
}

// APIKey returns the value of the "api_key" field in the mutation.
func (m *ClientDataMutation) APIKey() (r string, exists bool) {
	v := m.api_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAPIKey returns the old "api_key" field's value of the ClientData entity.
// If the ClientData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDataMutation) OldAPIKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAPIKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAPIKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAPIKey: %w", err)
	}
	return oldValue.APIKey, nil
}

// ResetAPIKey resets all changes to the "api_key" field.
func (m *ClientDataMutation) ResetAPIKey() {
	m.api_key = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ClientDataMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ClientDataMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ClientData entity.
// If the ClientData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDataMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ClientDataMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *ClientDataMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *ClientDataMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the ClientData entity.
// If the ClientData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDataMutation) OldLastUsedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *ClientDataMutation) ResetLastUsedAt() {
	m.last_used_at = nil
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (m *ClientDataMutation) SetLastUpdatedAt(t time.Time) {
	m.last_updated_at = &t
}

// LastUpdatedAt returns the value of the "last_updated_at" field in the mutation.
func (m *ClientDataMutation) LastUpdatedAt() (r time.Time, exists bool) {
	v := m.last_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdatedAt returns the old "last_updated_at" field's value of the ClientData entity.
// If the ClientData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientDataMutation) OldLastUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdatedAt: %w", err)
	}
	return oldValue.LastUpdatedAt, nil
}

// ResetLastUpdatedAt resets all changes to the "last_updated_at" field.
func (m *ClientDataMutation) ResetLastUpdatedAt() {
	m.last_updated_at = nil
}

// Where appends a list predicates to the ClientDataMutation builder.
func (m *ClientDataMutation) Where(ps ...predicate.ClientData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClientDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClientDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ClientData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClientDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClientDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ClientData).
func (m *ClientDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClientDataMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.username != nil {
		fields = append(fields, clientdata.FieldUsername)
	}
	if m.api_key != nil {
		fields = append(fields, clientdata.FieldAPIKey)
	}
	if m.created_at != nil {
		fields = append(fields, clientdata.FieldCreatedAt)
	}
	if m.last_used_at != nil {
		fields = append(fields, clientdata.FieldLastUsedAt)
	}
	if m.last_updated_at != nil {
		fields = append(fields, clientdata.FieldLastUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClientDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clientdata.FieldUsername:
		return m.Username()
	case clientdata.FieldAPIKey:
		return m.APIKey()
	case clientdata.FieldCreatedAt:
		return m.CreatedAt()
	case clientdata.FieldLastUsedAt:
		return m.LastUsedAt()
	case clientdata.FieldLastUpdatedAt:
		return m.LastUpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClientDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clientdata.FieldUsername:
		return m.OldUsername(ctx)
	case clientdata.FieldAPIKey:
		return m.OldAPIKey(ctx)
	case clientdata.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case clientdata.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	case clientdata.FieldLastUpdatedAt:
		return m.OldLastUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ClientData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clientdata.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case clientdata.FieldAPIKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAPIKey(v)
		return nil
	case clientdata.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case clientdata.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	case clientdata.FieldLastUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ClientData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClientDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClientDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ClientData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClientDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClientDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClientDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ClientData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClientDataMutation) ResetField(name string) error {
	switch name {
	case clientdata.FieldUsername:
		m.ResetUsername()
		return nil
	case clientdata.FieldAPIKey:
		m.ResetAPIKey()
		return nil
	case clientdata.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case clientdata.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	case clientdata.FieldLastUpdatedAt:
		m.ResetLastUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ClientData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClientDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClientDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClientDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClientDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClientDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClientDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClientDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ClientData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClientDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ClientData edge %s", name)
}

// ExternalInformationMutation represents an operation that mutates the ExternalInformation nodes in the graph.
type ExternalInformationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *pulid.ID
	name                *string
	description         *string
	license             *string
	license_description *string
	first_entry_at      *time.Time
	last_updated_at     *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*ExternalInformation, error)
	predicates          []predicate.ExternalInformation
}

var _ ent.Mutation = (*ExternalInformationMutation)(nil)

// externalinformationOption allows management of the mutation configuration using functional options.
type externalinformationOption func(*ExternalInformationMutation)

// newExternalInformationMutation creates new mutation for the ExternalInformation entity.
func newExternalInformationMutation(c config, op Op, opts ...externalinformationOption) *ExternalInformationMutation {
	m := &ExternalInformationMutation{
		config:        c,
		op:            op,
		typ:           TypeExternalInformation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withExternalInformationID sets the ID field of the mutation.
func withExternalInformationID(id pulid.ID) externalinformationOption {
	return func(m *ExternalInformationMutation) {
		var (
			err   error
			once  sync.Once
			value *ExternalInformation
		)
		m.oldValue = func(ctx context.Context) (*ExternalInformation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ExternalInformation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withExternalInformation sets the old ExternalInformation of the mutation.
func withExternalInformation(node *ExternalInformation) externalinformationOption {
	return func(m *ExternalInformationMutation) {
		m.oldValue = func(context.Context) (*ExternalInformation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ExternalInformationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ExternalInformationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ExternalInformation entities.
func (m *ExternalInformationMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ExternalInformationMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ExternalInformationMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ExternalInformation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ExternalInformationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ExternalInformationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ExternalInformationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *ExternalInformationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ExternalInformationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ExternalInformationMutation) ResetDescription() {
	m.description = nil
}

// SetLicense sets the "license" field.
func (m *ExternalInformationMutation) SetLicense(s string) {
	m.license = &s
}

// License returns the value of the "license" field in the mutation.
func (m *ExternalInformationMutation) License() (r string, exists bool) {
	v := m.license
	if v == nil {
		return
	}
	return *v, true
}

// OldLicense returns the old "license" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldLicense(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicense is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicense requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicense: %w", err)
	}
	return oldValue.License, nil
}

// ResetLicense resets all changes to the "license" field.
func (m *ExternalInformationMutation) ResetLicense() {
	m.license = nil
}

// SetLicenseDescription sets the "license_description" field.
func (m *ExternalInformationMutation) SetLicenseDescription(s string) {
	m.license_description = &s
}

// LicenseDescription returns the value of the "license_description" field in the mutation.
func (m *ExternalInformationMutation) LicenseDescription() (r string, exists bool) {
	v := m.license_description
	if v == nil {
		return
	}
	return *v, true
}

// OldLicenseDescription returns the old "license_description" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldLicenseDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicenseDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicenseDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicenseDescription: %w", err)
	}
	return oldValue.LicenseDescription, nil
}

// ResetLicenseDescription resets all changes to the "license_description" field.
func (m *ExternalInformationMutation) ResetLicenseDescription() {
	m.license_description = nil
}

// SetFirstEntryAt sets the "first_entry_at" field.
func (m *ExternalInformationMutation) SetFirstEntryAt(t time.Time) {
	m.first_entry_at = &t
}

// FirstEntryAt returns the value of the "first_entry_at" field in the mutation.
func (m *ExternalInformationMutation) FirstEntryAt() (r time.Time, exists bool) {
	v := m.first_entry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstEntryAt returns the old "first_entry_at" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldFirstEntryAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstEntryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstEntryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstEntryAt: %w", err)
	}
	return oldValue.FirstEntryAt, nil
}

// ResetFirstEntryAt resets all changes to the "first_entry_at" field.
func (m *ExternalInformationMutation) ResetFirstEntryAt() {
	m.first_entry_at = nil
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (m *ExternalInformationMutation) SetLastUpdatedAt(t time.Time) {
	m.last_updated_at = &t
}

// LastUpdatedAt returns the value of the "last_updated_at" field in the mutation.
func (m *ExternalInformationMutation) LastUpdatedAt() (r time.Time, exists bool) {
	v := m.last_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdatedAt returns the old "last_updated_at" field's value of the ExternalInformation entity.
// If the ExternalInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ExternalInformationMutation) OldLastUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdatedAt: %w", err)
	}
	return oldValue.LastUpdatedAt, nil
}

// ResetLastUpdatedAt resets all changes to the "last_updated_at" field.
func (m *ExternalInformationMutation) ResetLastUpdatedAt() {
	m.last_updated_at = nil
}

// Where appends a list predicates to the ExternalInformationMutation builder.
func (m *ExternalInformationMutation) Where(ps ...predicate.ExternalInformation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ExternalInformationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ExternalInformationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ExternalInformation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ExternalInformationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ExternalInformationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ExternalInformation).
func (m *ExternalInformationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ExternalInformationMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, externalinformation.FieldName)
	}
	if m.description != nil {
		fields = append(fields, externalinformation.FieldDescription)
	}
	if m.license != nil {
		fields = append(fields, externalinformation.FieldLicense)
	}
	if m.license_description != nil {
		fields = append(fields, externalinformation.FieldLicenseDescription)
	}
	if m.first_entry_at != nil {
		fields = append(fields, externalinformation.FieldFirstEntryAt)
	}
	if m.last_updated_at != nil {
		fields = append(fields, externalinformation.FieldLastUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ExternalInformationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case externalinformation.FieldName:
		return m.Name()
	case externalinformation.FieldDescription:
		return m.Description()
	case externalinformation.FieldLicense:
		return m.License()
	case externalinformation.FieldLicenseDescription:
		return m.LicenseDescription()
	case externalinformation.FieldFirstEntryAt:
		return m.FirstEntryAt()
	case externalinformation.FieldLastUpdatedAt:
		return m.LastUpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ExternalInformationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case externalinformation.FieldName:
		return m.OldName(ctx)
	case externalinformation.FieldDescription:
		return m.OldDescription(ctx)
	case externalinformation.FieldLicense:
		return m.OldLicense(ctx)
	case externalinformation.FieldLicenseDescription:
		return m.OldLicenseDescription(ctx)
	case externalinformation.FieldFirstEntryAt:
		return m.OldFirstEntryAt(ctx)
	case externalinformation.FieldLastUpdatedAt:
		return m.OldLastUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ExternalInformation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExternalInformationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case externalinformation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case externalinformation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case externalinformation.FieldLicense:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicense(v)
		return nil
	case externalinformation.FieldLicenseDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicenseDescription(v)
		return nil
	case externalinformation.FieldFirstEntryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstEntryAt(v)
		return nil
	case externalinformation.FieldLastUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ExternalInformation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ExternalInformationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ExternalInformationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ExternalInformationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ExternalInformation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ExternalInformationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ExternalInformationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ExternalInformationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ExternalInformation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ExternalInformationMutation) ResetField(name string) error {
	switch name {
	case externalinformation.FieldName:
		m.ResetName()
		return nil
	case externalinformation.FieldDescription:
		m.ResetDescription()
		return nil
	case externalinformation.FieldLicense:
		m.ResetLicense()
		return nil
	case externalinformation.FieldLicenseDescription:
		m.ResetLicenseDescription()
		return nil
	case externalinformation.FieldFirstEntryAt:
		m.ResetFirstEntryAt()
		return nil
	case externalinformation.FieldLastUpdatedAt:
		m.ResetLastUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown ExternalInformation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ExternalInformationMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ExternalInformationMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ExternalInformationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ExternalInformationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ExternalInformationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ExternalInformationMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ExternalInformationMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ExternalInformation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ExternalInformationMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ExternalInformation edge %s", name)
}

// KoyoDataMutation represents an operation that mutates the KoyoData nodes in the graph.
type KoyoDataMutation struct {
	config
	op            Op
	typ           string
	id            *pulid.ID
	koyo_id       *pulid.ID
	scale         *float64
	addscale      *float64
	params        *map[string]string
	version       *string
	entry_at      *time.Time
	target_at     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*KoyoData, error)
	predicates    []predicate.KoyoData
}

var _ ent.Mutation = (*KoyoDataMutation)(nil)

// koyodataOption allows management of the mutation configuration using functional options.
type koyodataOption func(*KoyoDataMutation)

// newKoyoDataMutation creates new mutation for the KoyoData entity.
func newKoyoDataMutation(c config, op Op, opts ...koyodataOption) *KoyoDataMutation {
	m := &KoyoDataMutation{
		config:        c,
		op:            op,
		typ:           TypeKoyoData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKoyoDataID sets the ID field of the mutation.
func withKoyoDataID(id pulid.ID) koyodataOption {
	return func(m *KoyoDataMutation) {
		var (
			err   error
			once  sync.Once
			value *KoyoData
		)
		m.oldValue = func(ctx context.Context) (*KoyoData, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KoyoData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKoyoData sets the old KoyoData of the mutation.
func withKoyoData(node *KoyoData) koyodataOption {
	return func(m *KoyoDataMutation) {
		m.oldValue = func(context.Context) (*KoyoData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KoyoDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KoyoDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KoyoData entities.
func (m *KoyoDataMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KoyoDataMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KoyoDataMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KoyoData.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetKoyoID sets the "koyo_id" field.
func (m *KoyoDataMutation) SetKoyoID(pu pulid.ID) {
	m.koyo_id = &pu
}

// KoyoID returns the value of the "koyo_id" field in the mutation.
func (m *KoyoDataMutation) KoyoID() (r pulid.ID, exists bool) {
	v := m.koyo_id
	if v == nil {
		return
	}
	return *v, true
}

// OldKoyoID returns the old "koyo_id" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldKoyoID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKoyoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKoyoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKoyoID: %w", err)
	}
	return oldValue.KoyoID, nil
}

// ResetKoyoID resets all changes to the "koyo_id" field.
func (m *KoyoDataMutation) ResetKoyoID() {
	m.koyo_id = nil
}

// SetScale sets the "scale" field.
func (m *KoyoDataMutation) SetScale(f float64) {
	m.scale = &f
	m.addscale = nil
}

// Scale returns the value of the "scale" field in the mutation.
func (m *KoyoDataMutation) Scale() (r float64, exists bool) {
	v := m.scale
	if v == nil {
		return
	}
	return *v, true
}

// OldScale returns the old "scale" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldScale(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScale: %w", err)
	}
	return oldValue.Scale, nil
}

// AddScale adds f to the "scale" field.
func (m *KoyoDataMutation) AddScale(f float64) {
	if m.addscale != nil {
		*m.addscale += f
	} else {
		m.addscale = &f
	}
}

// AddedScale returns the value that was added to the "scale" field in this mutation.
func (m *KoyoDataMutation) AddedScale() (r float64, exists bool) {
	v := m.addscale
	if v == nil {
		return
	}
	return *v, true
}

// ResetScale resets all changes to the "scale" field.
func (m *KoyoDataMutation) ResetScale() {
	m.scale = nil
	m.addscale = nil
}

// SetParams sets the "params" field.
func (m *KoyoDataMutation) SetParams(value map[string]string) {
	m.params = &value
}

// Params returns the value of the "params" field in the mutation.
func (m *KoyoDataMutation) Params() (r map[string]string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldParams(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// ResetParams resets all changes to the "params" field.
func (m *KoyoDataMutation) ResetParams() {
	m.params = nil
}

// SetVersion sets the "version" field.
func (m *KoyoDataMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *KoyoDataMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *KoyoDataMutation) ResetVersion() {
	m.version = nil
}

// SetEntryAt sets the "entry_at" field.
func (m *KoyoDataMutation) SetEntryAt(t time.Time) {
	m.entry_at = &t
}

// EntryAt returns the value of the "entry_at" field in the mutation.
func (m *KoyoDataMutation) EntryAt() (r time.Time, exists bool) {
	v := m.entry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEntryAt returns the old "entry_at" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldEntryAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEntryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEntryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEntryAt: %w", err)
	}
	return oldValue.EntryAt, nil
}

// ResetEntryAt resets all changes to the "entry_at" field.
func (m *KoyoDataMutation) ResetEntryAt() {
	m.entry_at = nil
}

// SetTargetAt sets the "target_at" field.
func (m *KoyoDataMutation) SetTargetAt(t time.Time) {
	m.target_at = &t
}

// TargetAt returns the value of the "target_at" field in the mutation.
func (m *KoyoDataMutation) TargetAt() (r time.Time, exists bool) {
	v := m.target_at
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetAt returns the old "target_at" field's value of the KoyoData entity.
// If the KoyoData object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoDataMutation) OldTargetAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetAt: %w", err)
	}
	return oldValue.TargetAt, nil
}

// ResetTargetAt resets all changes to the "target_at" field.
func (m *KoyoDataMutation) ResetTargetAt() {
	m.target_at = nil
}

// Where appends a list predicates to the KoyoDataMutation builder.
func (m *KoyoDataMutation) Where(ps ...predicate.KoyoData) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KoyoDataMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KoyoDataMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KoyoData, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KoyoDataMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KoyoDataMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KoyoData).
func (m *KoyoDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KoyoDataMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.koyo_id != nil {
		fields = append(fields, koyodata.FieldKoyoID)
	}
	if m.scale != nil {
		fields = append(fields, koyodata.FieldScale)
	}
	if m.params != nil {
		fields = append(fields, koyodata.FieldParams)
	}
	if m.version != nil {
		fields = append(fields, koyodata.FieldVersion)
	}
	if m.entry_at != nil {
		fields = append(fields, koyodata.FieldEntryAt)
	}
	if m.target_at != nil {
		fields = append(fields, koyodata.FieldTargetAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KoyoDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case koyodata.FieldKoyoID:
		return m.KoyoID()
	case koyodata.FieldScale:
		return m.Scale()
	case koyodata.FieldParams:
		return m.Params()
	case koyodata.FieldVersion:
		return m.Version()
	case koyodata.FieldEntryAt:
		return m.EntryAt()
	case koyodata.FieldTargetAt:
		return m.TargetAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KoyoDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case koyodata.FieldKoyoID:
		return m.OldKoyoID(ctx)
	case koyodata.FieldScale:
		return m.OldScale(ctx)
	case koyodata.FieldParams:
		return m.OldParams(ctx)
	case koyodata.FieldVersion:
		return m.OldVersion(ctx)
	case koyodata.FieldEntryAt:
		return m.OldEntryAt(ctx)
	case koyodata.FieldTargetAt:
		return m.OldTargetAt(ctx)
	}
	return nil, fmt.Errorf("unknown KoyoData field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KoyoDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case koyodata.FieldKoyoID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKoyoID(v)
		return nil
	case koyodata.FieldScale:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScale(v)
		return nil
	case koyodata.FieldParams:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case koyodata.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case koyodata.FieldEntryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntryAt(v)
		return nil
	case koyodata.FieldTargetAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetAt(v)
		return nil
	}
	return fmt.Errorf("unknown KoyoData field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KoyoDataMutation) AddedFields() []string {
	var fields []string
	if m.addscale != nil {
		fields = append(fields, koyodata.FieldScale)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KoyoDataMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case koyodata.FieldScale:
		return m.AddedScale()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KoyoDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	case koyodata.FieldScale:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScale(v)
		return nil
	}
	return fmt.Errorf("unknown KoyoData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KoyoDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KoyoDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KoyoDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KoyoData nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KoyoDataMutation) ResetField(name string) error {
	switch name {
	case koyodata.FieldKoyoID:
		m.ResetKoyoID()
		return nil
	case koyodata.FieldScale:
		m.ResetScale()
		return nil
	case koyodata.FieldParams:
		m.ResetParams()
		return nil
	case koyodata.FieldVersion:
		m.ResetVersion()
		return nil
	case koyodata.FieldEntryAt:
		m.ResetEntryAt()
		return nil
	case koyodata.FieldTargetAt:
		m.ResetTargetAt()
		return nil
	}
	return fmt.Errorf("unknown KoyoData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KoyoDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KoyoDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KoyoDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KoyoDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KoyoDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KoyoDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KoyoDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown KoyoData unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KoyoDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown KoyoData edge %s", name)
}

// KoyoInformationMutation represents an operation that mutates the KoyoInformation nodes in the graph.
type KoyoInformationMutation struct {
	config
	op               Op
	typ              string
	id               *pulid.ID
	name             *string
	description      *string
	params           *map[string]string
	scales           *[]float64
	appendscales     []float64
	version          *string
	license          *string
	data_type        *koyoinformation.DataType
	first_entry_at   *time.Time
	last_entry_at    *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	externals        map[pulid.ID]struct{}
	removedexternals map[pulid.ID]struct{}
	clearedexternals bool
	data             map[pulid.ID]struct{}
	removeddata      map[pulid.ID]struct{}
	cleareddata      bool
	done             bool
	oldValue         func(context.Context) (*KoyoInformation, error)
	predicates       []predicate.KoyoInformation
}

var _ ent.Mutation = (*KoyoInformationMutation)(nil)

// koyoinformationOption allows management of the mutation configuration using functional options.
type koyoinformationOption func(*KoyoInformationMutation)

// newKoyoInformationMutation creates new mutation for the KoyoInformation entity.
func newKoyoInformationMutation(c config, op Op, opts ...koyoinformationOption) *KoyoInformationMutation {
	m := &KoyoInformationMutation{
		config:        c,
		op:            op,
		typ:           TypeKoyoInformation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKoyoInformationID sets the ID field of the mutation.
func withKoyoInformationID(id pulid.ID) koyoinformationOption {
	return func(m *KoyoInformationMutation) {
		var (
			err   error
			once  sync.Once
			value *KoyoInformation
		)
		m.oldValue = func(ctx context.Context) (*KoyoInformation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KoyoInformation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKoyoInformation sets the old KoyoInformation of the mutation.
func withKoyoInformation(node *KoyoInformation) koyoinformationOption {
	return func(m *KoyoInformationMutation) {
		m.oldValue = func(context.Context) (*KoyoInformation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KoyoInformationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KoyoInformationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KoyoInformation entities.
func (m *KoyoInformationMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KoyoInformationMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KoyoInformationMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KoyoInformation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *KoyoInformationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *KoyoInformationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *KoyoInformationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *KoyoInformationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *KoyoInformationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *KoyoInformationMutation) ResetDescription() {
	m.description = nil
}

// SetParams sets the "params" field.
func (m *KoyoInformationMutation) SetParams(value map[string]string) {
	m.params = &value
}

// Params returns the value of the "params" field in the mutation.
func (m *KoyoInformationMutation) Params() (r map[string]string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldParams(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// ResetParams resets all changes to the "params" field.
func (m *KoyoInformationMutation) ResetParams() {
	m.params = nil
}

// SetScales sets the "scales" field.
func (m *KoyoInformationMutation) SetScales(f []float64) {
	m.scales = &f
	m.appendscales = nil
}

// Scales returns the value of the "scales" field in the mutation.
func (m *KoyoInformationMutation) Scales() (r []float64, exists bool) {
	v := m.scales
	if v == nil {
		return
	}
	return *v, true
}

// OldScales returns the old "scales" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldScales(ctx context.Context) (v []float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScales is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScales requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScales: %w", err)
	}
	return oldValue.Scales, nil
}

// AppendScales adds f to the "scales" field.
func (m *KoyoInformationMutation) AppendScales(f []float64) {
	m.appendscales = append(m.appendscales, f...)
}

// AppendedScales returns the list of values that were appended to the "scales" field in this mutation.
func (m *KoyoInformationMutation) AppendedScales() ([]float64, bool) {
	if len(m.appendscales) == 0 {
		return nil, false
	}
	return m.appendscales, true
}

// ResetScales resets all changes to the "scales" field.
func (m *KoyoInformationMutation) ResetScales() {
	m.scales = nil
	m.appendscales = nil
}

// SetVersion sets the "version" field.
func (m *KoyoInformationMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *KoyoInformationMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *KoyoInformationMutation) ResetVersion() {
	m.version = nil
}

// SetLicense sets the "license" field.
func (m *KoyoInformationMutation) SetLicense(s string) {
	m.license = &s
}

// License returns the value of the "license" field in the mutation.
func (m *KoyoInformationMutation) License() (r string, exists bool) {
	v := m.license
	if v == nil {
		return
	}
	return *v, true
}

// OldLicense returns the old "license" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldLicense(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLicense is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLicense requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLicense: %w", err)
	}
	return oldValue.License, nil
}

// ResetLicense resets all changes to the "license" field.
func (m *KoyoInformationMutation) ResetLicense() {
	m.license = nil
}

// SetDataType sets the "data_type" field.
func (m *KoyoInformationMutation) SetDataType(kt koyoinformation.DataType) {
	m.data_type = &kt
}

// DataType returns the value of the "data_type" field in the mutation.
func (m *KoyoInformationMutation) DataType() (r koyoinformation.DataType, exists bool) {
	v := m.data_type
	if v == nil {
		return
	}
	return *v, true
}

// OldDataType returns the old "data_type" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldDataType(ctx context.Context) (v koyoinformation.DataType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataType: %w", err)
	}
	return oldValue.DataType, nil
}

// ResetDataType resets all changes to the "data_type" field.
func (m *KoyoInformationMutation) ResetDataType() {
	m.data_type = nil
}

// SetFirstEntryAt sets the "first_entry_at" field.
func (m *KoyoInformationMutation) SetFirstEntryAt(t time.Time) {
	m.first_entry_at = &t
}

// FirstEntryAt returns the value of the "first_entry_at" field in the mutation.
func (m *KoyoInformationMutation) FirstEntryAt() (r time.Time, exists bool) {
	v := m.first_entry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstEntryAt returns the old "first_entry_at" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldFirstEntryAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstEntryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstEntryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstEntryAt: %w", err)
	}
	return oldValue.FirstEntryAt, nil
}

// ResetFirstEntryAt resets all changes to the "first_entry_at" field.
func (m *KoyoInformationMutation) ResetFirstEntryAt() {
	m.first_entry_at = nil
}

// SetLastEntryAt sets the "last_entry_at" field.
func (m *KoyoInformationMutation) SetLastEntryAt(t time.Time) {
	m.last_entry_at = &t
}

// LastEntryAt returns the value of the "last_entry_at" field in the mutation.
func (m *KoyoInformationMutation) LastEntryAt() (r time.Time, exists bool) {
	v := m.last_entry_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastEntryAt returns the old "last_entry_at" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldLastEntryAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastEntryAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastEntryAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastEntryAt: %w", err)
	}
	return oldValue.LastEntryAt, nil
}

// ResetLastEntryAt resets all changes to the "last_entry_at" field.
func (m *KoyoInformationMutation) ResetLastEntryAt() {
	m.last_entry_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *KoyoInformationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *KoyoInformationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the KoyoInformation entity.
// If the KoyoInformation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KoyoInformationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *KoyoInformationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddExternalIDs adds the "externals" edge to the ExternalInformation entity by ids.
func (m *KoyoInformationMutation) AddExternalIDs(ids ...pulid.ID) {
	if m.externals == nil {
		m.externals = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.externals[ids[i]] = struct{}{}
	}
}

// ClearExternals clears the "externals" edge to the ExternalInformation entity.
func (m *KoyoInformationMutation) ClearExternals() {
	m.clearedexternals = true
}

// ExternalsCleared reports if the "externals" edge to the ExternalInformation entity was cleared.
func (m *KoyoInformationMutation) ExternalsCleared() bool {
	return m.clearedexternals
}

// RemoveExternalIDs removes the "externals" edge to the ExternalInformation entity by IDs.
func (m *KoyoInformationMutation) RemoveExternalIDs(ids ...pulid.ID) {
	if m.removedexternals == nil {
		m.removedexternals = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.externals, ids[i])
		m.removedexternals[ids[i]] = struct{}{}
	}
}

// RemovedExternals returns the removed IDs of the "externals" edge to the ExternalInformation entity.
func (m *KoyoInformationMutation) RemovedExternalsIDs() (ids []pulid.ID) {
	for id := range m.removedexternals {
		ids = append(ids, id)
	}
	return
}

// ExternalsIDs returns the "externals" edge IDs in the mutation.
func (m *KoyoInformationMutation) ExternalsIDs() (ids []pulid.ID) {
	for id := range m.externals {
		ids = append(ids, id)
	}
	return
}

// ResetExternals resets all changes to the "externals" edge.
func (m *KoyoInformationMutation) ResetExternals() {
	m.externals = nil
	m.clearedexternals = false
	m.removedexternals = nil
}

// AddDatumIDs adds the "data" edge to the KoyoData entity by ids.
func (m *KoyoInformationMutation) AddDatumIDs(ids ...pulid.ID) {
	if m.data == nil {
		m.data = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.data[ids[i]] = struct{}{}
	}
}

// ClearData clears the "data" edge to the KoyoData entity.
func (m *KoyoInformationMutation) ClearData() {
	m.cleareddata = true
}

// DataCleared reports if the "data" edge to the KoyoData entity was cleared.
func (m *KoyoInformationMutation) DataCleared() bool {
	return m.cleareddata
}

// RemoveDatumIDs removes the "data" edge to the KoyoData entity by IDs.
func (m *KoyoInformationMutation) RemoveDatumIDs(ids ...pulid.ID) {
	if m.removeddata == nil {
		m.removeddata = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.data, ids[i])
		m.removeddata[ids[i]] = struct{}{}
	}
}

// RemovedData returns the removed IDs of the "data" edge to the KoyoData entity.
func (m *KoyoInformationMutation) RemovedDataIDs() (ids []pulid.ID) {
	for id := range m.removeddata {
		ids = append(ids, id)
	}
	return
}

// DataIDs returns the "data" edge IDs in the mutation.
func (m *KoyoInformationMutation) DataIDs() (ids []pulid.ID) {
	for id := range m.data {
		ids = append(ids, id)
	}
	return
}

// ResetData resets all changes to the "data" edge.
func (m *KoyoInformationMutation) ResetData() {
	m.data = nil
	m.cleareddata = false
	m.removeddata = nil
}

// Where appends a list predicates to the KoyoInformationMutation builder.
func (m *KoyoInformationMutation) Where(ps ...predicate.KoyoInformation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KoyoInformationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KoyoInformationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KoyoInformation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KoyoInformationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KoyoInformationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KoyoInformation).
func (m *KoyoInformationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KoyoInformationMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, koyoinformation.FieldName)
	}
	if m.description != nil {
		fields = append(fields, koyoinformation.FieldDescription)
	}
	if m.params != nil {
		fields = append(fields, koyoinformation.FieldParams)
	}
	if m.scales != nil {
		fields = append(fields, koyoinformation.FieldScales)
	}
	if m.version != nil {
		fields = append(fields, koyoinformation.FieldVersion)
	}
	if m.license != nil {
		fields = append(fields, koyoinformation.FieldLicense)
	}
	if m.data_type != nil {
		fields = append(fields, koyoinformation.FieldDataType)
	}
	if m.first_entry_at != nil {
		fields = append(fields, koyoinformation.FieldFirstEntryAt)
	}
	if m.last_entry_at != nil {
		fields = append(fields, koyoinformation.FieldLastEntryAt)
	}
	if m.updated_at != nil {
		fields = append(fields, koyoinformation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KoyoInformationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case koyoinformation.FieldName:
		return m.Name()
	case koyoinformation.FieldDescription:
		return m.Description()
	case koyoinformation.FieldParams:
		return m.Params()
	case koyoinformation.FieldScales:
		return m.Scales()
	case koyoinformation.FieldVersion:
		return m.Version()
	case koyoinformation.FieldLicense:
		return m.License()
	case koyoinformation.FieldDataType:
		return m.DataType()
	case koyoinformation.FieldFirstEntryAt:
		return m.FirstEntryAt()
	case koyoinformation.FieldLastEntryAt:
		return m.LastEntryAt()
	case koyoinformation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KoyoInformationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case koyoinformation.FieldName:
		return m.OldName(ctx)
	case koyoinformation.FieldDescription:
		return m.OldDescription(ctx)
	case koyoinformation.FieldParams:
		return m.OldParams(ctx)
	case koyoinformation.FieldScales:
		return m.OldScales(ctx)
	case koyoinformation.FieldVersion:
		return m.OldVersion(ctx)
	case koyoinformation.FieldLicense:
		return m.OldLicense(ctx)
	case koyoinformation.FieldDataType:
		return m.OldDataType(ctx)
	case koyoinformation.FieldFirstEntryAt:
		return m.OldFirstEntryAt(ctx)
	case koyoinformation.FieldLastEntryAt:
		return m.OldLastEntryAt(ctx)
	case koyoinformation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown KoyoInformation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KoyoInformationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case koyoinformation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case koyoinformation.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case koyoinformation.FieldParams:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case koyoinformation.FieldScales:
		v, ok := value.([]float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScales(v)
		return nil
	case koyoinformation.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case koyoinformation.FieldLicense:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLicense(v)
		return nil
	case koyoinformation.FieldDataType:
		v, ok := value.(koyoinformation.DataType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataType(v)
		return nil
	case koyoinformation.FieldFirstEntryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstEntryAt(v)
		return nil
	case koyoinformation.FieldLastEntryAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastEntryAt(v)
		return nil
	case koyoinformation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown KoyoInformation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KoyoInformationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KoyoInformationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KoyoInformationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown KoyoInformation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KoyoInformationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KoyoInformationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KoyoInformationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KoyoInformation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KoyoInformationMutation) ResetField(name string) error {
	switch name {
	case koyoinformation.FieldName:
		m.ResetName()
		return nil
	case koyoinformation.FieldDescription:
		m.ResetDescription()
		return nil
	case koyoinformation.FieldParams:
		m.ResetParams()
		return nil
	case koyoinformation.FieldScales:
		m.ResetScales()
		return nil
	case koyoinformation.FieldVersion:
		m.ResetVersion()
		return nil
	case koyoinformation.FieldLicense:
		m.ResetLicense()
		return nil
	case koyoinformation.FieldDataType:
		m.ResetDataType()
		return nil
	case koyoinformation.FieldFirstEntryAt:
		m.ResetFirstEntryAt()
		return nil
	case koyoinformation.FieldLastEntryAt:
		m.ResetLastEntryAt()
		return nil
	case koyoinformation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown KoyoInformation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KoyoInformationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.externals != nil {
		edges = append(edges, koyoinformation.EdgeExternals)
	}
	if m.data != nil {
		edges = append(edges, koyoinformation.EdgeData)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KoyoInformationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case koyoinformation.EdgeExternals:
		ids := make([]ent.Value, 0, len(m.externals))
		for id := range m.externals {
			ids = append(ids, id)
		}
		return ids
	case koyoinformation.EdgeData:
		ids := make([]ent.Value, 0, len(m.data))
		for id := range m.data {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KoyoInformationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedexternals != nil {
		edges = append(edges, koyoinformation.EdgeExternals)
	}
	if m.removeddata != nil {
		edges = append(edges, koyoinformation.EdgeData)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KoyoInformationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case koyoinformation.EdgeExternals:
		ids := make([]ent.Value, 0, len(m.removedexternals))
		for id := range m.removedexternals {
			ids = append(ids, id)
		}
		return ids
	case koyoinformation.EdgeData:
		ids := make([]ent.Value, 0, len(m.removeddata))
		for id := range m.removeddata {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KoyoInformationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedexternals {
		edges = append(edges, koyoinformation.EdgeExternals)
	}
	if m.cleareddata {
		edges = append(edges, koyoinformation.EdgeData)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KoyoInformationMutation) EdgeCleared(name string) bool {
	switch name {
	case koyoinformation.EdgeExternals:
		return m.clearedexternals
	case koyoinformation.EdgeData:
		return m.cleareddata
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KoyoInformationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown KoyoInformation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KoyoInformationMutation) ResetEdge(name string) error {
	switch name {
	case koyoinformation.EdgeExternals:
		m.ResetExternals()
		return nil
	case koyoinformation.EdgeData:
		m.ResetData()
		return nil
	}
	return fmt.Errorf("unknown KoyoInformation edge %s", name)
}

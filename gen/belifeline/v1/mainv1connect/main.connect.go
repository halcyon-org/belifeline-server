// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: belifeline/v1/main.proto

package mainv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/halcyon-org/kizuna/gen/belifeline/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerServiceName is the fully-qualified name of the ServerService service.
	ServerServiceName = "belifeline.v1.ServerService"
	// ProviderServiceName is the fully-qualified name of the ProviderService service.
	ProviderServiceName = "belifeline.v1.ProviderService"
	// ExtInfoServiceName is the fully-qualified name of the ExtInfoService service.
	ExtInfoServiceName = "belifeline.v1.ExtInfoService"
	// KoyoServiceName is the fully-qualified name of the KoyoService service.
	KoyoServiceName = "belifeline.v1.KoyoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerServiceHealthProcedure is the fully-qualified name of the ServerService's Health RPC.
	ServerServiceHealthProcedure = "/belifeline.v1.ServerService/Health"
	// ProviderServiceClientCreateProcedure is the fully-qualified name of the ProviderService's
	// ClientCreate RPC.
	ProviderServiceClientCreateProcedure = "/belifeline.v1.ProviderService/ClientCreate"
	// ProviderServiceClientListProcedure is the fully-qualified name of the ProviderService's
	// ClientList RPC.
	ProviderServiceClientListProcedure = "/belifeline.v1.ProviderService/ClientList"
	// ProviderServiceClientDeleteProcedure is the fully-qualified name of the ProviderService's
	// ClientDelete RPC.
	ProviderServiceClientDeleteProcedure = "/belifeline.v1.ProviderService/ClientDelete"
	// ProviderServiceClientRevokeProcedure is the fully-qualified name of the ProviderService's
	// ClientRevoke RPC.
	ProviderServiceClientRevokeProcedure = "/belifeline.v1.ProviderService/ClientRevoke"
	// ExtInfoServiceExtInfoCreateProcedure is the fully-qualified name of the ExtInfoService's
	// ExtInfoCreate RPC.
	ExtInfoServiceExtInfoCreateProcedure = "/belifeline.v1.ExtInfoService/ExtInfoCreate"
	// ExtInfoServiceExtInfoListProcedure is the fully-qualified name of the ExtInfoService's
	// ExtInfoList RPC.
	ExtInfoServiceExtInfoListProcedure = "/belifeline.v1.ExtInfoService/ExtInfoList"
	// ExtInfoServiceExtInfoDeleteProcedure is the fully-qualified name of the ExtInfoService's
	// ExtInfoDelete RPC.
	ExtInfoServiceExtInfoDeleteProcedure = "/belifeline.v1.ExtInfoService/ExtInfoDelete"
	// ExtInfoServiceExtInfoUpdateNotificationProcedure is the fully-qualified name of the
	// ExtInfoService's ExtInfoUpdateNotification RPC.
	ExtInfoServiceExtInfoUpdateNotificationProcedure = "/belifeline.v1.ExtInfoService/ExtInfoUpdateNotification"
	// KoyoServiceKoyoCreateProcedure is the fully-qualified name of the KoyoService's KoyoCreate RPC.
	KoyoServiceKoyoCreateProcedure = "/belifeline.v1.KoyoService/KoyoCreate"
	// KoyoServiceKoyoListProcedure is the fully-qualified name of the KoyoService's KoyoList RPC.
	KoyoServiceKoyoListProcedure = "/belifeline.v1.KoyoService/KoyoList"
	// KoyoServiceKoyoDeleteProcedure is the fully-qualified name of the KoyoService's KoyoDelete RPC.
	KoyoServiceKoyoDeleteProcedure = "/belifeline.v1.KoyoService/KoyoDelete"
	// KoyoServiceKoyoApiRevokeProcedure is the fully-qualified name of the KoyoService's KoyoApiRevoke
	// RPC.
	KoyoServiceKoyoApiRevokeProcedure = "/belifeline.v1.KoyoService/KoyoApiRevoke"
	// KoyoServiceKoyoDataAddProcedure is the fully-qualified name of the KoyoService's KoyoDataAdd RPC.
	KoyoServiceKoyoDataAddProcedure = "/belifeline.v1.KoyoService/KoyoDataAdd"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	serverServiceServiceDescriptor                          = v1.File_belifeline_v1_main_proto.Services().ByName("ServerService")
	serverServiceHealthMethodDescriptor                     = serverServiceServiceDescriptor.Methods().ByName("Health")
	providerServiceServiceDescriptor                        = v1.File_belifeline_v1_main_proto.Services().ByName("ProviderService")
	providerServiceClientCreateMethodDescriptor             = providerServiceServiceDescriptor.Methods().ByName("ClientCreate")
	providerServiceClientListMethodDescriptor               = providerServiceServiceDescriptor.Methods().ByName("ClientList")
	providerServiceClientDeleteMethodDescriptor             = providerServiceServiceDescriptor.Methods().ByName("ClientDelete")
	providerServiceClientRevokeMethodDescriptor             = providerServiceServiceDescriptor.Methods().ByName("ClientRevoke")
	extInfoServiceServiceDescriptor                         = v1.File_belifeline_v1_main_proto.Services().ByName("ExtInfoService")
	extInfoServiceExtInfoCreateMethodDescriptor             = extInfoServiceServiceDescriptor.Methods().ByName("ExtInfoCreate")
	extInfoServiceExtInfoListMethodDescriptor               = extInfoServiceServiceDescriptor.Methods().ByName("ExtInfoList")
	extInfoServiceExtInfoDeleteMethodDescriptor             = extInfoServiceServiceDescriptor.Methods().ByName("ExtInfoDelete")
	extInfoServiceExtInfoUpdateNotificationMethodDescriptor = extInfoServiceServiceDescriptor.Methods().ByName("ExtInfoUpdateNotification")
	koyoServiceServiceDescriptor                            = v1.File_belifeline_v1_main_proto.Services().ByName("KoyoService")
	koyoServiceKoyoCreateMethodDescriptor                   = koyoServiceServiceDescriptor.Methods().ByName("KoyoCreate")
	koyoServiceKoyoListMethodDescriptor                     = koyoServiceServiceDescriptor.Methods().ByName("KoyoList")
	koyoServiceKoyoDeleteMethodDescriptor                   = koyoServiceServiceDescriptor.Methods().ByName("KoyoDelete")
	koyoServiceKoyoApiRevokeMethodDescriptor                = koyoServiceServiceDescriptor.Methods().ByName("KoyoApiRevoke")
	koyoServiceKoyoDataAddMethodDescriptor                  = koyoServiceServiceDescriptor.Methods().ByName("KoyoDataAdd")
)

// ServerServiceClient is a client for the belifeline.v1.ServerService service.
type ServerServiceClient interface {
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewServerServiceClient constructs a client for the belifeline.v1.ServerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &serverServiceClient{
		health: connect.NewClient[v1.HealthRequest, v1.HealthResponse](
			httpClient,
			baseURL+ServerServiceHealthProcedure,
			connect.WithSchema(serverServiceHealthMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverServiceClient implements ServerServiceClient.
type serverServiceClient struct {
	health *connect.Client[v1.HealthRequest, v1.HealthResponse]
}

// Health calls belifeline.v1.ServerService.Health.
func (c *serverServiceClient) Health(ctx context.Context, req *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return c.health.CallUnary(ctx, req)
}

// ServerServiceHandler is an implementation of the belifeline.v1.ServerService service.
type ServerServiceHandler interface {
	Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error)
}

// NewServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerServiceHandler(svc ServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverServiceHealthHandler := connect.NewUnaryHandler(
		ServerServiceHealthProcedure,
		svc.Health,
		connect.WithSchema(serverServiceHealthMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/belifeline.v1.ServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerServiceHealthProcedure:
			serverServiceHealthHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerServiceHandler struct{}

func (UnimplementedServerServiceHandler) Health(context.Context, *connect.Request[v1.HealthRequest]) (*connect.Response[v1.HealthResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ServerService.Health is not implemented"))
}

// ProviderServiceClient is a client for the belifeline.v1.ProviderService service.
type ProviderServiceClient interface {
	ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error)
	ClientList(context.Context, *connect.Request[v1.ClientListRequest]) (*connect.ServerStreamForClient[v1.ClientListResponse], error)
	ClientDelete(context.Context, *connect.Request[v1.ClientDeleteRequest]) (*connect.Response[v1.ClientDeleteResponse], error)
	ClientRevoke(context.Context, *connect.Request[v1.ClientRevokeRequest]) (*connect.Response[v1.ClientRevokeResponse], error)
}

// NewProviderServiceClient constructs a client for the belifeline.v1.ProviderService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProviderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProviderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &providerServiceClient{
		clientCreate: connect.NewClient[v1.ClientCreateRequest, v1.ClientCreateResponse](
			httpClient,
			baseURL+ProviderServiceClientCreateProcedure,
			connect.WithSchema(providerServiceClientCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clientList: connect.NewClient[v1.ClientListRequest, v1.ClientListResponse](
			httpClient,
			baseURL+ProviderServiceClientListProcedure,
			connect.WithSchema(providerServiceClientListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clientDelete: connect.NewClient[v1.ClientDeleteRequest, v1.ClientDeleteResponse](
			httpClient,
			baseURL+ProviderServiceClientDeleteProcedure,
			connect.WithSchema(providerServiceClientDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clientRevoke: connect.NewClient[v1.ClientRevokeRequest, v1.ClientRevokeResponse](
			httpClient,
			baseURL+ProviderServiceClientRevokeProcedure,
			connect.WithSchema(providerServiceClientRevokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// providerServiceClient implements ProviderServiceClient.
type providerServiceClient struct {
	clientCreate *connect.Client[v1.ClientCreateRequest, v1.ClientCreateResponse]
	clientList   *connect.Client[v1.ClientListRequest, v1.ClientListResponse]
	clientDelete *connect.Client[v1.ClientDeleteRequest, v1.ClientDeleteResponse]
	clientRevoke *connect.Client[v1.ClientRevokeRequest, v1.ClientRevokeResponse]
}

// ClientCreate calls belifeline.v1.ProviderService.ClientCreate.
func (c *providerServiceClient) ClientCreate(ctx context.Context, req *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error) {
	return c.clientCreate.CallUnary(ctx, req)
}

// ClientList calls belifeline.v1.ProviderService.ClientList.
func (c *providerServiceClient) ClientList(ctx context.Context, req *connect.Request[v1.ClientListRequest]) (*connect.ServerStreamForClient[v1.ClientListResponse], error) {
	return c.clientList.CallServerStream(ctx, req)
}

// ClientDelete calls belifeline.v1.ProviderService.ClientDelete.
func (c *providerServiceClient) ClientDelete(ctx context.Context, req *connect.Request[v1.ClientDeleteRequest]) (*connect.Response[v1.ClientDeleteResponse], error) {
	return c.clientDelete.CallUnary(ctx, req)
}

// ClientRevoke calls belifeline.v1.ProviderService.ClientRevoke.
func (c *providerServiceClient) ClientRevoke(ctx context.Context, req *connect.Request[v1.ClientRevokeRequest]) (*connect.Response[v1.ClientRevokeResponse], error) {
	return c.clientRevoke.CallUnary(ctx, req)
}

// ProviderServiceHandler is an implementation of the belifeline.v1.ProviderService service.
type ProviderServiceHandler interface {
	ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error)
	ClientList(context.Context, *connect.Request[v1.ClientListRequest], *connect.ServerStream[v1.ClientListResponse]) error
	ClientDelete(context.Context, *connect.Request[v1.ClientDeleteRequest]) (*connect.Response[v1.ClientDeleteResponse], error)
	ClientRevoke(context.Context, *connect.Request[v1.ClientRevokeRequest]) (*connect.Response[v1.ClientRevokeResponse], error)
}

// NewProviderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProviderServiceHandler(svc ProviderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	providerServiceClientCreateHandler := connect.NewUnaryHandler(
		ProviderServiceClientCreateProcedure,
		svc.ClientCreate,
		connect.WithSchema(providerServiceClientCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceClientListHandler := connect.NewServerStreamHandler(
		ProviderServiceClientListProcedure,
		svc.ClientList,
		connect.WithSchema(providerServiceClientListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceClientDeleteHandler := connect.NewUnaryHandler(
		ProviderServiceClientDeleteProcedure,
		svc.ClientDelete,
		connect.WithSchema(providerServiceClientDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	providerServiceClientRevokeHandler := connect.NewUnaryHandler(
		ProviderServiceClientRevokeProcedure,
		svc.ClientRevoke,
		connect.WithSchema(providerServiceClientRevokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/belifeline.v1.ProviderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProviderServiceClientCreateProcedure:
			providerServiceClientCreateHandler.ServeHTTP(w, r)
		case ProviderServiceClientListProcedure:
			providerServiceClientListHandler.ServeHTTP(w, r)
		case ProviderServiceClientDeleteProcedure:
			providerServiceClientDeleteHandler.ServeHTTP(w, r)
		case ProviderServiceClientRevokeProcedure:
			providerServiceClientRevokeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProviderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProviderServiceHandler struct{}

func (UnimplementedProviderServiceHandler) ClientCreate(context.Context, *connect.Request[v1.ClientCreateRequest]) (*connect.Response[v1.ClientCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ProviderService.ClientCreate is not implemented"))
}

func (UnimplementedProviderServiceHandler) ClientList(context.Context, *connect.Request[v1.ClientListRequest], *connect.ServerStream[v1.ClientListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ProviderService.ClientList is not implemented"))
}

func (UnimplementedProviderServiceHandler) ClientDelete(context.Context, *connect.Request[v1.ClientDeleteRequest]) (*connect.Response[v1.ClientDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ProviderService.ClientDelete is not implemented"))
}

func (UnimplementedProviderServiceHandler) ClientRevoke(context.Context, *connect.Request[v1.ClientRevokeRequest]) (*connect.Response[v1.ClientRevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ProviderService.ClientRevoke is not implemented"))
}

// ExtInfoServiceClient is a client for the belifeline.v1.ExtInfoService service.
type ExtInfoServiceClient interface {
	ExtInfoCreate(context.Context, *connect.Request[v1.ExtInfoCreateRequest]) (*connect.Response[v1.ExtInfoCreateResponse], error)
	ExtInfoList(context.Context, *connect.Request[v1.ExtInfoListRequest]) (*connect.ServerStreamForClient[v1.ExtInfoListResponse], error)
	ExtInfoDelete(context.Context, *connect.Request[v1.ExtInfoDeleteRequest]) (*connect.Response[v1.ExtInfoDeleteResponse], error)
	ExtInfoUpdateNotification(context.Context, *connect.Request[v1.ExtInfoUpdateNotificationRequest]) (*connect.Response[v1.ExtInfoUpdateNotificationResponse], error)
}

// NewExtInfoServiceClient constructs a client for the belifeline.v1.ExtInfoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExtInfoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExtInfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &extInfoServiceClient{
		extInfoCreate: connect.NewClient[v1.ExtInfoCreateRequest, v1.ExtInfoCreateResponse](
			httpClient,
			baseURL+ExtInfoServiceExtInfoCreateProcedure,
			connect.WithSchema(extInfoServiceExtInfoCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		extInfoList: connect.NewClient[v1.ExtInfoListRequest, v1.ExtInfoListResponse](
			httpClient,
			baseURL+ExtInfoServiceExtInfoListProcedure,
			connect.WithSchema(extInfoServiceExtInfoListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		extInfoDelete: connect.NewClient[v1.ExtInfoDeleteRequest, v1.ExtInfoDeleteResponse](
			httpClient,
			baseURL+ExtInfoServiceExtInfoDeleteProcedure,
			connect.WithSchema(extInfoServiceExtInfoDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		extInfoUpdateNotification: connect.NewClient[v1.ExtInfoUpdateNotificationRequest, v1.ExtInfoUpdateNotificationResponse](
			httpClient,
			baseURL+ExtInfoServiceExtInfoUpdateNotificationProcedure,
			connect.WithSchema(extInfoServiceExtInfoUpdateNotificationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// extInfoServiceClient implements ExtInfoServiceClient.
type extInfoServiceClient struct {
	extInfoCreate             *connect.Client[v1.ExtInfoCreateRequest, v1.ExtInfoCreateResponse]
	extInfoList               *connect.Client[v1.ExtInfoListRequest, v1.ExtInfoListResponse]
	extInfoDelete             *connect.Client[v1.ExtInfoDeleteRequest, v1.ExtInfoDeleteResponse]
	extInfoUpdateNotification *connect.Client[v1.ExtInfoUpdateNotificationRequest, v1.ExtInfoUpdateNotificationResponse]
}

// ExtInfoCreate calls belifeline.v1.ExtInfoService.ExtInfoCreate.
func (c *extInfoServiceClient) ExtInfoCreate(ctx context.Context, req *connect.Request[v1.ExtInfoCreateRequest]) (*connect.Response[v1.ExtInfoCreateResponse], error) {
	return c.extInfoCreate.CallUnary(ctx, req)
}

// ExtInfoList calls belifeline.v1.ExtInfoService.ExtInfoList.
func (c *extInfoServiceClient) ExtInfoList(ctx context.Context, req *connect.Request[v1.ExtInfoListRequest]) (*connect.ServerStreamForClient[v1.ExtInfoListResponse], error) {
	return c.extInfoList.CallServerStream(ctx, req)
}

// ExtInfoDelete calls belifeline.v1.ExtInfoService.ExtInfoDelete.
func (c *extInfoServiceClient) ExtInfoDelete(ctx context.Context, req *connect.Request[v1.ExtInfoDeleteRequest]) (*connect.Response[v1.ExtInfoDeleteResponse], error) {
	return c.extInfoDelete.CallUnary(ctx, req)
}

// ExtInfoUpdateNotification calls belifeline.v1.ExtInfoService.ExtInfoUpdateNotification.
func (c *extInfoServiceClient) ExtInfoUpdateNotification(ctx context.Context, req *connect.Request[v1.ExtInfoUpdateNotificationRequest]) (*connect.Response[v1.ExtInfoUpdateNotificationResponse], error) {
	return c.extInfoUpdateNotification.CallUnary(ctx, req)
}

// ExtInfoServiceHandler is an implementation of the belifeline.v1.ExtInfoService service.
type ExtInfoServiceHandler interface {
	ExtInfoCreate(context.Context, *connect.Request[v1.ExtInfoCreateRequest]) (*connect.Response[v1.ExtInfoCreateResponse], error)
	ExtInfoList(context.Context, *connect.Request[v1.ExtInfoListRequest], *connect.ServerStream[v1.ExtInfoListResponse]) error
	ExtInfoDelete(context.Context, *connect.Request[v1.ExtInfoDeleteRequest]) (*connect.Response[v1.ExtInfoDeleteResponse], error)
	ExtInfoUpdateNotification(context.Context, *connect.Request[v1.ExtInfoUpdateNotificationRequest]) (*connect.Response[v1.ExtInfoUpdateNotificationResponse], error)
}

// NewExtInfoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExtInfoServiceHandler(svc ExtInfoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	extInfoServiceExtInfoCreateHandler := connect.NewUnaryHandler(
		ExtInfoServiceExtInfoCreateProcedure,
		svc.ExtInfoCreate,
		connect.WithSchema(extInfoServiceExtInfoCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	extInfoServiceExtInfoListHandler := connect.NewServerStreamHandler(
		ExtInfoServiceExtInfoListProcedure,
		svc.ExtInfoList,
		connect.WithSchema(extInfoServiceExtInfoListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	extInfoServiceExtInfoDeleteHandler := connect.NewUnaryHandler(
		ExtInfoServiceExtInfoDeleteProcedure,
		svc.ExtInfoDelete,
		connect.WithSchema(extInfoServiceExtInfoDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	extInfoServiceExtInfoUpdateNotificationHandler := connect.NewUnaryHandler(
		ExtInfoServiceExtInfoUpdateNotificationProcedure,
		svc.ExtInfoUpdateNotification,
		connect.WithSchema(extInfoServiceExtInfoUpdateNotificationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/belifeline.v1.ExtInfoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExtInfoServiceExtInfoCreateProcedure:
			extInfoServiceExtInfoCreateHandler.ServeHTTP(w, r)
		case ExtInfoServiceExtInfoListProcedure:
			extInfoServiceExtInfoListHandler.ServeHTTP(w, r)
		case ExtInfoServiceExtInfoDeleteProcedure:
			extInfoServiceExtInfoDeleteHandler.ServeHTTP(w, r)
		case ExtInfoServiceExtInfoUpdateNotificationProcedure:
			extInfoServiceExtInfoUpdateNotificationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExtInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExtInfoServiceHandler struct{}

func (UnimplementedExtInfoServiceHandler) ExtInfoCreate(context.Context, *connect.Request[v1.ExtInfoCreateRequest]) (*connect.Response[v1.ExtInfoCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ExtInfoService.ExtInfoCreate is not implemented"))
}

func (UnimplementedExtInfoServiceHandler) ExtInfoList(context.Context, *connect.Request[v1.ExtInfoListRequest], *connect.ServerStream[v1.ExtInfoListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ExtInfoService.ExtInfoList is not implemented"))
}

func (UnimplementedExtInfoServiceHandler) ExtInfoDelete(context.Context, *connect.Request[v1.ExtInfoDeleteRequest]) (*connect.Response[v1.ExtInfoDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ExtInfoService.ExtInfoDelete is not implemented"))
}

func (UnimplementedExtInfoServiceHandler) ExtInfoUpdateNotification(context.Context, *connect.Request[v1.ExtInfoUpdateNotificationRequest]) (*connect.Response[v1.ExtInfoUpdateNotificationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.ExtInfoService.ExtInfoUpdateNotification is not implemented"))
}

// KoyoServiceClient is a client for the belifeline.v1.KoyoService service.
type KoyoServiceClient interface {
	KoyoCreate(context.Context, *connect.Request[v1.KoyoCreateRequest]) (*connect.Response[v1.KoyoCreateResponse], error)
	KoyoList(context.Context, *connect.Request[v1.KoyoListRequest]) (*connect.ServerStreamForClient[v1.KoyoListResponse], error)
	KoyoDelete(context.Context, *connect.Request[v1.KoyoDeleteRequest]) (*connect.Response[v1.KoyoDeleteResponse], error)
	KoyoApiRevoke(context.Context, *connect.Request[v1.KoyoApiRevokeRequest]) (*connect.Response[v1.KoyoApiRevokeResponse], error)
	KoyoDataAdd(context.Context, *connect.Request[v1.KoyoDataAddRequest]) (*connect.Response[v1.KoyoDataAddResponse], error)
}

// NewKoyoServiceClient constructs a client for the belifeline.v1.KoyoService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKoyoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KoyoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &koyoServiceClient{
		koyoCreate: connect.NewClient[v1.KoyoCreateRequest, v1.KoyoCreateResponse](
			httpClient,
			baseURL+KoyoServiceKoyoCreateProcedure,
			connect.WithSchema(koyoServiceKoyoCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		koyoList: connect.NewClient[v1.KoyoListRequest, v1.KoyoListResponse](
			httpClient,
			baseURL+KoyoServiceKoyoListProcedure,
			connect.WithSchema(koyoServiceKoyoListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		koyoDelete: connect.NewClient[v1.KoyoDeleteRequest, v1.KoyoDeleteResponse](
			httpClient,
			baseURL+KoyoServiceKoyoDeleteProcedure,
			connect.WithSchema(koyoServiceKoyoDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		koyoApiRevoke: connect.NewClient[v1.KoyoApiRevokeRequest, v1.KoyoApiRevokeResponse](
			httpClient,
			baseURL+KoyoServiceKoyoApiRevokeProcedure,
			connect.WithSchema(koyoServiceKoyoApiRevokeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		koyoDataAdd: connect.NewClient[v1.KoyoDataAddRequest, v1.KoyoDataAddResponse](
			httpClient,
			baseURL+KoyoServiceKoyoDataAddProcedure,
			connect.WithSchema(koyoServiceKoyoDataAddMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// koyoServiceClient implements KoyoServiceClient.
type koyoServiceClient struct {
	koyoCreate    *connect.Client[v1.KoyoCreateRequest, v1.KoyoCreateResponse]
	koyoList      *connect.Client[v1.KoyoListRequest, v1.KoyoListResponse]
	koyoDelete    *connect.Client[v1.KoyoDeleteRequest, v1.KoyoDeleteResponse]
	koyoApiRevoke *connect.Client[v1.KoyoApiRevokeRequest, v1.KoyoApiRevokeResponse]
	koyoDataAdd   *connect.Client[v1.KoyoDataAddRequest, v1.KoyoDataAddResponse]
}

// KoyoCreate calls belifeline.v1.KoyoService.KoyoCreate.
func (c *koyoServiceClient) KoyoCreate(ctx context.Context, req *connect.Request[v1.KoyoCreateRequest]) (*connect.Response[v1.KoyoCreateResponse], error) {
	return c.koyoCreate.CallUnary(ctx, req)
}

// KoyoList calls belifeline.v1.KoyoService.KoyoList.
func (c *koyoServiceClient) KoyoList(ctx context.Context, req *connect.Request[v1.KoyoListRequest]) (*connect.ServerStreamForClient[v1.KoyoListResponse], error) {
	return c.koyoList.CallServerStream(ctx, req)
}

// KoyoDelete calls belifeline.v1.KoyoService.KoyoDelete.
func (c *koyoServiceClient) KoyoDelete(ctx context.Context, req *connect.Request[v1.KoyoDeleteRequest]) (*connect.Response[v1.KoyoDeleteResponse], error) {
	return c.koyoDelete.CallUnary(ctx, req)
}

// KoyoApiRevoke calls belifeline.v1.KoyoService.KoyoApiRevoke.
func (c *koyoServiceClient) KoyoApiRevoke(ctx context.Context, req *connect.Request[v1.KoyoApiRevokeRequest]) (*connect.Response[v1.KoyoApiRevokeResponse], error) {
	return c.koyoApiRevoke.CallUnary(ctx, req)
}

// KoyoDataAdd calls belifeline.v1.KoyoService.KoyoDataAdd.
func (c *koyoServiceClient) KoyoDataAdd(ctx context.Context, req *connect.Request[v1.KoyoDataAddRequest]) (*connect.Response[v1.KoyoDataAddResponse], error) {
	return c.koyoDataAdd.CallUnary(ctx, req)
}

// KoyoServiceHandler is an implementation of the belifeline.v1.KoyoService service.
type KoyoServiceHandler interface {
	KoyoCreate(context.Context, *connect.Request[v1.KoyoCreateRequest]) (*connect.Response[v1.KoyoCreateResponse], error)
	KoyoList(context.Context, *connect.Request[v1.KoyoListRequest], *connect.ServerStream[v1.KoyoListResponse]) error
	KoyoDelete(context.Context, *connect.Request[v1.KoyoDeleteRequest]) (*connect.Response[v1.KoyoDeleteResponse], error)
	KoyoApiRevoke(context.Context, *connect.Request[v1.KoyoApiRevokeRequest]) (*connect.Response[v1.KoyoApiRevokeResponse], error)
	KoyoDataAdd(context.Context, *connect.Request[v1.KoyoDataAddRequest]) (*connect.Response[v1.KoyoDataAddResponse], error)
}

// NewKoyoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKoyoServiceHandler(svc KoyoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	koyoServiceKoyoCreateHandler := connect.NewUnaryHandler(
		KoyoServiceKoyoCreateProcedure,
		svc.KoyoCreate,
		connect.WithSchema(koyoServiceKoyoCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	koyoServiceKoyoListHandler := connect.NewServerStreamHandler(
		KoyoServiceKoyoListProcedure,
		svc.KoyoList,
		connect.WithSchema(koyoServiceKoyoListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	koyoServiceKoyoDeleteHandler := connect.NewUnaryHandler(
		KoyoServiceKoyoDeleteProcedure,
		svc.KoyoDelete,
		connect.WithSchema(koyoServiceKoyoDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	koyoServiceKoyoApiRevokeHandler := connect.NewUnaryHandler(
		KoyoServiceKoyoApiRevokeProcedure,
		svc.KoyoApiRevoke,
		connect.WithSchema(koyoServiceKoyoApiRevokeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	koyoServiceKoyoDataAddHandler := connect.NewUnaryHandler(
		KoyoServiceKoyoDataAddProcedure,
		svc.KoyoDataAdd,
		connect.WithSchema(koyoServiceKoyoDataAddMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/belifeline.v1.KoyoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KoyoServiceKoyoCreateProcedure:
			koyoServiceKoyoCreateHandler.ServeHTTP(w, r)
		case KoyoServiceKoyoListProcedure:
			koyoServiceKoyoListHandler.ServeHTTP(w, r)
		case KoyoServiceKoyoDeleteProcedure:
			koyoServiceKoyoDeleteHandler.ServeHTTP(w, r)
		case KoyoServiceKoyoApiRevokeProcedure:
			koyoServiceKoyoApiRevokeHandler.ServeHTTP(w, r)
		case KoyoServiceKoyoDataAddProcedure:
			koyoServiceKoyoDataAddHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKoyoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKoyoServiceHandler struct{}

func (UnimplementedKoyoServiceHandler) KoyoCreate(context.Context, *connect.Request[v1.KoyoCreateRequest]) (*connect.Response[v1.KoyoCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.KoyoService.KoyoCreate is not implemented"))
}

func (UnimplementedKoyoServiceHandler) KoyoList(context.Context, *connect.Request[v1.KoyoListRequest], *connect.ServerStream[v1.KoyoListResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.KoyoService.KoyoList is not implemented"))
}

func (UnimplementedKoyoServiceHandler) KoyoDelete(context.Context, *connect.Request[v1.KoyoDeleteRequest]) (*connect.Response[v1.KoyoDeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.KoyoService.KoyoDelete is not implemented"))
}

func (UnimplementedKoyoServiceHandler) KoyoApiRevoke(context.Context, *connect.Request[v1.KoyoApiRevokeRequest]) (*connect.Response[v1.KoyoApiRevokeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.KoyoService.KoyoApiRevoke is not implemented"))
}

func (UnimplementedKoyoServiceHandler) KoyoDataAdd(context.Context, *connect.Request[v1.KoyoDataAddRequest]) (*connect.Response[v1.KoyoDataAddResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("belifeline.v1.KoyoService.KoyoDataAdd is not implemented"))
}

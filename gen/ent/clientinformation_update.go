// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/gen/ent/clientinformation"
	"github.com/halcyon-org/kizuna/gen/ent/predicate"
)

// ClientInformationUpdate is the builder for updating ClientInformation entities.
type ClientInformationUpdate struct {
	config
	hooks    []Hook
	mutation *ClientInformationMutation
}

// Where appends a list predicates to the ClientInformationUpdate builder.
func (ciu *ClientInformationUpdate) Where(ps ...predicate.ClientInformation) *ClientInformationUpdate {
	ciu.mutation.Where(ps...)
	return ciu
}

// SetUsername sets the "username" field.
func (ciu *ClientInformationUpdate) SetUsername(s string) *ClientInformationUpdate {
	ciu.mutation.SetUsername(s)
	return ciu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ciu *ClientInformationUpdate) SetNillableUsername(s *string) *ClientInformationUpdate {
	if s != nil {
		ciu.SetUsername(*s)
	}
	return ciu
}

// SetAPIKey sets the "api_key" field.
func (ciu *ClientInformationUpdate) SetAPIKey(s string) *ClientInformationUpdate {
	ciu.mutation.SetAPIKey(s)
	return ciu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (ciu *ClientInformationUpdate) SetNillableAPIKey(s *string) *ClientInformationUpdate {
	if s != nil {
		ciu.SetAPIKey(*s)
	}
	return ciu
}

// SetLastUsedAt sets the "last_used_at" field.
func (ciu *ClientInformationUpdate) SetLastUsedAt(t time.Time) *ClientInformationUpdate {
	ciu.mutation.SetLastUsedAt(t)
	return ciu
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (ciu *ClientInformationUpdate) SetNillableLastUsedAt(t *time.Time) *ClientInformationUpdate {
	if t != nil {
		ciu.SetLastUsedAt(*t)
	}
	return ciu
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (ciu *ClientInformationUpdate) SetLastUpdatedAt(t time.Time) *ClientInformationUpdate {
	ciu.mutation.SetLastUpdatedAt(t)
	return ciu
}

// Mutation returns the ClientInformationMutation object of the builder.
func (ciu *ClientInformationUpdate) Mutation() *ClientInformationMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ciu *ClientInformationUpdate) Save(ctx context.Context) (int, error) {
	ciu.defaults()
	return withHooks(ctx, ciu.sqlSave, ciu.mutation, ciu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *ClientInformationUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *ClientInformationUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *ClientInformationUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciu *ClientInformationUpdate) defaults() {
	if _, ok := ciu.mutation.LastUpdatedAt(); !ok {
		v := clientinformation.UpdateDefaultLastUpdatedAt()
		ciu.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciu *ClientInformationUpdate) check() error {
	if v, ok := ciu.mutation.Username(); ok {
		if err := clientinformation.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "ClientInformation.username": %w`, err)}
		}
	}
	return nil
}

func (ciu *ClientInformationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ciu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientinformation.Table, clientinformation.Columns, sqlgraph.NewFieldSpec(clientinformation.FieldID, field.TypeString))
	if ps := ciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.Username(); ok {
		_spec.SetField(clientinformation.FieldUsername, field.TypeString, value)
	}
	if value, ok := ciu.mutation.APIKey(); ok {
		_spec.SetField(clientinformation.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := ciu.mutation.LastUsedAt(); ok {
		_spec.SetField(clientinformation.FieldLastUsedAt, field.TypeTime, value)
	}
	if value, ok := ciu.mutation.LastUpdatedAt(); ok {
		_spec.SetField(clientinformation.FieldLastUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ciu.mutation.done = true
	return n, nil
}

// ClientInformationUpdateOne is the builder for updating a single ClientInformation entity.
type ClientInformationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientInformationMutation
}

// SetUsername sets the "username" field.
func (ciuo *ClientInformationUpdateOne) SetUsername(s string) *ClientInformationUpdateOne {
	ciuo.mutation.SetUsername(s)
	return ciuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (ciuo *ClientInformationUpdateOne) SetNillableUsername(s *string) *ClientInformationUpdateOne {
	if s != nil {
		ciuo.SetUsername(*s)
	}
	return ciuo
}

// SetAPIKey sets the "api_key" field.
func (ciuo *ClientInformationUpdateOne) SetAPIKey(s string) *ClientInformationUpdateOne {
	ciuo.mutation.SetAPIKey(s)
	return ciuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (ciuo *ClientInformationUpdateOne) SetNillableAPIKey(s *string) *ClientInformationUpdateOne {
	if s != nil {
		ciuo.SetAPIKey(*s)
	}
	return ciuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (ciuo *ClientInformationUpdateOne) SetLastUsedAt(t time.Time) *ClientInformationUpdateOne {
	ciuo.mutation.SetLastUsedAt(t)
	return ciuo
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (ciuo *ClientInformationUpdateOne) SetNillableLastUsedAt(t *time.Time) *ClientInformationUpdateOne {
	if t != nil {
		ciuo.SetLastUsedAt(*t)
	}
	return ciuo
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (ciuo *ClientInformationUpdateOne) SetLastUpdatedAt(t time.Time) *ClientInformationUpdateOne {
	ciuo.mutation.SetLastUpdatedAt(t)
	return ciuo
}

// Mutation returns the ClientInformationMutation object of the builder.
func (ciuo *ClientInformationUpdateOne) Mutation() *ClientInformationMutation {
	return ciuo.mutation
}

// Where appends a list predicates to the ClientInformationUpdate builder.
func (ciuo *ClientInformationUpdateOne) Where(ps ...predicate.ClientInformation) *ClientInformationUpdateOne {
	ciuo.mutation.Where(ps...)
	return ciuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ciuo *ClientInformationUpdateOne) Select(field string, fields ...string) *ClientInformationUpdateOne {
	ciuo.fields = append([]string{field}, fields...)
	return ciuo
}

// Save executes the query and returns the updated ClientInformation entity.
func (ciuo *ClientInformationUpdateOne) Save(ctx context.Context) (*ClientInformation, error) {
	ciuo.defaults()
	return withHooks(ctx, ciuo.sqlSave, ciuo.mutation, ciuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *ClientInformationUpdateOne) SaveX(ctx context.Context) *ClientInformation {
	node, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ciuo *ClientInformationUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *ClientInformationUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ciuo *ClientInformationUpdateOne) defaults() {
	if _, ok := ciuo.mutation.LastUpdatedAt(); !ok {
		v := clientinformation.UpdateDefaultLastUpdatedAt()
		ciuo.mutation.SetLastUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ciuo *ClientInformationUpdateOne) check() error {
	if v, ok := ciuo.mutation.Username(); ok {
		if err := clientinformation.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "ClientInformation.username": %w`, err)}
		}
	}
	return nil
}

func (ciuo *ClientInformationUpdateOne) sqlSave(ctx context.Context) (_node *ClientInformation, err error) {
	if err := ciuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(clientinformation.Table, clientinformation.Columns, sqlgraph.NewFieldSpec(clientinformation.FieldID, field.TypeString))
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClientInformation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clientinformation.FieldID)
		for _, f := range fields {
			if !clientinformation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clientinformation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciuo.mutation.Username(); ok {
		_spec.SetField(clientinformation.FieldUsername, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.APIKey(); ok {
		_spec.SetField(clientinformation.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := ciuo.mutation.LastUsedAt(); ok {
		_spec.SetField(clientinformation.FieldLastUsedAt, field.TypeTime, value)
	}
	if value, ok := ciuo.mutation.LastUpdatedAt(); ok {
		_spec.SetField(clientinformation.FieldLastUpdatedAt, field.TypeTime, value)
	}
	_node = &ClientInformation{config: ciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clientinformation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ciuo.mutation.done = true
	return _node, nil
}

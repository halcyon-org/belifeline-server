// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
	"github.com/halcyon-org/kizuna/gen/ent/koyodata"
	"github.com/halcyon-org/kizuna/gen/ent/predicate"
)

// KoyoDataUpdate is the builder for updating KoyoData entities.
type KoyoDataUpdate struct {
	config
	hooks    []Hook
	mutation *KoyoDataMutation
}

// Where appends a list predicates to the KoyoDataUpdate builder.
func (kdu *KoyoDataUpdate) Where(ps ...predicate.KoyoData) *KoyoDataUpdate {
	kdu.mutation.Where(ps...)
	return kdu
}

// SetKoyoID sets the "koyo_id" field.
func (kdu *KoyoDataUpdate) SetKoyoID(pu pulid.ID) *KoyoDataUpdate {
	kdu.mutation.SetKoyoID(pu)
	return kdu
}

// SetNillableKoyoID sets the "koyo_id" field if the given value is not nil.
func (kdu *KoyoDataUpdate) SetNillableKoyoID(pu *pulid.ID) *KoyoDataUpdate {
	if pu != nil {
		kdu.SetKoyoID(*pu)
	}
	return kdu
}

// SetScale sets the "scale" field.
func (kdu *KoyoDataUpdate) SetScale(f float64) *KoyoDataUpdate {
	kdu.mutation.ResetScale()
	kdu.mutation.SetScale(f)
	return kdu
}

// SetNillableScale sets the "scale" field if the given value is not nil.
func (kdu *KoyoDataUpdate) SetNillableScale(f *float64) *KoyoDataUpdate {
	if f != nil {
		kdu.SetScale(*f)
	}
	return kdu
}

// AddScale adds f to the "scale" field.
func (kdu *KoyoDataUpdate) AddScale(f float64) *KoyoDataUpdate {
	kdu.mutation.AddScale(f)
	return kdu
}

// SetParams sets the "params" field.
func (kdu *KoyoDataUpdate) SetParams(m map[string]string) *KoyoDataUpdate {
	kdu.mutation.SetParams(m)
	return kdu
}

// SetVersion sets the "version" field.
func (kdu *KoyoDataUpdate) SetVersion(s string) *KoyoDataUpdate {
	kdu.mutation.SetVersion(s)
	return kdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (kdu *KoyoDataUpdate) SetNillableVersion(s *string) *KoyoDataUpdate {
	if s != nil {
		kdu.SetVersion(*s)
	}
	return kdu
}

// Mutation returns the KoyoDataMutation object of the builder.
func (kdu *KoyoDataUpdate) Mutation() *KoyoDataMutation {
	return kdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (kdu *KoyoDataUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, kdu.sqlSave, kdu.mutation, kdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kdu *KoyoDataUpdate) SaveX(ctx context.Context) int {
	affected, err := kdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (kdu *KoyoDataUpdate) Exec(ctx context.Context) error {
	_, err := kdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kdu *KoyoDataUpdate) ExecX(ctx context.Context) {
	if err := kdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kdu *KoyoDataUpdate) check() error {
	if v, ok := kdu.mutation.Version(); ok {
		if err := koyodata.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "KoyoData.version": %w`, err)}
		}
	}
	return nil
}

func (kdu *KoyoDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := kdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(koyodata.Table, koyodata.Columns, sqlgraph.NewFieldSpec(koyodata.FieldID, field.TypeString))
	if ps := kdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kdu.mutation.KoyoID(); ok {
		_spec.SetField(koyodata.FieldKoyoID, field.TypeString, value)
	}
	if value, ok := kdu.mutation.Scale(); ok {
		_spec.SetField(koyodata.FieldScale, field.TypeFloat64, value)
	}
	if value, ok := kdu.mutation.AddedScale(); ok {
		_spec.AddField(koyodata.FieldScale, field.TypeFloat64, value)
	}
	if value, ok := kdu.mutation.Params(); ok {
		_spec.SetField(koyodata.FieldParams, field.TypeJSON, value)
	}
	if value, ok := kdu.mutation.Version(); ok {
		_spec.SetField(koyodata.FieldVersion, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, kdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{koyodata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	kdu.mutation.done = true
	return n, nil
}

// KoyoDataUpdateOne is the builder for updating a single KoyoData entity.
type KoyoDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KoyoDataMutation
}

// SetKoyoID sets the "koyo_id" field.
func (kduo *KoyoDataUpdateOne) SetKoyoID(pu pulid.ID) *KoyoDataUpdateOne {
	kduo.mutation.SetKoyoID(pu)
	return kduo
}

// SetNillableKoyoID sets the "koyo_id" field if the given value is not nil.
func (kduo *KoyoDataUpdateOne) SetNillableKoyoID(pu *pulid.ID) *KoyoDataUpdateOne {
	if pu != nil {
		kduo.SetKoyoID(*pu)
	}
	return kduo
}

// SetScale sets the "scale" field.
func (kduo *KoyoDataUpdateOne) SetScale(f float64) *KoyoDataUpdateOne {
	kduo.mutation.ResetScale()
	kduo.mutation.SetScale(f)
	return kduo
}

// SetNillableScale sets the "scale" field if the given value is not nil.
func (kduo *KoyoDataUpdateOne) SetNillableScale(f *float64) *KoyoDataUpdateOne {
	if f != nil {
		kduo.SetScale(*f)
	}
	return kduo
}

// AddScale adds f to the "scale" field.
func (kduo *KoyoDataUpdateOne) AddScale(f float64) *KoyoDataUpdateOne {
	kduo.mutation.AddScale(f)
	return kduo
}

// SetParams sets the "params" field.
func (kduo *KoyoDataUpdateOne) SetParams(m map[string]string) *KoyoDataUpdateOne {
	kduo.mutation.SetParams(m)
	return kduo
}

// SetVersion sets the "version" field.
func (kduo *KoyoDataUpdateOne) SetVersion(s string) *KoyoDataUpdateOne {
	kduo.mutation.SetVersion(s)
	return kduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (kduo *KoyoDataUpdateOne) SetNillableVersion(s *string) *KoyoDataUpdateOne {
	if s != nil {
		kduo.SetVersion(*s)
	}
	return kduo
}

// Mutation returns the KoyoDataMutation object of the builder.
func (kduo *KoyoDataUpdateOne) Mutation() *KoyoDataMutation {
	return kduo.mutation
}

// Where appends a list predicates to the KoyoDataUpdate builder.
func (kduo *KoyoDataUpdateOne) Where(ps ...predicate.KoyoData) *KoyoDataUpdateOne {
	kduo.mutation.Where(ps...)
	return kduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kduo *KoyoDataUpdateOne) Select(field string, fields ...string) *KoyoDataUpdateOne {
	kduo.fields = append([]string{field}, fields...)
	return kduo
}

// Save executes the query and returns the updated KoyoData entity.
func (kduo *KoyoDataUpdateOne) Save(ctx context.Context) (*KoyoData, error) {
	return withHooks(ctx, kduo.sqlSave, kduo.mutation, kduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kduo *KoyoDataUpdateOne) SaveX(ctx context.Context) *KoyoData {
	node, err := kduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kduo *KoyoDataUpdateOne) Exec(ctx context.Context) error {
	_, err := kduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kduo *KoyoDataUpdateOne) ExecX(ctx context.Context) {
	if err := kduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kduo *KoyoDataUpdateOne) check() error {
	if v, ok := kduo.mutation.Version(); ok {
		if err := koyodata.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "KoyoData.version": %w`, err)}
		}
	}
	return nil
}

func (kduo *KoyoDataUpdateOne) sqlSave(ctx context.Context) (_node *KoyoData, err error) {
	if err := kduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(koyodata.Table, koyodata.Columns, sqlgraph.NewFieldSpec(koyodata.FieldID, field.TypeString))
	id, ok := kduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "KoyoData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, koyodata.FieldID)
		for _, f := range fields {
			if !koyodata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != koyodata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kduo.mutation.KoyoID(); ok {
		_spec.SetField(koyodata.FieldKoyoID, field.TypeString, value)
	}
	if value, ok := kduo.mutation.Scale(); ok {
		_spec.SetField(koyodata.FieldScale, field.TypeFloat64, value)
	}
	if value, ok := kduo.mutation.AddedScale(); ok {
		_spec.AddField(koyodata.FieldScale, field.TypeFloat64, value)
	}
	if value, ok := kduo.mutation.Params(); ok {
		_spec.SetField(koyodata.FieldParams, field.TypeJSON, value)
	}
	if value, ok := kduo.mutation.Version(); ok {
		_spec.SetField(koyodata.FieldVersion, field.TypeString, value)
	}
	_node = &KoyoData{config: kduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{koyodata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kduo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
	"github.com/halcyon-org/kizuna/gen/ent/koyodata"
)

// KoyoDataCreate is the builder for creating a KoyoData entity.
type KoyoDataCreate struct {
	config
	mutation *KoyoDataMutation
	hooks    []Hook
}

// SetKoyoID sets the "koyo_id" field.
func (kdc *KoyoDataCreate) SetKoyoID(pu pulid.ID) *KoyoDataCreate {
	kdc.mutation.SetKoyoID(pu)
	return kdc
}

// SetScale sets the "scale" field.
func (kdc *KoyoDataCreate) SetScale(f float64) *KoyoDataCreate {
	kdc.mutation.SetScale(f)
	return kdc
}

// SetParams sets the "params" field.
func (kdc *KoyoDataCreate) SetParams(m map[string]string) *KoyoDataCreate {
	kdc.mutation.SetParams(m)
	return kdc
}

// SetVersion sets the "version" field.
func (kdc *KoyoDataCreate) SetVersion(s string) *KoyoDataCreate {
	kdc.mutation.SetVersion(s)
	return kdc
}

// SetEntryAt sets the "entry_at" field.
func (kdc *KoyoDataCreate) SetEntryAt(t time.Time) *KoyoDataCreate {
	kdc.mutation.SetEntryAt(t)
	return kdc
}

// SetNillableEntryAt sets the "entry_at" field if the given value is not nil.
func (kdc *KoyoDataCreate) SetNillableEntryAt(t *time.Time) *KoyoDataCreate {
	if t != nil {
		kdc.SetEntryAt(*t)
	}
	return kdc
}

// SetTargetAt sets the "target_at" field.
func (kdc *KoyoDataCreate) SetTargetAt(t time.Time) *KoyoDataCreate {
	kdc.mutation.SetTargetAt(t)
	return kdc
}

// SetID sets the "id" field.
func (kdc *KoyoDataCreate) SetID(pu pulid.ID) *KoyoDataCreate {
	kdc.mutation.SetID(pu)
	return kdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (kdc *KoyoDataCreate) SetNillableID(pu *pulid.ID) *KoyoDataCreate {
	if pu != nil {
		kdc.SetID(*pu)
	}
	return kdc
}

// Mutation returns the KoyoDataMutation object of the builder.
func (kdc *KoyoDataCreate) Mutation() *KoyoDataMutation {
	return kdc.mutation
}

// Save creates the KoyoData in the database.
func (kdc *KoyoDataCreate) Save(ctx context.Context) (*KoyoData, error) {
	kdc.defaults()
	return withHooks(ctx, kdc.sqlSave, kdc.mutation, kdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kdc *KoyoDataCreate) SaveX(ctx context.Context) *KoyoData {
	v, err := kdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kdc *KoyoDataCreate) Exec(ctx context.Context) error {
	_, err := kdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kdc *KoyoDataCreate) ExecX(ctx context.Context) {
	if err := kdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kdc *KoyoDataCreate) defaults() {
	if _, ok := kdc.mutation.EntryAt(); !ok {
		v := koyodata.DefaultEntryAt()
		kdc.mutation.SetEntryAt(v)
	}
	if _, ok := kdc.mutation.ID(); !ok {
		v := koyodata.DefaultID()
		kdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kdc *KoyoDataCreate) check() error {
	if _, ok := kdc.mutation.KoyoID(); !ok {
		return &ValidationError{Name: "koyo_id", err: errors.New(`ent: missing required field "KoyoData.koyo_id"`)}
	}
	if _, ok := kdc.mutation.Scale(); !ok {
		return &ValidationError{Name: "scale", err: errors.New(`ent: missing required field "KoyoData.scale"`)}
	}
	if _, ok := kdc.mutation.Params(); !ok {
		return &ValidationError{Name: "params", err: errors.New(`ent: missing required field "KoyoData.params"`)}
	}
	if _, ok := kdc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "KoyoData.version"`)}
	}
	if v, ok := kdc.mutation.Version(); ok {
		if err := koyodata.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "KoyoData.version": %w`, err)}
		}
	}
	if _, ok := kdc.mutation.EntryAt(); !ok {
		return &ValidationError{Name: "entry_at", err: errors.New(`ent: missing required field "KoyoData.entry_at"`)}
	}
	if _, ok := kdc.mutation.TargetAt(); !ok {
		return &ValidationError{Name: "target_at", err: errors.New(`ent: missing required field "KoyoData.target_at"`)}
	}
	return nil
}

func (kdc *KoyoDataCreate) sqlSave(ctx context.Context) (*KoyoData, error) {
	if err := kdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	kdc.mutation.id = &_node.ID
	kdc.mutation.done = true
	return _node, nil
}

func (kdc *KoyoDataCreate) createSpec() (*KoyoData, *sqlgraph.CreateSpec) {
	var (
		_node = &KoyoData{config: kdc.config}
		_spec = sqlgraph.NewCreateSpec(koyodata.Table, sqlgraph.NewFieldSpec(koyodata.FieldID, field.TypeString))
	)
	if id, ok := kdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := kdc.mutation.KoyoID(); ok {
		_spec.SetField(koyodata.FieldKoyoID, field.TypeString, value)
		_node.KoyoID = value
	}
	if value, ok := kdc.mutation.Scale(); ok {
		_spec.SetField(koyodata.FieldScale, field.TypeFloat64, value)
		_node.Scale = value
	}
	if value, ok := kdc.mutation.Params(); ok {
		_spec.SetField(koyodata.FieldParams, field.TypeJSON, value)
		_node.Params = value
	}
	if value, ok := kdc.mutation.Version(); ok {
		_spec.SetField(koyodata.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := kdc.mutation.EntryAt(); ok {
		_spec.SetField(koyodata.FieldEntryAt, field.TypeTime, value)
		_node.EntryAt = value
	}
	if value, ok := kdc.mutation.TargetAt(); ok {
		_spec.SetField(koyodata.FieldTargetAt, field.TypeTime, value)
		_node.TargetAt = value
	}
	return _node, _spec
}

// KoyoDataCreateBulk is the builder for creating many KoyoData entities in bulk.
type KoyoDataCreateBulk struct {
	config
	err      error
	builders []*KoyoDataCreate
}

// Save creates the KoyoData entities in the database.
func (kdcb *KoyoDataCreateBulk) Save(ctx context.Context) ([]*KoyoData, error) {
	if kdcb.err != nil {
		return nil, kdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kdcb.builders))
	nodes := make([]*KoyoData, len(kdcb.builders))
	mutators := make([]Mutator, len(kdcb.builders))
	for i := range kdcb.builders {
		func(i int, root context.Context) {
			builder := kdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KoyoDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kdcb *KoyoDataCreateBulk) SaveX(ctx context.Context) []*KoyoData {
	v, err := kdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kdcb *KoyoDataCreateBulk) Exec(ctx context.Context) error {
	_, err := kdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kdcb *KoyoDataCreateBulk) ExecX(ctx context.Context) {
	if err := kdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

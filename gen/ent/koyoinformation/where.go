// Code generated by ent, DO NOT EDIT.

package koyoinformation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/halcyon-org/kizuna/ent/schema/pulid"
	"github.com/halcyon-org/kizuna/gen/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldDescription, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldVersion, v))
}

// License applies equality check predicate on the "license" field. It's identical to LicenseEQ.
func License(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldLicense, v))
}

// APIKey applies equality check predicate on the "api_key" field. It's identical to APIKeyEQ.
func APIKey(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldAPIKey, v))
}

// FirstEntryAt applies equality check predicate on the "first_entry_at" field. It's identical to FirstEntryAtEQ.
func FirstEntryAt(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldFirstEntryAt, v))
}

// LastEntryAt applies equality check predicate on the "last_entry_at" field. It's identical to LastEntryAtEQ.
func LastEntryAt(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldLastEntryAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContainsFold(FieldDescription, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContainsFold(FieldVersion, v))
}

// LicenseEQ applies the EQ predicate on the "license" field.
func LicenseEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldLicense, v))
}

// LicenseNEQ applies the NEQ predicate on the "license" field.
func LicenseNEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldLicense, v))
}

// LicenseIn applies the In predicate on the "license" field.
func LicenseIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldLicense, vs...))
}

// LicenseNotIn applies the NotIn predicate on the "license" field.
func LicenseNotIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldLicense, vs...))
}

// LicenseGT applies the GT predicate on the "license" field.
func LicenseGT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldLicense, v))
}

// LicenseGTE applies the GTE predicate on the "license" field.
func LicenseGTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldLicense, v))
}

// LicenseLT applies the LT predicate on the "license" field.
func LicenseLT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldLicense, v))
}

// LicenseLTE applies the LTE predicate on the "license" field.
func LicenseLTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldLicense, v))
}

// LicenseContains applies the Contains predicate on the "license" field.
func LicenseContains(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContains(FieldLicense, v))
}

// LicenseHasPrefix applies the HasPrefix predicate on the "license" field.
func LicenseHasPrefix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasPrefix(FieldLicense, v))
}

// LicenseHasSuffix applies the HasSuffix predicate on the "license" field.
func LicenseHasSuffix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasSuffix(FieldLicense, v))
}

// LicenseEqualFold applies the EqualFold predicate on the "license" field.
func LicenseEqualFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEqualFold(FieldLicense, v))
}

// LicenseContainsFold applies the ContainsFold predicate on the "license" field.
func LicenseContainsFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContainsFold(FieldLicense, v))
}

// DataTypeEQ applies the EQ predicate on the "data_type" field.
func DataTypeEQ(v DataType) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldDataType, v))
}

// DataTypeNEQ applies the NEQ predicate on the "data_type" field.
func DataTypeNEQ(v DataType) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldDataType, v))
}

// DataTypeIn applies the In predicate on the "data_type" field.
func DataTypeIn(vs ...DataType) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldDataType, vs...))
}

// DataTypeNotIn applies the NotIn predicate on the "data_type" field.
func DataTypeNotIn(vs ...DataType) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldDataType, vs...))
}

// APIKeyEQ applies the EQ predicate on the "api_key" field.
func APIKeyEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldAPIKey, v))
}

// APIKeyNEQ applies the NEQ predicate on the "api_key" field.
func APIKeyNEQ(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldAPIKey, v))
}

// APIKeyIn applies the In predicate on the "api_key" field.
func APIKeyIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldAPIKey, vs...))
}

// APIKeyNotIn applies the NotIn predicate on the "api_key" field.
func APIKeyNotIn(vs ...string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldAPIKey, vs...))
}

// APIKeyGT applies the GT predicate on the "api_key" field.
func APIKeyGT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldAPIKey, v))
}

// APIKeyGTE applies the GTE predicate on the "api_key" field.
func APIKeyGTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldAPIKey, v))
}

// APIKeyLT applies the LT predicate on the "api_key" field.
func APIKeyLT(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldAPIKey, v))
}

// APIKeyLTE applies the LTE predicate on the "api_key" field.
func APIKeyLTE(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldAPIKey, v))
}

// APIKeyContains applies the Contains predicate on the "api_key" field.
func APIKeyContains(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContains(FieldAPIKey, v))
}

// APIKeyHasPrefix applies the HasPrefix predicate on the "api_key" field.
func APIKeyHasPrefix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasPrefix(FieldAPIKey, v))
}

// APIKeyHasSuffix applies the HasSuffix predicate on the "api_key" field.
func APIKeyHasSuffix(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldHasSuffix(FieldAPIKey, v))
}

// APIKeyEqualFold applies the EqualFold predicate on the "api_key" field.
func APIKeyEqualFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEqualFold(FieldAPIKey, v))
}

// APIKeyContainsFold applies the ContainsFold predicate on the "api_key" field.
func APIKeyContainsFold(v string) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldContainsFold(FieldAPIKey, v))
}

// FirstEntryAtEQ applies the EQ predicate on the "first_entry_at" field.
func FirstEntryAtEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldFirstEntryAt, v))
}

// FirstEntryAtNEQ applies the NEQ predicate on the "first_entry_at" field.
func FirstEntryAtNEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldFirstEntryAt, v))
}

// FirstEntryAtIn applies the In predicate on the "first_entry_at" field.
func FirstEntryAtIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldFirstEntryAt, vs...))
}

// FirstEntryAtNotIn applies the NotIn predicate on the "first_entry_at" field.
func FirstEntryAtNotIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldFirstEntryAt, vs...))
}

// FirstEntryAtGT applies the GT predicate on the "first_entry_at" field.
func FirstEntryAtGT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldFirstEntryAt, v))
}

// FirstEntryAtGTE applies the GTE predicate on the "first_entry_at" field.
func FirstEntryAtGTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldFirstEntryAt, v))
}

// FirstEntryAtLT applies the LT predicate on the "first_entry_at" field.
func FirstEntryAtLT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldFirstEntryAt, v))
}

// FirstEntryAtLTE applies the LTE predicate on the "first_entry_at" field.
func FirstEntryAtLTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldFirstEntryAt, v))
}

// LastEntryAtEQ applies the EQ predicate on the "last_entry_at" field.
func LastEntryAtEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldLastEntryAt, v))
}

// LastEntryAtNEQ applies the NEQ predicate on the "last_entry_at" field.
func LastEntryAtNEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldLastEntryAt, v))
}

// LastEntryAtIn applies the In predicate on the "last_entry_at" field.
func LastEntryAtIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldLastEntryAt, vs...))
}

// LastEntryAtNotIn applies the NotIn predicate on the "last_entry_at" field.
func LastEntryAtNotIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldLastEntryAt, vs...))
}

// LastEntryAtGT applies the GT predicate on the "last_entry_at" field.
func LastEntryAtGT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldLastEntryAt, v))
}

// LastEntryAtGTE applies the GTE predicate on the "last_entry_at" field.
func LastEntryAtGTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldLastEntryAt, v))
}

// LastEntryAtLT applies the LT predicate on the "last_entry_at" field.
func LastEntryAtLT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldLastEntryAt, v))
}

// LastEntryAtLTE applies the LTE predicate on the "last_entry_at" field.
func LastEntryAtLTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldLastEntryAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasExternals applies the HasEdge predicate on the "externals" edge.
func HasExternals() predicate.KoyoInformation {
	return predicate.KoyoInformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ExternalsTable, ExternalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExternalsWith applies the HasEdge predicate on the "externals" edge with a given conditions (other predicates).
func HasExternalsWith(preds ...predicate.ExternalInformation) predicate.KoyoInformation {
	return predicate.KoyoInformation(func(s *sql.Selector) {
		step := newExternalsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasData applies the HasEdge predicate on the "data" edge.
func HasData() predicate.KoyoInformation {
	return predicate.KoyoInformation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DataTable, DataColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDataWith applies the HasEdge predicate on the "data" edge with a given conditions (other predicates).
func HasDataWith(preds ...predicate.KoyoData) predicate.KoyoInformation {
	return predicate.KoyoInformation(func(s *sql.Selector) {
		step := newDataStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.KoyoInformation) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.KoyoInformation) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.KoyoInformation) predicate.KoyoInformation {
	return predicate.KoyoInformation(sql.NotPredicates(p))
}
